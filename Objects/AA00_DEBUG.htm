<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AA00_DEBUG.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AA00_DEBUG.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon May 18 15:37:45 2020
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lev_gauge_to_pc(void*) &rArr; TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[20]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3c]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from lev_gauge_to_pc.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from flash_driver.o(i.FLASH_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4c]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from i2c_driver.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from i2c_driver.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from i2c_driver.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from i2c_driver.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[47]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[44]">LPUART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[f]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4b]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[36]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[37]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_TIM15_IRQHandler</a> from lev_gauge_to_pc.o(i.TIM1_BRK_TIM15_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[27]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[38]">TIM6_DAC_IRQHandler</a> from flash_driver.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[39]">TIM7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4a]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[51]">lev_gauge_to_pc(void*)</a> from lev_gauge_to_pc.o(i._Z15lev_gauge_to_pcPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[67]">TExtMaster::all_pkt_tx(const unsigned char*, unsigned short)</a> from ext_master.o(i._ZN10TExtMaster10all_pkt_txEPKht) referenced from ext_master.o(.constdata)
 <LI><a href="#[64]">TExtMaster::no_wrap_tx(const unsigned char*, unsigned short)</a> from ext_master.o(i._ZN10TExtMaster10no_wrap_txEPKht) referenced from ext_master.o(.constdata)
 <LI><a href="#[65]">TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)</a> from ext_master.o(i._ZN10TExtMaster13start_wrap_txEPKht) referenced from ext_master.o(.constdata)
 <LI><a href="#[66]">TExtMaster::finish_wrap_tx(const unsigned char*, unsigned short)</a> from ext_master.o(i._ZN10TExtMaster14finish_wrap_txEPKht) referenced from ext_master.o(.constdata)
 <LI><a href="#[68]">TExchngToPC::rx_set_freg(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC11rx_set_fregEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[69]">TExchngToPC::tx_set_freg(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC11tx_set_fregEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[71]">TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC12rx_start_adcEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[73]">TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC14rx_cmp_captureEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[74]">TExchngToPC::tx_cmp_capture(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC14tx_cmp_captureEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[75]">TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC15rx_diff_captureEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[76]">TExchngToPC::tx_diff_capture(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC15tx_diff_captureEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[6c]">TExchngToPC::rx_set_pos_pot_1(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC16rx_set_pos_pot_1EPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[6e]">TExchngToPC::rx_set_pos_pot_2(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC16rx_set_pos_pot_2EPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[6d]">TExchngToPC::tx_set_pos_pot_1(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC16tx_set_pos_pot_1EPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[6f]">TExchngToPC::tx_set_pos_pot_2(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC16tx_set_pos_pot_2EPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[6a]">TExchngToPC::rx_set_duty_cycle(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC17rx_set_duty_cycleEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[6b]">TExchngToPC::tx_set_duty_cycle(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC17tx_set_duty_cycleEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[72]">TExchngToPC::tx_adc(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC6tx_adcEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[70]">TExchngToPC::tx_test(TExchngToPC::TParamHandle*)</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPC7tx_testEPNS_12TParamHandleE) referenced from lev_gauge_to_pc.o(.constdata)
 <LI><a href="#[56]">TExchngToPC::~TExchngToPC()</a> from lev_gauge_to_pc.o(i._ZN11TExchngToPCD1Ev) referenced from lev_gauge_to_pc.o(i.__sti___19_lev_gauge_to_pc_cpp_UIF)
 <LI><a href="#[0]">[local to hard_config_cpp]::LL_AHB2_GRP1_EnableClock(unsigned)</a> from hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_AHB2_GRP1_EnableClockEj) referenced 54 times from hard_config.o(.data)
 <LI><a href="#[2]">[local to hard_config_cpp]::LL_APB1_GRP1_EnableClock(unsigned)</a> from hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_APB1_GRP1_EnableClockEj) referenced 2 times from hard_config.o(.data)
 <LI><a href="#[1]">[local to hard_config_cpp]::LL_APB2_GRP1_EnableClock(unsigned)</a> from hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_APB2_GRP1_EnableClockEj) referenced 10 times from hard_config.o(.data)
 <LI><a href="#[3]">[local to hard_config_cpp]::LL_RCC_SetADCClockSource(unsigned)</a> from hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_RCC_SetADCClockSourceEj) referenced 2 times from hard_config.o(.data)
 <LI><a href="#[57]">TLed::~TLed()</a> from led.o(i._ZN4TLedD1Ev) referenced from led.o(i.__sti___7_Led_cpp_Led)
 <LI><a href="#[55]">TFlash::~TFlash()</a> from flash_driver.o(i._ZN6TFlashD1Ev) referenced from flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4)
 <LI><a href="#[5e]">TModel::get_psw_admin()</a> from model.o(i._ZN6TModel13get_psw_adminEv) referenced from model.o(.constdata)
 <LI><a href="#[5f]">TModel::get_psw_super()</a> from model.o(i._ZN6TModel13get_psw_superEv) referenced from model.o(.constdata)
 <LI><a href="#[61]">TModel::handler_calib(short, bool*)</a> from model.o(i._ZN6TModel13handler_calibEsPb) referenced from model.o(.constdata)
 <LI><a href="#[63]">TModel::handler_access(short, bool*)</a> from model.o(i._ZN6TModel14handler_accessEsPb) referenced from model.o(.constdata)
 <LI><a href="#[58]">TModel::~TModel()</a> from model.o(i._ZN6TModelD1Ev) referenced from model.o(i.__sti___9_model_cpp_Model)
 <LI><a href="#[53]">TButton::~TButton()</a> from button.o(i._ZN7TButtonD1Ev) referenced from button.o(i.__sti___10_Button_cpp_Btn)
 <LI><a href="#[5d]">T_AD8402::sdi_clr()</a> from ad8402.o(i._ZN8T_AD84027sdi_clrEv) referenced from ad8402.o(.constdata)
 <LI><a href="#[5c]">T_AD8402::sdi_set()</a> from ad8402.o(i._ZN8T_AD84027sdi_setEv) referenced from ad8402.o(.constdata)
 <LI><a href="#[52]">T_AD8402::~T_AD8402()</a> from ad8402.o(i._ZN8T_AD8402D1Ev) referenced from ad8402.o(i.__sti___10_AD8402_cpp_AD8402)
 <LI><a href="#[54]">TSettings::~TSettings()</a> from settings.o(i._ZN9TSettingsD1Ev) referenced from settings.o(i.__sti___12_settings_cpp_Settings)
 <LI><a href="#[62]">TSettings::chk_access(short) const</a> from settings.o(i._ZNK9TSettings10chk_accessEs) referenced from model.o(.constdata)
 <LI><a href="#[60]">TSettings::chk_calib(short) const</a> from settings.o(i._ZNK9TSettings9chk_calibEs) referenced from model.o(.constdata)
 <LI><a href="#[50]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[79]">__sti___10_AD8402_cpp_AD8402</a> from ad8402.o(i.__sti___10_AD8402_cpp_AD8402) referenced from ad8402.o(.init_array)
 <LI><a href="#[77]">__sti___10_Button_cpp_Btn</a> from button.o(i.__sti___10_Button_cpp_Btn) referenced from button.o(.init_array)
 <LI><a href="#[7d]">__sti___12_settings_cpp_Settings</a> from settings.o(i.__sti___12_settings_cpp_Settings) referenced from settings.o(.init_array)
 <LI><a href="#[7c]">__sti___16_Flash_driver_cpp_d50a58b4</a> from flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4) referenced from flash_driver.o(.init_array)
 <LI><a href="#[7e]">__sti___19_lev_gauge_to_pc_cpp_UIF</a> from lev_gauge_to_pc.o(i.__sti___19_lev_gauge_to_pc_cpp_UIF) referenced from lev_gauge_to_pc.o(.init_array)
 <LI><a href="#[78]">__sti___7_Led_cpp_Led</a> from led.o(i.__sti___7_Led_cpp_Led) referenced from led.o(.init_array)
 <LI><a href="#[7a]">__sti___8_main_cpp_63965102</a> from main.o(i.__sti___8_main_cpp_63965102) referenced from main.o(.init_array)
 <LI><a href="#[7b]">__sti___9_model_cpp_Model</a> from model.o(i.__sti___9_model_cpp_Model) referenced from model.o(.init_array)
 <LI><a href="#[4e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[59]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[5b]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[80]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[82]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[18c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[83]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[18f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[183]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[182]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::T_AD8402(const TPot_HW&)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::data_bit_ctrl(unsigned char*)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_AD8402_cpp_AD8402
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Led_cpp_Led
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Button_cpp_Btn
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_model_cpp_Model
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_Flash_driver_cpp_d50a58b4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_lev_gauge_to_pc_cpp_UIF
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_settings_cpp_Settings
</UL>

<P><STRONG><a name="[8b]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[84]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[81]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[195]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI15_10_IRQHandler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_driver.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_driver.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, i2c_driver.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C1_EV_IRQHandler &rArr; [local to I2C_driver_cpp]::dks_stop_active() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_stop_active()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_rxne_active()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_driver.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_driver.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>LL_EXTI_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::deinit_diff_exti()
</UL>

<P><STRONG><a name="[93]"></a>LL_EXTI_Init</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_32_63
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_32_63
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_32_63
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_32_63
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_0_31
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_32_63
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_32_63
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
</UL>

<P><STRONG><a name="[f7]"></a>LL_GPIO_Init</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, stm32l4xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_mx_gpio()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::init()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::init()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::pin_clk_config()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
</UL>

<P><STRONG><a name="[b8]"></a>LL_Init1msTick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[a0]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::cnt_pwm()
</UL>

<P><STRONG><a name="[a5]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[b9]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[121]"></a>LL_TIM_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32l4xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
</UL>

<P><STRONG><a name="[a9]"></a>LL_USART_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32l4xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[a2]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[a3]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[a4]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetPCLK2ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[a1]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsEnabledRangeSelect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRangeAfterStandby
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[ae]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32l4xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsEnabledRangeSelect
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRangeAfterStandby
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i.TIM1_BRK_TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM1_BRK_TIM15_IRQHandler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_upd_demand_flag(bool)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::get_upd_demand_flag()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, flash_driver.o(i.TIM6_DAC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>FLASH_Lock()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, old_flash_lib.o(i._Z10FLASH_Lockv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>

<P><STRONG><a name="[b5]"></a>cfg_sys_clk()</STRONG> (Thumb, 570 bytes, Stack size 128 bytes, main.o(i._Z11cfg_sys_clkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cfg_sys_clk() &rArr; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_GetPriorityGrouping()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::LL_RCC_MSI_IsReady()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>FLASH_Unlock()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, old_flash_lib.o(i._Z12FLASH_Unlockv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>

<P><STRONG><a name="[11d]"></a>FLASH_GetStatus()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, old_flash_lib.o(i._Z15FLASH_GetStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[51]"></a>lev_gauge_to_pc(void*)</STRONG> (Thumb, 246 bytes, Stack size 176 bytes, lev_gauge_to_pc.o(i._Z15lev_gauge_to_pcPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lev_gauge_to_pc(void*) &rArr; TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::init()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::init()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::on()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::pin_clk_config()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::parse_pkt()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::get_data()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_init()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[67]"></a>TExtMaster::all_pkt_tx(const unsigned char*, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ext_master.o(i._ZN10TExtMaster10all_pkt_txEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TExtMaster::all_pkt_tx(const unsigned char*, unsigned short) &rArr; TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_master.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>TExtMaster::no_wrap_tx(const unsigned char*, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ext_master.o(i._ZN10TExtMaster10no_wrap_txEPKht))
<BR>[Address Reference Count : 1]<UL><LI> ext_master.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 36 bytes, ext_master.o(i._ZN10TExtMaster13start_wrap_txEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::get_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::all_pkt_tx(const unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ext_master.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>TExtMaster::finish_wrap_tx(const unsigned char*, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ext_master.o(i._ZN10TExtMaster14finish_wrap_txEPKht))
<BR>[Address Reference Count : 1]<UL><LI> ext_master.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, ext_master.o(i._ZN10TExtMaster7tx_dataEPKhtNS_11TWrapTxSignE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_test(TExchngToPC::TParamHandle*)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_adc(TExchngToPC::TParamHandle*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_set_duty_cycle(TExchngToPC::TParamHandle*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_set_pos_pot_2(TExchngToPC::TParamHandle*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_set_pos_pot_1(TExchngToPC::TParamHandle*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_diff_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tx_set_freg(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[c8]"></a>TExtMaster::get_data()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ext_master.o(i._ZN10TExtMaster8get_dataEv))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[c7]"></a>TExtMaster::parse_pkt()</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ext_master.o(i._ZN10TExtMaster9parse_pktEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TExtMaster::parse_pkt() &rArr; TUsart::read_byte()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::read_byte()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::enable_rx()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::disable_rx()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[ce]"></a>TExtMaster::TExtMaster(const TUsart_HW&)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ext_master.o(i._ZN10TExtMasterC1ERK9TUsart_HW))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TExtMaster::TExtMaster(const TUsart_HW&) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::TExchngToPC(const TUsart_HW&, const TTmr_HW&, const TTmr_HW&, const TTmr_HW&, const TAdc_HW&)
</UL>

<P><STRONG><a name="[199]"></a>TExtMaster::TExtMaster__sub_object(const TUsart_HW&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, ext_master.o(i._ZN10TExtMasterC1ERK9TUsart_HW), UNUSED)

<P><STRONG><a name="[d0]"></a>TExtMaster::~TExtMaster()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ext_master.o(i._ZN10TExtMasterD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TExtMaster::~TExtMaster() &rArr; TUsart::~TUsart()
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::~TUsart()
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::~TExchngToPC()
</UL>

<P><STRONG><a name="[19a]"></a>TExtMaster::~TExtMaster__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ext_master.o(i._ZN10TExtMasterD1Ev), UNUSED)

<P><STRONG><a name="[68]"></a>TExchngToPC::rx_set_freg(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC11rx_set_fregEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TExchngToPC::rx_set_freg(TExchngToPC::TParamHandle*) &rArr; TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>TExchngToPC::tx_set_freg(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC11tx_set_fregEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_set_freg(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC12rx_start_adcEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::off()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::on()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_IsConversionOngoing(ADC_TypeDef*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_StopConversion(ADC_TypeDef*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::chk_range(float, const TExchngToPC::TRange&)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::en_adc()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::deinit_diff_exti()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>TExchngToPC::tmr_cmp_init()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC12tmr_cmp_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TExchngToPC::tmr_cmp_init() &rArr; [local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableARRPreload(TIM_TypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_CC_EnableChannel(TIM_TypeDef*, unsigned)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPrescaler(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetAutoReload(TIM_TypeDef*, unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetAFPin_0_7(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetSlaveMode(TIM_TypeDef*, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetPrescaler(TIM_TypeDef*, unsigned)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetFilter(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinSpeed(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinPull(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[ea]"></a>TExchngToPC::set_diff_freq(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC13set_diff_freqEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TExchngToPC::set_diff_freq(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetPrescaler(TIM_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[c5]"></a>TExchngToPC::tmr_diff_init()</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC13tmr_diff_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TExchngToPC::tmr_diff_init() &rArr; [local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_CC_EnableChannel(TIM_TypeDef*, unsigned)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPrescaler(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetAutoReload(TIM_TypeDef*, unsigned)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetAFPin_0_7(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetSlaveMode(TIM_TypeDef*, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetPrescaler(TIM_TypeDef*, unsigned)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetFilter(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinSpeed(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinPull(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[c3]"></a>TExchngToPC::tmr_freg_init()</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC13tmr_freg_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TExchngToPC::tmr_freg_init() &rArr; TExchngToPC::cnt_pwm() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_GetPriorityGrouping()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_SetCompareCH1(TIM_TypeDef*, unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_EnablePreload(TIM_TypeDef*, unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableAllOutputs(TIM_TypeDef*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableARRPreload(TIM_TypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_CC_EnableChannel(TIM_TypeDef*, unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_ConfigOutput(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetAutoReload(TIM_TypeDef*, unsigned)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableCounter(TIM_TypeDef*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetSlaveMode(TIM_TypeDef*, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetPrescaler(TIM_TypeDef*, unsigned)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinSpeed(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinPull(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_SetMode(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::cnt_pwm()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[d9]"></a>TExchngToPC::init_diff_exti(unsigned)</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC14init_diff_extiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TExchngToPC::init_diff_exti(unsigned) &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_GetPriorityGrouping()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[73]"></a>TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC14rx_cmp_captureEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::off()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::on()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableAllOutputs(TIM_TypeDef*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_DisableCounter(TIM_TypeDef*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableCounter(TIM_TypeDef*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetCounter(TIM_TypeDef*, unsigned)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::deinit_diff_exti()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>TExchngToPC::tx_cmp_capture(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC14tx_cmp_captureEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_cmp_capture(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC15rx_diff_captureEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*) &rArr; TExchngToPC::set_diff_freq(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_DisableCounter(TIM_TypeDef*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableCounter(TIM_TypeDef*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetCounter(TIM_TypeDef*, unsigned)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::deinit_diff_exti()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_diff_freq(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>TExchngToPC::tx_diff_capture(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC15tx_diff_captureEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_diff_capture(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>TExchngToPC::deinit_diff_exti()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC16deinit_diff_extiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TExchngToPC::deinit_diff_exti()
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[6c]"></a>TExchngToPC::rx_set_pos_pot_1(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC16rx_set_pos_pot_1EPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TExchngToPC::rx_set_pos_pot_1(TExchngToPC::TParamHandle*) &rArr; T_AD8402::set_code(unsigned char, T_AD8402::TChannel) &rArr; T_AD8402::data_bit_ctrl(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::chk_range(float, const TExchngToPC::TRange&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>TExchngToPC::rx_set_pos_pot_2(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC16rx_set_pos_pot_2EPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TExchngToPC::rx_set_pos_pot_2(TExchngToPC::TParamHandle*) &rArr; T_AD8402::set_code(unsigned char, T_AD8402::TChannel) &rArr; T_AD8402::data_bit_ctrl(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::chk_range(float, const TExchngToPC::TRange&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>TExchngToPC::tx_set_pos_pot_1(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC16tx_set_pos_pot_1EPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_set_pos_pot_1(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>TExchngToPC::tx_set_pos_pot_2(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC16tx_set_pos_pot_2EPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_set_pos_pot_2(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>TExchngToPC::rx_set_duty_cycle(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC17rx_set_duty_cycleEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TExchngToPC::rx_set_duty_cycle(TExchngToPC::TParamHandle*) &rArr; TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>TExchngToPC::tx_set_duty_cycle(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC17tx_set_duty_cycleEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_set_duty_cycle(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>TExchngToPC::get_upd_demand_flag()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC19get_upd_demand_flagEv))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>TExchngToPC::set_upd_demand_flag(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC19set_upd_demand_flagEb))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>TExchngToPC::iserr(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC5iserrEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TExchngToPC::iserr(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::chk_range(float, const TExchngToPC::TRange&)
</UL>

<P><STRONG><a name="[d5]"></a>TExchngToPC::en_adc()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC6en_adcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TExchngToPC::en_adc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_ClearFlag_ADRDY(ADC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[72]"></a>TExchngToPC::tx_adc(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC6tx_adcEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_adc(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>TExchngToPC::adc_cal()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC7adc_calEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TExchngToPC::adc_cal()
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_IsDisableOngoing(ADC_TypeDef*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_IsEnabled(ADC_TypeDef*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_Disable(ADC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_init()
</UL>

<P><STRONG><a name="[eb]"></a>TExchngToPC::cnt_pwm()</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC7cnt_pwmEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TExchngToPC::cnt_pwm() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[dc]"></a>TExchngToPC::dis_adc()</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC7dis_adcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TExchngToPC::dis_adc()
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_IsConversionOngoing(ADC_TypeDef*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_StopConversion(ADC_TypeDef*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_IsDisableOngoing(ADC_TypeDef*)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_IsEnabled(ADC_TypeDef*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_ADC_Disable(ADC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[104]"></a>TExchngToPC::set_pwm(const TExchngToPC::TPwm&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC7set_pwmERKNS_4TPwmE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TExchngToPC::set_pwm(const TExchngToPC::TPwm&)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_SetCompareCH1(TIM_TypeDef*, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetAutoReload(TIM_TypeDef*, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_TIM_SetPrescaler(TIM_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[70]"></a>TExchngToPC::tx_test(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC7tx_testEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TExchngToPC::tx_test(TExchngToPC::TParamHandle*) &rArr; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign) &rArr; TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>TExchngToPC::adc_init()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC8adc_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TExchngToPC::adc_init() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned, unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_cal()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[d2]"></a>TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC8ctrl_pwmEPNS_12TParamHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::chk_range(float, const TExchngToPC::TRange&)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_pwm(const TExchngToPC::TPwm&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::cnt_pwm()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_upd_demand_flag(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_set_duty_cycle(TExchngToPC::TParamHandle*)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_set_freg(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[d3]"></a>TExchngToPC::chk_range(float, const TExchngToPC::TRange&)</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPC9chk_rangeEfRKNS_6TRangeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TExchngToPC::chk_range(float, const TExchngToPC::TRange&) &rArr; TExchngToPC::iserr(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::iserr(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_set_pos_pot_2(TExchngToPC::TParamHandle*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_set_pos_pot_1(TExchngToPC::TParamHandle*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[106]"></a>TExchngToPC::TExchngToPC(const TUsart_HW&, const TTmr_HW&, const TTmr_HW&, const TTmr_HW&, const TAdc_HW&)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPCC1ERK9TUsart_HWRK7TTmr_HWS5_S5_RK7TAdc_HW))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TExchngToPC::TExchngToPC(const TUsart_HW&, const TTmr_HW&, const TTmr_HW&, const TTmr_HW&, const TAdc_HW&) &rArr; TExtMaster::TExtMaster(const TUsart_HW&) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::TExtMaster(const TUsart_HW&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_lev_gauge_to_pc_cpp_UIF
</UL>

<P><STRONG><a name="[19b]"></a>TExchngToPC::TExchngToPC__sub_object(const TUsart_HW&, const TTmr_HW&, const TTmr_HW&, const TTmr_HW&, const TAdc_HW&)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPCC1ERK9TUsart_HWRK7TTmr_HWS5_S5_RK7TAdc_HW), UNUSED)

<P><STRONG><a name="[56]"></a>TExchngToPC::~TExchngToPC()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPCD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TExchngToPC::~TExchngToPC() &rArr; TExtMaster::~TExtMaster() &rArr; TUsart::~TUsart()
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::~TExtMaster()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(i.__sti___19_lev_gauge_to_pc_cpp_UIF)
</UL>
<P><STRONG><a name="[19c]"></a>TExchngToPC::~TExchngToPC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN11TExchngToPCD1Ev), UNUSED)

<P><STRONG><a name="[131]"></a>T_RS_485_phy::get_config()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phy10get_configEv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[135]"></a>T_RS_485_phy::T_RS_485_phy()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>

<P><STRONG><a name="[19d]"></a>T_RS_485_phy::T_RS_485_phy__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyC1Ev), UNUSED)

<P><STRONG><a name="[136]"></a>T_RS_485_phy::~T_RS_485_phy()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::~TUsart()
</UL>

<P><STRONG><a name="[19e]"></a>T_RS_485_phy::~T_RS_485_phy__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyD1Ev), UNUSED)

<P><STRONG><a name="[bf]"></a>TLed::on()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i._ZN4TLed2onEv))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[d4]"></a>TLed::off()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i._ZN4TLed3offEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TLed::off()
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Led_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[be]"></a>TLed::init()</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, led.o(i._ZN4TLed4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TLed::init() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Led_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[14b]"></a>TLed::TLed(const TPin&, void**)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i._ZN4TLedC1ERK4TPinPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TLed::TLed(const TPin&, void**)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Led_cpp_Led
</UL>

<P><STRONG><a name="[19f]"></a>TLed::TLed__sub_object(const TPin&, void**)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, led.o(i._ZN4TLedC1ERK4TPinPPv), UNUSED)

<P><STRONG><a name="[57]"></a>TLed::~TLed()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i._ZN4TLedD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.__sti___7_Led_cpp_Led)
</UL>
<P><STRONG><a name="[1a0]"></a>TLed::~TLed__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led.o(i._ZN4TLedD1Ev), UNUSED)

<P><STRONG><a name="[11c]"></a>TFlash::write_sets(const unsigned char*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, flash_driver.o(i._ZN6TFlash10write_setsEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TFlash::write_sets(const unsigned char*, unsigned short) &rArr; TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
</UL>

<P><STRONG><a name="[12c]"></a>TFlash::get_sets(unsigned char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, flash_driver.o(i._ZN6TFlash8get_setsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TFlash::get_sets(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
</UL>

<P><STRONG><a name="[120]"></a>TFlash::init_tmr()</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, flash_driver.o(i._ZN6TFlash8init_tmrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TFlash::init_tmr() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Flash_driver_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::TFlash()
</UL>

<P><STRONG><a name="[123]"></a>TFlash::TFlash()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash_driver.o(i._ZN6TFlashC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TFlash::TFlash() &rArr; TFlash::init_tmr() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_Flash_driver_cpp_d50a58b4
</UL>

<P><STRONG><a name="[1a1]"></a>TFlash::TFlash__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flash_driver.o(i._ZN6TFlashC1Ev), UNUSED)

<P><STRONG><a name="[55]"></a>TFlash::~TFlash()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_driver.o(i._ZN6TFlashD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4)
</UL>
<P><STRONG><a name="[1a2]"></a>TFlash::~TFlash__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flash_driver.o(i._ZN6TFlashD1Ev), UNUSED)

<P><STRONG><a name="[124]"></a>TModel::set_access(TSettings::TAccess)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel10set_accessEN9TSettings7TAccessE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_access(TSettings::TAccess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_access(short, bool*)
</UL>

<P><STRONG><a name="[5e]"></a>TModel::get_psw_admin()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_psw_adminEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_psw_admin() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>TModel::get_psw_super()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_psw_superEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_psw_super() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>TModel::handler_calib(short, bool*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13handler_calibEsPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::handler_calib(short, bool*) &rArr; TModel::get_calib_process() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_process()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>TModel::handler_access(short, bool*)</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, model.o(i._ZN6TModel14handler_accessEsPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModel::handler_access(short, bool*) &rArr; TModel::set_calib_process(TSettings::TCalibProcess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_authorize_item_ptr(const TModel::TAuthorize*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_access(TSettings::TAccess)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>TModel::get_calib_process()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel17get_calib_processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_calib_process() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_calib(short, bool*)
</UL>

<P><STRONG><a name="[129]"></a>TModel::set_calib_process(TSettings::TCalibProcess)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_calib_process(TSettings::TCalibProcess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_access(short, bool*)
</UL>

<P><STRONG><a name="[128]"></a>TModel::set_authorize_item_ptr(const TModel::TAuthorize*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model.o(i._ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_access(short, bool*)
</UL>

<P><STRONG><a name="[12a]"></a>TModel::TModel(void*&)</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, model.o(i._ZN6TModelC1ERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TModel::TModel(void*&) &rArr; TFlash::write_sets(const unsigned char*, unsigned short) &rArr; TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::TSettings()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::get_sets(unsigned char*, unsigned short)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_model_cpp_Model
</UL>

<P><STRONG><a name="[1a3]"></a>TModel::TModel__sub_object(void*&)</STRONG> (Thumb, 0 bytes, Stack size 96 bytes, model.o(i._ZN6TModelC1ERPv), UNUSED)

<P><STRONG><a name="[58]"></a>TModel::~TModel()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, model.o(i._ZN6TModelD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TModel::~TModel()
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::~TSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.__sti___9_model_cpp_Model)
</UL>
<P><STRONG><a name="[1a4]"></a>TModel::~TModel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, model.o(i._ZN6TModelD1Ev), UNUSED)

<P><STRONG><a name="[cd]"></a>TUsart::disable_rx()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN6TUsart10disable_rxEv))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::parse_pkt()
</UL>

<P><STRONG><a name="[12e]"></a>TUsart::set_485_hd(unsigned, unsigned)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN6TUsart10set_485_hdEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TUsart::set_485_hd(unsigned, unsigned) &rArr; [local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[ca]"></a>TUsart::write_burst(const unsigned char*, unsigned short)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN6TUsart11write_burstEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TUsart::write_burst(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::clr_error_flags()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
</UL>

<P><STRONG><a name="[c1]"></a>TUsart::pin_clk_config()</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usart_driver_.o(i._ZN6TUsart14pin_clk_configEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TUsart::pin_clk_config() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[130]"></a>TUsart::clr_error_flags()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN6TUsart15clr_error_flagsEv))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::read_byte()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::write_burst(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[c2]"></a>TUsart::hw_init(unsigned char)</STRONG> (Thumb, 288 bytes, Stack size 120 bytes, usart_driver_.o(i._ZN6TUsart7hw_initEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_RS_485_phy::get_config()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_232(unsigned, unsigned)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::clr_error_flags()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_485_hd(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[132]"></a>TUsart::set_232(unsigned, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN6TUsart7set_232Ejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TUsart::set_232(unsigned, unsigned) &rArr; [local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[cb]"></a>TUsart::enable_rx()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN6TUsart9enable_rxEv))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::parse_pkt()
</UL>

<P><STRONG><a name="[cc]"></a>TUsart::read_byte()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usart_driver_.o(i._ZN6TUsart9read_byteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TUsart::read_byte()
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::clr_error_flags()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_IsActiveFlag_RXNE(USART_TypeDef*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_ReceiveData8(USART_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::parse_pkt()
</UL>

<P><STRONG><a name="[cf]"></a>TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usart_driver_.o(i._ZN6TUsartC1ERK9TUsart_HWRKNS_5TSetsENS_5TModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_RS_485_phy::T_RS_485_phy()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::TExtMaster(const TUsart_HW&)
</UL>

<P><STRONG><a name="[1a5]"></a>TUsart::TUsart__sub_object(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, usart_driver_.o(i._ZN6TUsartC1ERK9TUsart_HWRKNS_5TSetsENS_5TModeE), UNUSED)

<P><STRONG><a name="[d1]"></a>TUsart::~TUsart()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_driver_.o(i._ZN6TUsartD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TUsart::~TUsart()
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_RS_485_phy::~T_RS_485_phy()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExtMaster::~TExtMaster()
</UL>

<P><STRONG><a name="[1a6]"></a>TUsart::~TUsart__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, usart_driver_.o(i._ZN6TUsartD1Ev), UNUSED)

<P><STRONG><a name="[14a]"></a>TButton::TButton(const TPin&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonC1ERK4TPin))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Button_cpp_Btn
</UL>

<P><STRONG><a name="[1a7]"></a>TButton::TButton__sub_object(const TPin&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonC1ERK4TPin), UNUSED)

<P><STRONG><a name="[53]"></a>TButton::~TButton()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.__sti___10_Button_cpp_Btn)
</UL>
<P><STRONG><a name="[1a8]"></a>TButton::~TButton__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonD1Ev), UNUSED)

<P><STRONG><a name="[141]"></a>T_AD8402::reverse_bits(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ad8402.o(i._ZN8T_AD840212reverse_bitsEh))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
</UL>

<P><STRONG><a name="[137]"></a>T_AD8402::data_bit_ctrl(unsigned char*)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, ad8402.o(i._ZN8T_AD840213data_bit_ctrlEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = T_AD8402::data_bit_ctrl(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
</UL>

<P><STRONG><a name="[c0]"></a>T_AD8402::init()</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ad8402.o(i._ZN8T_AD84024initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = T_AD8402::init() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::latch_set()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::shdn_clr()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::sdi_clr()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::clk_clr()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::rs_set()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
</UL>

<P><STRONG><a name="[13a]"></a>T_AD8402::rs_set()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84026rs_setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::rs_set()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::init()
</UL>

<P><STRONG><a name="[13b]"></a>T_AD8402::clk_clr()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84027clk_clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::clk_clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::init()
</UL>

<P><STRONG><a name="[13e]"></a>T_AD8402::clk_set()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84027clk_setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::clk_set()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
</UL>

<P><STRONG><a name="[5d]"></a>T_AD8402::sdi_clr()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84027sdi_clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::sdi_clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad8402.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>T_AD8402::sdi_set()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84027sdi_setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::sdi_set()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad8402.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>T_AD8402::set_code(unsigned char, T_AD8402::TChannel)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ad8402.o(i._ZN8T_AD84028set_codeEhNS_8TChannelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = T_AD8402::set_code(unsigned char, T_AD8402::TChannel) &rArr; T_AD8402::data_bit_ctrl(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::latch_set()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::latch_clr()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::shdn_set()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::sdi_clr()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::clk_set()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::clk_clr()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::data_bit_ctrl(unsigned char*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::reverse_bits(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_set_pos_pot_2(TExchngToPC::TParamHandle*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_set_pos_pot_1(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[139]"></a>T_AD8402::shdn_clr()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84028shdn_clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::shdn_clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::init()
</UL>

<P><STRONG><a name="[13f]"></a>T_AD8402::shdn_set()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84028shdn_setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::shdn_set()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
</UL>

<P><STRONG><a name="[140]"></a>T_AD8402::latch_clr()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84029latch_clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::latch_clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
</UL>

<P><STRONG><a name="[138]"></a>T_AD8402::latch_set()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad8402.o(i._ZN8T_AD84029latch_setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T_AD8402::latch_set()
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to AD8402_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::set_code(unsigned char, T_AD8402::TChannel)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::init()
</UL>

<P><STRONG><a name="[142]"></a>T_AD8402::T_AD8402(const TPot_HW&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ad8402.o(i._ZN8T_AD8402C1ERK7TPot_HW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T_AD8402::T_AD8402(const TPot_HW&)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_AD8402_cpp_AD8402
</UL>

<P><STRONG><a name="[1a9]"></a>T_AD8402::T_AD8402__sub_object(const TPot_HW&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ad8402.o(i._ZN8T_AD8402C1ERK7TPot_HW), UNUSED)

<P><STRONG><a name="[52]"></a>T_AD8402::~T_AD8402()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ad8402.o(i._ZN8T_AD8402D1Ev))
<BR>[Address Reference Count : 1]<UL><LI> ad8402.o(i.__sti___10_AD8402_cpp_AD8402)
</UL>
<P><STRONG><a name="[1aa]"></a>T_AD8402::~T_AD8402__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ad8402.o(i._ZN8T_AD8402D1Ev), UNUSED)

<P><STRONG><a name="[12b]"></a>TSettings::TSettings()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_settings_cpp_Settings
</UL>

<P><STRONG><a name="[1ab]"></a>TSettings::TSettings__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsC1Ev), UNUSED)

<P><STRONG><a name="[54]"></a>TSettings::~TSettings()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::~TModel()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.__sti___12_settings_cpp_Settings)
</UL>
<P><STRONG><a name="[1ac]"></a>TSettings::~TSettings__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsD1Ev), UNUSED)

<P><STRONG><a name="[11e]"></a>TFlash::erase_page(unsigned) const</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flash_driver.o(i._ZNK6TFlash10erase_pageEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TFlash::erase_page(unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::clear_all_error() const
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[11f]"></a>TFlash::write_page(const unsigned char*, unsigned short, unsigned) const</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, flash_driver.o(i._ZNK6TFlash10write_pageEPKhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[144]"></a>TFlash::clear_all_error() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash_driver.o(i._ZNK6TFlash15clear_all_errorEv))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>

<P><STRONG><a name="[146]"></a>TFlash::prog(const unsigned*, unsigned, unsigned) const</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, flash_driver.o(i._ZNK6TFlash4progEPKjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::start_tmr() const
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::stop_tmr() const
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::clear_all_error() const
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
</UL>

<P><STRONG><a name="[148]"></a>TFlash::stop_tmr() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash_driver.o(i._ZNK6TFlash8stop_tmrEv))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>

<P><STRONG><a name="[147]"></a>TFlash::start_tmr() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash_driver.o(i._ZNK6TFlash9start_tmrEv))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>

<P><STRONG><a name="[62]"></a>TSettings::chk_access(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings10chk_accessEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_access(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>TSettings::chk_calib(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings9chk_calibEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_calib(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ae]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_semphrs()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_mutexes()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_timers()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_mx_gpio()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8a]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[177]"></a>pvPortMalloc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[185]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[167]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[14f]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[161]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[180]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[157]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[166]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[151]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[150]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[153]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[155]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[160]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[181]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[179]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[158]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[170]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[bd]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lev_gauge_to_pc(void*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_init()
</UL>

<P><STRONG><a name="[176]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[17c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[17b]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[17d]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[186]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14d]"></a>vTaskStartScheduler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[85]"></a>vTaskSwitchContext</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[10a]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_63965102
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[10d]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_mutexes()
</UL>

<P><STRONG><a name="[110]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_semphrs()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[da]"></a>xQueueGenericReceive</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_process()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_access(TSettings::TAccess)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::ctrl_pwm(TExchngToPC::TParamHandle*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[164]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[125]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_process()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_access(TSettings::TAccess)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[188]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[8e]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_stop_active()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM15_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[108]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[184]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[171]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[b2]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[15f]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[175]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[15b]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[17e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[16c]"></a>xTimerGenericCommand</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[126]"></a>_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_super()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_admin()
</UL>

<P><STRONG><a name="[149]"></a>bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, settings.o(t._ZNK9TSettings9chk_paramIsEEbRKNS_6TRangeET_))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_calib(short) const
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_access(short) const
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[77]"></a>__sti___10_Button_cpp_Btn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button.o(i.__sti___10_Button_cpp_Btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___10_Button_cpp_Btn &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TButton::TButton(const TPin&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.init_array)
</UL>
<P><STRONG><a name="[11b]"></a>[local to Led_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(i._ZN23_INTERNAL_7_Led_cpp_Led22LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::init()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::off()
</UL>

<P><STRONG><a name="[78]"></a>__sti___7_Led_cpp_Led</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led.o(i.__sti___7_Led_cpp_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___7_Led_cpp_Led &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::TLed(const TPin&, void**)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.init_array)
</UL>
<P><STRONG><a name="[13c]"></a>[local to AD8402_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ad8402.o(i._ZN30_INTERNAL_10_AD8402_cpp_AD840220LL_GPIO_SetOutputPinEP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::latch_set()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::shdn_set()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::sdi_set()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::clk_set()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::rs_set()
</UL>

<P><STRONG><a name="[13d]"></a>[local to AD8402_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ad8402.o(i._ZN30_INTERNAL_10_AD8402_cpp_AD840222LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::latch_clr()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::shdn_clr()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::sdi_clr()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::clk_clr()
</UL>

<P><STRONG><a name="[79]"></a>__sti___10_AD8402_cpp_AD8402</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ad8402.o(i.__sti___10_AD8402_cpp_AD8402))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___10_AD8402_cpp_AD8402 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_AD8402::T_AD8402(const TPot_HW&)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ad8402.o(.init_array)
</UL>
<P><STRONG><a name="[107]"></a>[local to main_cpp]::create_tasks()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to main_cpp]::create_tasks() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::check_create_task(long)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>[local to main_cpp]::init_mx_gpio()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212init_mx_gpioEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = [local to main_cpp]::init_mx_gpio() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>[local to main_cpp]::create_timers()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>[local to main_cpp]::create_mutexes()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510214create_mutexesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [local to main_cpp]::create_mutexes() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::check_create_mutex(void*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>[local to main_cpp]::create_semphrs()</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510214create_semphrsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_cpp]::create_semphrs() &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::check_create_semphr(void*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>[local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[109]"></a>[local to main_cpp]::check_create_task(long)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510217check_create_taskEl))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
</UL>

<P><STRONG><a name="[b7]"></a>[local to main_cpp]::LL_RCC_MSI_IsReady()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[10e]"></a>[local to main_cpp]::check_create_mutex(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_mutexes()
</UL>

<P><STRONG><a name="[bb]"></a>[local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[111]"></a>[local to main_cpp]::check_create_semphr(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_semphrs()
</UL>

<P><STRONG><a name="[ba]"></a>[local to main_cpp]::NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[112]"></a>[local to main_cpp]::init_ll()</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_639651027init_llEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to main_cpp]::init_ll() &rArr; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_GetPriorityGrouping()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>__sti___8_main_cpp_63965102</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.__sti___8_main_cpp_63965102))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___8_main_cpp_63965102
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[0]"></a>[local to hard_config_cpp]::LL_AHB2_GRP1_EnableClock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_AHB2_GRP1_EnableClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hard_config_cpp]::LL_AHB2_GRP1_EnableClock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_config.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>[local to hard_config_cpp]::LL_APB1_GRP1_EnableClock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_APB1_GRP1_EnableClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hard_config_cpp]::LL_APB1_GRP1_EnableClock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_config.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>[local to hard_config_cpp]::LL_APB2_GRP1_EnableClock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_APB2_GRP1_EnableClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hard_config_cpp]::LL_APB2_GRP1_EnableClock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_config.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>[local to hard_config_cpp]::LL_RCC_SetADCClockSource(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hard_config.o(i._ZN35_INTERNAL_15_hard_config_cpp_Pot_HW24LL_RCC_SetADCClockSourceEj))
<BR>[Address Reference Count : 1]<UL><LI> hard_config.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>__sti___9_model_cpp_Model</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, model.o(i.__sti___9_model_cpp_Model))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __sti___9_model_cpp_Model &rArr; TModel::TModel(void*&) &rArr; TFlash::write_sets(const unsigned char*, unsigned short) &rArr; TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.init_array)
</UL>
<P><STRONG><a name="[122]"></a>[local to Flash_driver_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_driver.o(i._ZN38_INTERNAL_16_Flash_driver_cpp_d50a58b423LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
</UL>

<P><STRONG><a name="[7c]"></a>__sti___16_Flash_driver_cpp_d50a58b4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __sti___16_Flash_driver_cpp_d50a58b4 &rArr; TFlash::TFlash() &rArr; TFlash::init_tmr() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::TFlash()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_driver.o(.init_array)
</UL>
<P><STRONG><a name="[92]"></a>[local to I2C_driver_cpp]::dks_tc_active()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c113dks_tc_activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to I2C_driver_cpp]::dks_tc_active() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_GenerateStartCondition(I2C_TypeDef*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferRequest(I2C_TypeDef*, unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferSize(I2C_TypeDef*, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetSlaveAddr(I2C_TypeDef*, unsigned)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_DisableIT_TX(I2C_TypeDef*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_DisableIT_TC(I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>[local to I2C_driver_cpp]::dks_rxne_active()</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c115dks_rxne_activeEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>[local to I2C_driver_cpp]::dks_stop_active()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c115dks_stop_activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to I2C_driver_cpp]::dks_stop_active() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_ClearFlag_STOP(I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>[local to I2C_driver_cpp]::dks_txis_active()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c115dks_txis_activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to I2C_driver_cpp]::dks_txis_active()
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_ClearFlag_STOP(I2C_TypeDef*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_TransmitData8(I2C_TypeDef*, unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_DisableIT_TX(I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>[local to I2C_driver_cpp]::LL_I2C_DisableIT_TC(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c119LL_I2C_DisableIT_TCEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[116]"></a>[local to I2C_driver_cpp]::LL_I2C_DisableIT_TX(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c119LL_I2C_DisableIT_TXEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[113]"></a>[local to I2C_driver_cpp]::LL_I2C_SetSlaveAddr(I2C_TypeDef*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c119LL_I2C_SetSlaveAddrEP11I2C_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[11a]"></a>[local to I2C_driver_cpp]::LL_I2C_TransmitData8(I2C_TypeDef*, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c120LL_I2C_TransmitData8EP11I2C_TypeDefh))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
</UL>

<P><STRONG><a name="[119]"></a>[local to I2C_driver_cpp]::LL_I2C_ClearFlag_STOP(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c121LL_I2C_ClearFlag_STOPEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_stop_active()
</UL>

<P><STRONG><a name="[115]"></a>[local to I2C_driver_cpp]::LL_I2C_SetTransferSize(I2C_TypeDef*, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c122LL_I2C_SetTransferSizeEP11I2C_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[114]"></a>[local to I2C_driver_cpp]::LL_I2C_SetTransferRequest(I2C_TypeDef*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c125LL_I2C_SetTransferRequestEP11I2C_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[118]"></a>[local to I2C_driver_cpp]::LL_I2C_GenerateStartCondition(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c129LL_I2C_GenerateStartConditionEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[12f]"></a>[local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN39_INTERNAL_17_usart_driver__cpp_b612a17520LL_USART_SetBaudRateEP13USART_TypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_232(unsigned, unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_485_hd(unsigned, unsigned)
</UL>

<P><STRONG><a name="[134]"></a>[local to usart_driver__cpp]::LL_USART_ReceiveData8(USART_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN39_INTERNAL_17_usart_driver__cpp_b612a17521LL_USART_ReceiveData8EP13USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::read_byte()
</UL>

<P><STRONG><a name="[133]"></a>[local to usart_driver__cpp]::LL_USART_IsActiveFlag_RXNE(USART_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN39_INTERNAL_17_usart_driver__cpp_b612a17526LL_USART_IsActiveFlag_RXNEEP13USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::read_byte()
</UL>

<P><STRONG><a name="[178]"></a>prvHeapInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heap_2.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[59]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[15d]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[15e]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[162]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[163]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[169]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[16a]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[174]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14e]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[152]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[159]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[15c]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[5a]"></a>prvIdleTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[165]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[154]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[189]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[156]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[173]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[168]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[16b]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[16d]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[16f]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[16e]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[172]"></a>prvSwitchTimerLists</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[5b]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[7d]"></a>__sti___12_settings_cpp_Settings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(i.__sti___12_settings_cpp_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___12_settings_cpp_Settings &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::TSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.init_array)
</UL>
<P><STRONG><a name="[101]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_Disable(ADC_TypeDef*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF14LL_ADC_DisableEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_cal()
</UL>

<P><STRONG><a name="[f4]"></a>[local to lev_gauge_to_pc_cpp]::NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF14NVIC_EnableIRQE9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[100]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_IsEnabled(ADC_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF16LL_ADC_IsEnabledEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_cal()
</UL>

<P><STRONG><a name="[f3]"></a>[local to lev_gauge_to_pc_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF16NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[ed]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_SetMode(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF17LL_TIM_OC_SetModeEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_TIM_OC_SetMode(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[f8]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_SetCounter(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF17LL_TIM_SetCounterEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[dd]"></a>[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF18LL_GPIO_SetPinModeEP12GPIO_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinMode(GPIO_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_init()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[df]"></a>[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinPull(GPIO_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF18LL_GPIO_SetPinPullEP12GPIO_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinPull(GPIO_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[de]"></a>[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinSpeed(GPIO_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF19LL_GPIO_SetPinSpeedEP12GPIO_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_GPIO_SetPinSpeed(GPIO_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[e6]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetFilter(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF19LL_TIM_IC_SetFilterEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetFilter(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[e2]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_SetPrescaler(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF19LL_TIM_SetPrescalerEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_pwm(const TExchngToPC::TPwm&)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_diff_freq(unsigned short)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[e1]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_SetSlaveMode(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF19LL_TIM_SetSlaveModeEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[f2]"></a>[local to lev_gauge_to_pc_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF19NVIC_EncodePriorityEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[e0]"></a>[local to lev_gauge_to_pc_cpp]::LL_GPIO_SetAFPin_0_7(GPIO_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF20LL_GPIO_SetAFPin_0_7EP12GPIO_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_GPIO_SetAFPin_0_7(GPIO_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[f5]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableCounter(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF20LL_TIM_EnableCounterEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[e4]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_SetAutoReload(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF20LL_TIM_SetAutoReloadEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_pwm(const TExchngToPC::TPwm&)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[f9]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_DisableCounter(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF21LL_TIM_DisableCounterEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[e7]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF21LL_TIM_IC_SetPolarityEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[fe]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_ClearFlag_ADRDY(ADC_TypeDef*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF22LL_ADC_ClearFlag_ADRDYEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::en_adc()
</UL>

<P><STRONG><a name="[e8]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPrescaler(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF22LL_TIM_IC_SetPrescalerEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetPrescaler(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[ec]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_ConfigOutput(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF22LL_TIM_OC_ConfigOutputEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_TIM_OC_ConfigOutput(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[102]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_IsDisableOngoing(ADC_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF23LL_ADC_IsDisableOngoingEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::adc_cal()
</UL>

<P><STRONG><a name="[e9]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_CC_EnableChannel(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF23LL_TIM_CC_EnableChannelEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[fa]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF23LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[e3]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableARRPreload(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF23LL_TIM_EnableARRPreloadEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[f6]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_EnableAllOutputs(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF23LL_TIM_EnableAllOutputsEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_cmp_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[ee]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_EnablePreload(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF23LL_TIM_OC_EnablePreloadEP11TIM_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_TIM_OC_EnablePreload(TIM_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[ef]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_OC_SetCompareCH1(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF23LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::set_pwm(const TExchngToPC::TPwm&)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[e5]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF24LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to lev_gauge_to_pc_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_diff_init()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_cmp_init()
</UL>

<P><STRONG><a name="[f1]"></a>[local to lev_gauge_to_pc_cpp]::NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF24NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::init_diff_exti(unsigned)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[d6]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_StopConversion(ADC_TypeDef*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF25LL_ADC_REG_StopConversionEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[fb]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF26LL_TIM_IsActiveFlag_UPDATEEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[f0]"></a>[local to lev_gauge_to_pc_cpp]::LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF27LL_TIM_GenerateEvent_UPDATEEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_diff_capture(TExchngToPC::TParamHandle*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::tmr_freg_init()
</UL>

<P><STRONG><a name="[103]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF30LL_ADC_INJ_IsConversionOngoingEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
</UL>

<P><STRONG><a name="[d8]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_IsConversionOngoing(ADC_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF30LL_ADC_REG_IsConversionOngoingEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[d7]"></a>[local to lev_gauge_to_pc_cpp]::LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lev_gauge_to_pc.o(i._ZN36_INTERNAL_19_lev_gauge_to_pc_cpp_UIF34LL_ADC_REG_IsStopConversionOngoingEP11ADC_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::dis_adc()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::rx_start_adc(TExchngToPC::TParamHandle*)
</UL>

<P><STRONG><a name="[7e]"></a>__sti___19_lev_gauge_to_pc_cpp_UIF</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lev_gauge_to_pc.o(i.__sti___19_lev_gauge_to_pc_cpp_UIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___19_lev_gauge_to_pc_cpp_UIF &rArr; TExchngToPC::TExchngToPC(const TUsart_HW&, const TTmr_HW&, const TTmr_HW&, const TTmr_HW&, const TAdc_HW&) &rArr; TExtMaster::TExtMaster(const TUsart_HW&) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TExchngToPC::TExchngToPC(const TUsart_HW&, const TTmr_HW&, const TTmr_HW&, const TTmr_HW&, const TAdc_HW&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lev_gauge_to_pc.o(.init_array)
</UL>
<P><STRONG><a name="[94]"></a>LL_EXTI_DisableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[9a]"></a>LL_EXTI_DisableEvent_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableEvent_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[96]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[9c]"></a>LL_EXTI_DisableIT_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableIT_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[97]"></a>LL_EXTI_EnableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[9d]"></a>LL_EXTI_EnableEvent_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableEvent_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[99]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[9f]"></a>LL_EXTI_EnableFallingTrig_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableFallingTrig_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[95]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[9b]"></a>LL_EXTI_EnableIT_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableIT_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[98]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[9e]"></a>LL_EXTI_EnableRisingTrig_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableRisingTrig_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[a6]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[a7]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[a8]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[ac]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[ad]"></a>LL_RCC_MSI_GetRangeAfterStandby</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_MSI_GetRangeAfterStandby))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[ab]"></a>LL_RCC_MSI_IsEnabledRangeSelect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_MSI_IsEnabledRangeSelect))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[b0]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[af]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[b1]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[aa]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_usart.o(i.LL_USART_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
