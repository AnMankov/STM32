<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\FC01_DEBUG.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\FC01_DEBUG.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Mar 12 16:11:00 2020
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
[local to dev_ctrl_cpp]::base_ctrl() &rArr; [local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*) &rArr; [local to dev_ctrl_cpp]::user_calib(short) &rArr; TModel::set_bias(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[188]">MotionTL_GetLibVersion</a>
 <LI><a href="#[185]">MotionTL_Initialize</a>
 <LI><a href="#[186]">MotionTL_SetOrientation_Acc</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">NMI_Handler</a><BR>
 <LI><a href="#[4f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">HardFault_Handler</a><BR>
 <LI><a href="#[50]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">MemManage_Handler</a><BR>
 <LI><a href="#[51]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">BusFault_Handler</a><BR>
 <LI><a href="#[52]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">UsageFault_Handler</a><BR>
 <LI><a href="#[54]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">DebugMon_Handler</a><BR>
 <LI><a href="#[69]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[69]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[51]">BusFault_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6b]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6c]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6d]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6a]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[88]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[96]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[62]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[63]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[64]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[65]">DMA1_Channel4_IRQHandler</a> from modbus_link.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[66]">DMA1_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[67]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[68]">DMA1_Channel7_IRQHandler</a> from modbus_link.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[83]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[84]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[85]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[86]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[87]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8b]">DMA2_Channel6_IRQHandler</a> from modbus_link.o(i.DMA2_Channel6_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8c]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[54]">DebugMon_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5d]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7d]">EXTI15_10_IRQHandler</a> from mpu-9250_acc_gyro_mag_driver_hl.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5e]">EXTI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5f]">EXTI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[60]">EXTI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[61]">EXTI4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6e]">EXTI9_5_IRQHandler</a> from sensline.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5b]">FLASH_IRQHandler</a> from flash_driver.o(i.FLASH_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[95]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4f]">HardFault_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[75]">I2C1_ER_IRQHandler</a> from i2c_driver.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[74]">I2C1_EV_IRQHandler</a> from i2c_driver.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[77]">I2C2_ER_IRQHandler</a> from i2c_driver.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[76]">I2C2_EV_IRQHandler</a> from i2c_driver.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[90]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8f]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[89]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8a]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8d]">LPUART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[50]">MemManage_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4e]">NMI_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[58]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[55]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8e]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5c]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[94]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7e]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5a]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[91]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7f]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[78]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[79]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[80]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[53]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[92]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[56]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[98]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[59]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6f]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[72]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[71]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[70]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[73]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[81]">TIM6_DAC_IRQHandler</a> from flash_driver.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[82]">TIM7_IRQHandler</a> from dev_determ.o(i.TIM7_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[93]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7a]">USART1_IRQHandler</a> from modbus_link.o(i.USART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7b]">USART2_IRQHandler</a> from modbus_link.o(i.USART2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7c]">USART3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[52]">UsageFault_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[57]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9d]">base_to_pc(void*)</a> from base_to_pc.o(i._Z10base_to_pcPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[a4]">code_sw_tmr(void*)</a> from coding_switch.o(i._Z11code_sw_tmrPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
 <LI><a href="#[a1]">logger_ctrl(void*)</a> from logger_ctrl.o(i._Z11logger_ctrlPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[a3]">vPushButton(void*)</a> from button_poll.o(i._Z11vPushButtonPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[9e]">base_to_sens(void*)</a> from base_to_sens.o(i._Z12base_to_sensPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[9b]">discrete_out(void*)</a> from discrete_out.o(i._Z12discrete_outPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[9a]">coding_switch(void*)</a> from coding_switch.o(i._Z13coding_switchPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[a5]">do_uncalib_tmr(void*)</a> from discrete_out.o(i._Z14do_uncalib_tmrPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
 <LI><a href="#[9f]">sens_to_master(void*)</a> from sens_to_master.o(i._Z14sens_to_masterPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[a7]">vTimerCallback(void*)</a> from button_poll.o(i._Z14vTimerCallbackPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
 <LI><a href="#[9c]">mems(void*)</a> from mems.o(i._Z4memsPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[a6]">pd_tmr(void*)</a> from base_to_sens.o(i._Z6pd_tmrPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
 <LI><a href="#[a0]">dev_ctrl(void*)</a> from dev_ctrl.o(i._Z8dev_ctrlPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[a2]">vLedCtrl(void*)</a> from led_ctrl.o(i._Z8vLedCtrlPv) referenced from main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
 <LI><a href="#[ae]">TDevDeterm::~TDevDeterm()</a> from dev_determ.o(i._ZN10TDevDetermD1Ev) referenced from dev_determ.o(i.__sti___14_dev_determ_cpp_339485bd)
 <LI><a href="#[eb]">TModbusApp::s_boot_mode(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp11s_boot_modeEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e3]">TModbusApp::s_read_coils(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp12s_read_coilsEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e1]">TModbusApp::m_processing_reply(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp18m_processing_replyEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[da]">TModbusApp::s_checking_request()</a> from modbus_app.o(i._ZN10TModbusApp18s_checking_requestEv) referenced from modbus_app.o(.constdata)
 <LI><a href="#[ea]">TModbusApp::s_report_server_id(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp18s_report_server_idEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[df]">TModbusApp::m_write_single_coil(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp19m_write_single_coilEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e7]">TModbusApp::s_write_single_coil(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp19s_write_single_coilEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[dc]">TModbusApp::m_read_discrete_inputs(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp22m_read_discrete_inputsEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[de]">TModbusApp::m_read_input_registers(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp22m_read_input_registersEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e4]">TModbusApp::s_read_discrete_inputs(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp22s_read_discrete_inputsEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e6]">TModbusApp::s_read_input_registers(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp22s_read_input_registersEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e0]">TModbusApp::m_write_single_register(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp23m_write_single_registerEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e8]">TModbusApp::s_write_single_register(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp23s_write_single_registerEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[dd]">TModbusApp::m_read_holding_registers(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp24m_read_holding_registersEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e5]">TModbusApp::s_read_holding_registers(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp24s_read_holding_registersEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[db]">TModbusApp::s_formatting_normal_reply()</a> from modbus_app.o(i._ZN10TModbusApp25s_formatting_normal_replyEv) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e9]">TModbusApp::s_write_multiple_register(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp25s_write_multiple_registerEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[e2]">TModbusApp::s_processing_required_action(unsigned char*, unsigned short)</a> from modbus_app.o(i._ZN10TModbusApp28s_processing_required_actionEPht) referenced from modbus_app.o(.constdata)
 <LI><a href="#[d9]">TModbusApp::idle()</a> from modbus_app.o(i._ZN10TModbusApp4idleEv) referenced from modbus_app.o(.constdata)
 <LI><a href="#[ad]">TModbusApp::~TModbusApp()</a> from modbus_app.o(i._ZN10TModbusAppD1Ev) referenced from base_to_pc.o(i.__sti___14_base_to_pc_cpp_BaseToPc)
 <LI><a href="#[ad]">TModbusApp::~TModbusApp()</a> from modbus_app.o(i._ZN10TModbusAppD1Ev) referenced from base_to_sens.o(i.__sti___16_base_to_sens_cpp_e027ba68)
 <LI><a href="#[ad]">TModbusApp::~TModbusApp()</a> from modbus_app.o(i._ZN10TModbusAppD1Ev) referenced from sens_to_master.o(i.__sti___18_sens_to_master_cpp_20467949)
 <LI><a href="#[d8]">TDevHandlers::chk_access(void*)</a> from dev_handlers.o(i._ZN12TDevHandlers10chk_accessEPv) referenced from modbus_app.o(.constdata)
 <LI><a href="#[38]">TDevHandlers::read_calib(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers10read_calibEj) referenced 8 times from dev_handlers.o(.data)
 <LI><a href="#[b]">TDevHandlers::read_state(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers10read_stateEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[1c]">TDevHandlers::read_u_par(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers10read_u_parEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[15]">TDevHandlers::write_bias(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers10write_biasEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[13]">TDevHandlers::write_hyst(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers10write_hystEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[9]">TDevHandlers::rdi_placebo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers11rdi_placeboEj) referenced 20 times from dev_handlers.o(.data)
 <LI><a href="#[1d]">TDevHandlers::write_u_par(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers11write_u_parEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[31]">TDevHandlers::read_code_sw(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers12read_code_swEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[6]">TDevHandlers::read_connect(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers12read_connectEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[3b]">TDevHandlers::read_hc_mems(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers12read_hc_memsEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[1e]">TDevHandlers::read_mb_addr(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers12read_mb_addrEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[2f]">TDevHandlers::read_my_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers13read_my_angleEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[20]">TDevHandlers::read_prog_nbr(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers13read_prog_nbrEj) referenced 8 times from dev_handlers.o(.data)
 <LI><a href="#[1f]">TDevHandlers::write_mb_addr(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers13write_mb_addrEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[3a]">TDevHandlers::read_base_mems(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers14read_base_memsEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[4a]">TDevHandlers::read_interconn(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers14read_interconnEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[8]">TDevHandlers::read_hc_pos_err(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers15read_hc_pos_errEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[a]">TDevHandlers::read_open_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers15read_open_angleEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[30]">TDevHandlers::read_sens_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers15read_sens_angleEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[39]">TDevHandlers::read_sens_calib(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers15read_sens_calibEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[4b]">TDevHandlers::write_interconn(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers15write_interconnEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[22]">TDevHandlers::read_adm_pswd_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers16read_adm_pswd_hiEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[21]">TDevHandlers::read_adm_pswd_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers16read_adm_pswd_loEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[16]">TDevHandlers::read_axis_rotate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers16read_axis_rotateEj) referenced 8 times from dev_handlers.o(.data)
 <LI><a href="#[1a]">TDevHandlers::read_u_baud_rate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers16read_u_baud_rateEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[5]">TDevHandlers::read_base_pos_err(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17read_base_pos_errEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[2c]">TDevHandlers::read_parameter_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17read_parameter_hiEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[2b]">TDevHandlers::read_parameter_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17read_parameter_loEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[32]">TDevHandlers::read_sens_code_sw(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17read_sens_code_swEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[24]">TDevHandlers::write_adm_pswd_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17write_adm_pswd_hiEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[23]">TDevHandlers::write_adm_pswd_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17write_adm_pswd_loEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[17]">TDevHandlers::write_axis_rotate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17write_axis_rotateEj) referenced 8 times from dev_handlers.o(.data)
 <LI><a href="#[1b]">TDevHandlers::write_u_baud_rate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers17write_u_baud_rateEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[3e]">TDevHandlers::my_read_sens_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18my_read_sens_angleEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[42]">TDevHandlers::my_read_sens_calib(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18my_read_sens_calibEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[29]">TDevHandlers::read_calib_process(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18read_calib_processEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[33]">TDevHandlers::read_sens_prog_nbr(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18read_sens_prog_nbrEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[26]">TDevHandlers::read_super_pswd_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18read_super_pswd_hiEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[25]">TDevHandlers::read_super_pswd_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18read_super_pswd_loEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[2e]">TDevHandlers::write_parameter_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18write_parameter_hiEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[2d]">TDevHandlers::write_parameter_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers18write_parameter_loEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[3d]">TDevHandlers::read_pd_pressure_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers19read_pd_pressure_hiEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[3c]">TDevHandlers::read_pd_pressure_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers19read_pd_pressure_loEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[2a]">TDevHandlers::write_calib_process(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers19write_calib_processEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[28]">TDevHandlers::write_super_pswd_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers19write_super_pswd_hiEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[27]">TDevHandlers::write_super_pswd_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers19write_super_pswd_loEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[40]">TDevHandlers::my_read_sens_code_sw(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers20my_read_sens_code_swEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[d]">TDevHandlers::read_roll_bias_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers20read_roll_bias_angleEj) referenced 8 times from dev_handlers.o(.data)
 <LI><a href="#[49]">TDevHandlers::write_pd_pressure_hi(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers20write_pd_pressure_hiEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[48]">TDevHandlers::write_pd_pressure_lo(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers20write_pd_pressure_loEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[4c]">TDevHandlers::write_start_meas_cmd(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers20write_start_meas_cmdEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[41]">TDevHandlers::my_read_sens_prog_nbr(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers21my_read_sens_prog_nbrEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[c]">TDevHandlers::read_pitch_bias_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers21read_pitch_bias_angleEj) referenced 8 times from dev_handlers.o(.data)
 <LI><a href="#[18]">TDevHandlers::read_sens_axis_rotate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers21read_sens_axis_rotateEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[36]">TDevHandlers::read_sample_valid_sign(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers22read_sample_valid_signEj) referenced 8 times from dev_handlers.o(.data)
 <LI><a href="#[19]">TDevHandlers::write_sens_axis_rotate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers22write_sens_axis_rotateEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[46]">TDevHandlers::my_write_start_meas_cmd(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers23my_write_start_meas_cmdEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[46]">TDevHandlers::my_write_start_meas_cmd(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers23my_write_start_meas_cmdEj) referenced from base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba687acc_rdyEv)
 <LI><a href="#[43]">TDevHandlers::my_read_sens_axis_rotate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers24my_read_sens_axis_rotateEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[3f]">TDevHandlers::my_read_sample_valid_sign(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers25my_read_sample_valid_signEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[47]">TDevHandlers::my_write_sens_axis_rotate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers25my_write_sens_axis_rotateEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[47]">TDevHandlers::my_write_sens_axis_rotate(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers25my_write_sens_axis_rotateEj) referenced from base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba6814wr_axis_rotateEv)
 <LI><a href="#[35]">TDevHandlers::read_sens_roll_bias_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers25read_sens_roll_bias_angleEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[34]">TDevHandlers::read_sens_pitch_bias_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers26read_sens_pitch_bias_angleEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[37]">TDevHandlers::read_sens_sample_valid_sign(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers27read_sens_sample_valid_signEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[45]">TDevHandlers::my_read_sens_roll_bias_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers28my_read_sens_roll_bias_angleEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[44]">TDevHandlers::my_read_sens_pitch_bias_angle(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers29my_read_sens_pitch_bias_angleEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[e]">TDevHandlers::read_do(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers7read_doEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[7]">TDevHandlers::read_hc(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers7read_hcEj) referenced 6 times from dev_handlers.o(.data)
 <LI><a href="#[10]">TDevHandlers::read_thr(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers8read_thrEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[f]">TDevHandlers::write_do(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers8write_doEj) referenced 4 times from dev_handlers.o(.data)
 <LI><a href="#[14]">TDevHandlers::read_bias(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers9read_biasEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[12]">TDevHandlers::read_hyst(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers9read_hystEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[11]">TDevHandlers::write_thr(unsigned)</a> from dev_handlers.o(i._ZN12TDevHandlers9write_thrEj) referenced 2 times from dev_handlers.o(.data)
 <LI><a href="#[f8]">TDiscreteOut::open()</a> from discrete_out.o(i._ZN12TDiscreteOut4openEv) referenced 4 times from dev_ctrl.o(.constdata)
 <LI><a href="#[f9]">TDiscreteOut::closed()</a> from discrete_out.o(i._ZN12TDiscreteOut6closedEv) referenced 4 times from dev_ctrl.o(.constdata)
 <LI><a href="#[b0]">TDiscreteOut::~TDiscreteOut()</a> from discrete_out.o(i._ZN12TDiscreteOutD1Ev) referenced from discrete_out.o(i.__sti___16_discrete_out_cpp_Do)
 <LI><a href="#[f0]">TCodingSwitch::sample_ctrl(void*&)</a> from coding_switch.o(i._ZN13TCodingSwitch11sample_ctrlERPv) referenced from coding_switch.o(.constdata)
 <LI><a href="#[f1]">TCodingSwitch::dly_ctrl(void*&)</a> from coding_switch.o(i._ZN13TCodingSwitch8dly_ctrlERPv) referenced from coding_switch.o(.constdata)
 <LI><a href="#[b1]">TCodingSwitch::~TCodingSwitch()</a> from coding_switch.o(i._ZN13TCodingSwitchD1Ev) referenced from coding_switch.o(i.__sti___17_coding_switch_cpp_CodeSw)
 <LI><a href="#[ab]">TMedianFilter::~TMedianFilter()</a> from median_filter.o(i._ZN13TMedianFilterD1Ev) referenced from angles_cnt.o(i.__sti___14_angles_cnt_cpp_002624b5)
 <LI><a href="#[ef]">[local to modbus_link_cpp]::LL_DMA_ClearFlag_TC4(DMA_TypeDef*)</a> from modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC4EP11DMA_TypeDef) referenced from modbus_link.o(.constdata)
 <LI><a href="#[ee]">[local to modbus_link_cpp]::LL_DMA_ClearFlag_TC6(DMA_TypeDef*)</a> from modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC6EP11DMA_TypeDef) referenced from modbus_link.o(.constdata)
 <LI><a href="#[ed]">[local to modbus_link_cpp]::LL_DMA_ClearFlag_TC7(DMA_TypeDef*)</a> from modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC7EP11DMA_TypeDef) referenced from modbus_link.o(.constdata)
 <LI><a href="#[ec]">[local to modbus_link_cpp]::LL_AHB1_GRP1_EnableClock(unsigned)</a> from modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj) referenced 3 times from modbus_link.o(.constdata)
 <LI><a href="#[f7]">[local to dev_ctrl_cpp]::hc_ctrl()</a> from dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7hc_ctrlEv) referenced from dev_ctrl.o(.constdata)
 <LI><a href="#[f6]">[local to dev_ctrl_cpp]::base_ctrl()</a> from dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEv) referenced from dev_ctrl.o(.constdata)
 <LI><a href="#[3]">[local to hard_config_cpp]::LL_AHB2_GRP1_EnableClock(unsigned)</a> from hard_config.o(i._ZN37_INTERNAL_15_hard_config_cpp_1a7f66ee24LL_AHB2_GRP1_EnableClockEj) referenced 42 times from hard_config.o(.data)
 <LI><a href="#[4]">[local to hard_config_cpp]::LL_APB1_GRP1_EnableClock(unsigned)</a> from hard_config.o(i._ZN37_INTERNAL_15_hard_config_cpp_1a7f66ee24LL_APB1_GRP1_EnableClockEj) referenced 4 times from hard_config.o(.data)
 <LI><a href="#[2]">[local to hard_config_cpp]::LL_APB2_GRP1_EnableClock(unsigned)</a> from hard_config.o(i._ZN37_INTERNAL_15_hard_config_cpp_1a7f66ee24LL_APB2_GRP1_EnableClockEj) referenced 4 times from hard_config.o(.data)
 <LI><a href="#[f5]">[local to base_to_sens_cpp]::wr_axis_rotate()</a> from base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba6814wr_axis_rotateEv) referenced from base_to_sens.o(.constdata)
 <LI><a href="#[f2]">[local to base_to_sens_cpp]::acc_rdy()</a> from base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba687acc_rdyEv) referenced from base_to_sens.o(.constdata)
 <LI><a href="#[f4]">[local to base_to_sens_cpp]::pd_poll()</a> from base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba687pd_pollEv) referenced from base_to_sens.o(.constdata)
 <LI><a href="#[f3]">[local to base_to_sens_cpp]::read_meas()</a> from base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba689read_measEv) referenced from base_to_sens.o(.constdata)
 <LI><a href="#[101]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC1(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC1EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[103]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC2(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC2EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[105]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC3(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC3EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[fd]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC1(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC1EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[fe]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC2(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC2EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[ff]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC3(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC3EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[100]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC1(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC1EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[102]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC2(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC2EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[104]">[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC3(TIM_TypeDef*)</a> from line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC3EP11TIM_TypeDef) referenced from line_wrapper_spl_to_ll.o(.constdata)
 <LI><a href="#[fb]">TLed::on()</a> from led.o(i._ZN4TLed2onEv) referenced from led_ctrl.o(.constdata)
 <LI><a href="#[fa]">TLed::off()</a> from led.o(i._ZN4TLed3offEv) referenced from led_ctrl.o(.constdata)
 <LI><a href="#[fc]">TLed::toggle()</a> from led.o(i._ZN4TLed6toggleEv) referenced from led_ctrl.o(.constdata)
 <LI><a href="#[b3]">TLed::~TLed()</a> from led.o(i._ZN4TLedD1Ev) referenced from led.o(i.__sti___7_Led_cpp_Led)
 <LI><a href="#[b5]">TMems::~TMems()</a> from mems.o(i._ZN5TMemsD1Ev) referenced from mems.o(i.__sti___8_mems_cpp_Mems)
 <LI><a href="#[b4]">relay::TRelay::~TRelay()</a> from relay.o(i._ZN5relay6TRelayD1Ev) referenced from main.o(i.__sti___8_main_cpp_63965102)
 <LI><a href="#[af]">TFlash::~TFlash()</a> from flash_driver.o(i._ZN6TFlashD1Ev) referenced from flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4)
 <LI><a href="#[c6]">TModel::get_raw_roll()</a> from model.o(i._ZN6TModel12get_raw_rollEv) referenced 2 times from angles_cnt.o(.constdata)
 <LI><a href="#[d2]">TModel::get_psw_admin()</a> from model.o(i._ZN6TModel13get_psw_adminEv) referenced from model.o(.constdata)
 <LI><a href="#[d3]">TModel::get_psw_super()</a> from model.o(i._ZN6TModel13get_psw_superEv) referenced from model.o(.constdata)
 <LI><a href="#[c8]">TModel::get_raw_pitch()</a> from model.o(i._ZN6TModel13get_raw_pitchEv) referenced 2 times from angles_cnt.o(.constdata)
 <LI><a href="#[d5]">TModel::handler_calib(short, bool*)</a> from model.o(i._ZN6TModel13handler_calibEsPb) referenced from model.o(.constdata)
 <LI><a href="#[d7]">TModel::handler_access(short, bool*)</a> from model.o(i._ZN6TModel14handler_accessEsPb) referenced from model.o(.constdata)
 <LI><a href="#[c7]">TModel::get_roll_bias_angle()</a> from model.o(i._ZN6TModel19get_roll_bias_angleEv) referenced 2 times from angles_cnt.o(.constdata)
 <LI><a href="#[c9]">TModel::get_pitch_bias_angle()</a> from model.o(i._ZN6TModel20get_pitch_bias_angleEv) referenced 2 times from angles_cnt.o(.constdata)
 <LI><a href="#[b6]">TModel::~TModel()</a> from model.o(i._ZN6TModelD1Ev) referenced from model.o(i.__sti___9_model_cpp_Model)
 <LI><a href="#[c5]">TAngles::place_down(short, short)</a> from angles_cnt.o(i._ZN7TAngles10place_downEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[be]">TAngles::q1_neg_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q1_neg_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[ce]">TAngles::q1_neg_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q1_neg_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[ba]">TAngles::q1_pos_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q1_pos_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[ca]">TAngles::q1_pos_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q1_pos_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[bf]">TAngles::q2_neg_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q2_neg_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[cf]">TAngles::q2_neg_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q2_neg_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[bb]">TAngles::q2_pos_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q2_pos_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[cb]">TAngles::q2_pos_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q2_pos_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[c0]">TAngles::q3_neg_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q3_neg_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[d0]">TAngles::q3_neg_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q3_neg_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[bc]">TAngles::q3_pos_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q3_pos_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[cc]">TAngles::q3_pos_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q3_pos_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[c1]">TAngles::q4_neg_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q4_neg_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[d1]">TAngles::q4_neg_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q4_neg_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[bd]">TAngles::q4_pos_cnt(signed char)</a> from angles_cnt.o(i._ZN7TAngles10q4_pos_cntEa) referenced 4 times from angles_cnt.o(.constdata)
 <LI><a href="#[cd]">TAngles::q4_pos_cnt(short, short)</a> from angles_cnt.o(i._ZN7TAngles10q4_pos_cntEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[c2]">TAngles::base(TSettings::TAxisRotate, bool)</a> from angles_cnt.o(i._ZN7TAngles4baseEN9TSettings11TAxisRotateEb) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[c3]">TAngles::sens(TSettings::TAxisRotate, bool)</a> from angles_cnt.o(i._ZN7TAngles4sensEN9TSettings11TAxisRotateEb) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[c4]">TAngles::place_up(short, short)</a> from angles_cnt.o(i._ZN7TAngles8place_upEss) referenced from angles_cnt.o(.constdata)
 <LI><a href="#[ac]">TAngles::~TAngles()</a> from angles_cnt.o(i._ZN7TAnglesD1Ev) referenced from angles_cnt.o(i.__sti___14_angles_cnt_cpp_002624b5)
 <LI><a href="#[a8]">TButton::~TButton()</a> from button.o(i._ZN7TButtonD1Ev) referenced from button.o(i.__sti___10_Button_cpp_Btn)
 <LI><a href="#[b2]">MPU_9250::TAccGyroMagDriver_HL::~TAccGyroMagDriver_HL()</a> from mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HLD1Ev) referenced from mpu-9250_acc_gyro_mag_driver_hl.o(i.__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c)
 <LI><a href="#[a9]">TDevCtrl::~TDevCtrl()</a> from dev_ctrl.o(i._ZN8TDevCtrlD1Ev) referenced from dev_ctrl.o(i.__sti___12_dev_ctrl_cpp_DevCtrl)
 <LI><a href="#[aa]">TSettings::~TSettings()</a> from settings.o(i._ZN9TSettingsD1Ev) referenced from settings.o(i.__sti___12_settings_cpp_Settings)
 <LI><a href="#[d6]">TSettings::chk_access(short) const</a> from settings.o(i._ZNK9TSettings10chk_accessEs) referenced from model.o(.constdata)
 <LI><a href="#[d4]">TSettings::chk_calib(short) const</a> from settings.o(i._ZNK9TSettings9chk_calibEs) referenced from model.o(.constdata)
 <LI><a href="#[99]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[107]">__sti___10_Button_cpp_Btn</a> from button.o(i.__sti___10_Button_cpp_Btn) referenced from button.o(.init_array)
 <LI><a href="#[114]">__sti___12_dev_ctrl_cpp_DevCtrl</a> from dev_ctrl.o(i.__sti___12_dev_ctrl_cpp_DevCtrl) referenced from dev_ctrl.o(.init_array)
 <LI><a href="#[111]">__sti___12_settings_cpp_Settings</a> from settings.o(i.__sti___12_settings_cpp_Settings) referenced from settings.o(.init_array)
 <LI><a href="#[109]">__sti___14_angles_cnt_cpp_002624b5</a> from angles_cnt.o(i.__sti___14_angles_cnt_cpp_002624b5) referenced from angles_cnt.o(.init_array)
 <LI><a href="#[112]">__sti___14_base_to_pc_cpp_BaseToPc</a> from base_to_pc.o(i.__sti___14_base_to_pc_cpp_BaseToPc) referenced from base_to_pc.o(.init_array)
 <LI><a href="#[10b]">__sti___14_dev_determ_cpp_339485bd</a> from dev_determ.o(i.__sti___14_dev_determ_cpp_339485bd) referenced from dev_determ.o(.init_array)
 <LI><a href="#[10d]">__sti___16_Flash_driver_cpp_d50a58b4</a> from flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4) referenced from flash_driver.o(.init_array)
 <LI><a href="#[113]">__sti___16_base_to_sens_cpp_e027ba68</a> from base_to_sens.o(i.__sti___16_base_to_sens_cpp_e027ba68) referenced from base_to_sens.o(.init_array)
 <LI><a href="#[10f]">__sti___16_discrete_out_cpp_Do</a> from discrete_out.o(i.__sti___16_discrete_out_cpp_Do) referenced from discrete_out.o(.init_array)
 <LI><a href="#[10e]">__sti___17_coding_switch_cpp_CodeSw</a> from coding_switch.o(i.__sti___17_coding_switch_cpp_CodeSw) referenced from coding_switch.o(.init_array)
 <LI><a href="#[115]">__sti___18_sens_to_master_cpp_20467949</a> from sens_to_master.o(i.__sti___18_sens_to_master_cpp_20467949) referenced from sens_to_master.o(.init_array)
 <LI><a href="#[106]">__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c</a> from mpu-9250_acc_gyro_mag_driver_hl.o(i.__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c) referenced from mpu-9250_acc_gyro_mag_driver_hl.o(.init_array)
 <LI><a href="#[108]">__sti___7_Led_cpp_Led</a> from led.o(i.__sti___7_Led_cpp_Led) referenced from led.o(.init_array)
 <LI><a href="#[10a]">__sti___8_main_cpp_63965102</a> from main.o(i.__sti___8_main_cpp_63965102) referenced from main.o(.init_array)
 <LI><a href="#[110]">__sti___8_mems_cpp_Mems</a> from mems.o(i.__sti___8_mems_cpp_Mems) referenced from mems.o(.init_array)
 <LI><a href="#[10c]">__sti___9_model_cpp_Model</a> from model.o(i.__sti___9_model_cpp_Model) referenced from model.o(.init_array)
 <LI><a href="#[97]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b8]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[b7]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[b9]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[99]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[2e7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[117]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[119]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2e9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ea]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2eb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11a]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2ec]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[53]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2e0]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2df]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[55]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d7]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[4d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[269]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::TI2C(const TI2C_HW&, I2C::TMode, I2C::TRate, I2C::TAddressing)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedCtrl(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_baud_rate_bit_to_sec()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_cmd(unsigned short)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::init_dma()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::TDevHandlers(TDevHandlers::TPduHandler*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::fsm()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_processing_required_action(unsigned char*, unsigned short)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::m_processing_reply(unsigned char*, unsigned short)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::rd_addr()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::init()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[2ed]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ee]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[2f0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a1]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_report_server_id(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[116]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_63965102
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_angles_cnt_cpp_002624b5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Led_cpp_Led
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Button_cpp_Btn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_model_cpp_Model
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_dev_determ_cpp_339485bd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_Flash_driver_cpp_d50a58b4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_base_to_sens_cpp_e027ba68
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_base_to_pc_cpp_BaseToPc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_settings_cpp_Settings
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_mems_cpp_Mems
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_discrete_out_cpp_Do
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_coding_switch_cpp_CodeSw
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_sens_to_master_cpp_20467949
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_dev_ctrl_cpp_DevCtrl
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2f1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[11b]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[126]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[2f3]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[124]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[129]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>

<P><STRONG><a name="[2f4]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[118]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2f5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>MotionTL_GetLibVersion</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, motion_tl.o(.text.MotionTL_GetLibVersion))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[185]"></a>MotionTL_Initialize</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, motion_tl.o(.text.MotionTL_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[186]"></a>MotionTL_SetOrientation_Acc</STRONG> (Thumb, 280 bytes, Stack size unknown bytes, motion_tl.o(.text.MotionTL_SetOrientation_Acc))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[12d]"></a>AddTime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sensline.o(i.AddTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AddTime &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWritePkg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectND
</UL>

<P><STRONG><a name="[19a]"></a>CRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc16.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::chk_frame(const unsigned char*, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_formatting_error_reply(unsigned char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_report_server_id(unsigned char*, unsigned short)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::read_meas()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::pd_poll()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::acc_rdy()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::wr_axis_rotate()
</UL>

<P><STRONG><a name="[65]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, modbus_link.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, modbus_link.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, modbus_link.o(i.DMA2_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Channel6_IRQHandler &rArr; [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>DisableINT</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sensline.o(i.DisableINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableINT
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI15_10_IRQHandler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, sensline.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXTI9_5_IRQHandler &rArr; SelectND &rArr; SetWritePkg &rArr; AddTime &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectND
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTime
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>EXTI_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i.EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableINT
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i.EXTI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>EnableINT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensline.o(i.EnableINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableINT
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectND
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_driver.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_driver.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, i2c_driver.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C1_EV_IRQHandler &rArr; [local to I2C_driver_cpp]::dks_stop_active() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_stop_active()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_rxne_active()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_driver.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_driver.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13f]"></a>LL_DMA_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32l4xx_ll_dma.o(i.LL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::init_dma()
</UL>

<P><STRONG><a name="[141]"></a>LL_EXTI_Init</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_32_63
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_32_63
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_32_63
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_32_63
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_0_31
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_32_63
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_32_63
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_aux()
</UL>

<P><STRONG><a name="[191]"></a>LL_GPIO_Init</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, stm32l4xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::pin_clk_config()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_aux()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDiscreteOut::init()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_mx_gpio()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::init()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TButton::init()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay::TRelay::TRelay(GPIO_TypeDef*, unsigned, unsigned, char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevDeterm::TDevDeterm(const TPin&, TIM_TypeDef*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::pin_clk_config()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::init()
</UL>

<P><STRONG><a name="[234]"></a>LL_I2C_Init</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, stm32l4xx_ll_i2c.o(i.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::i2c_hw_init()
</UL>

<P><STRONG><a name="[16e]"></a>LL_Init1msTick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[14e]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevDeterm::init_tmr()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
</UL>

<P><STRONG><a name="[153]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[16f]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[18e]"></a>LL_TIM_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, stm32l4xx_ll_tim.o(i.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevDeterm::init_tmr()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
</UL>

<P><STRONG><a name="[157]"></a>LL_USART_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32l4xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[138]"></a>NewTime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sensline.o(i.NewTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NewTime &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[151]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[152]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetPCLK2ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[14f]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32l4xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsEnabledRangeSelect
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRangeAfterStandby
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[15c]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32l4xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetN
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_IsEnabledRangeSelect
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRangeAfterStandby
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[137]"></a>SelectND</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, sensline.o(i.SelectND))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SelectND &rArr; SetWritePkg &rArr; AddTime &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWritePkg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableINT
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[2a9]"></a>SetProgNum</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sensdev.o(i.SetProgNum))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>SetWritePkg</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sensline.o(i.SetWritePkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetWritePkg &rArr; AddTime &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTime
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectND
</UL>

<P><STRONG><a name="[56]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, flash_driver.o(i.TIM6_DAC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM7_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dev_determ.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>TIM_ClearFlag</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, line_wrapper_spl_to_ll.o(i.TIM_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTime
</UL>

<P><STRONG><a name="[12f]"></a>TIM_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 88 bytes, line_wrapper_spl_to_ll.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewTime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTime
</UL>

<P><STRONG><a name="[7a]"></a>USART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, modbus_link.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_IRQHandler &rArr; [local to modbus_link_cpp]::usart_int_handler(TUsartInt*) &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::usart_int_handler(TUsartInt*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USART2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, modbus_link.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART2_IRQHandler &rArr; [local to modbus_link_cpp]::usart_int_handler(TUsartInt*) &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::usart_int_handler(TUsartInt*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[292]"></a>FLASH_Lock()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, old_flash_lib.o(i._Z10FLASH_Lockv))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>

<P><STRONG><a name="[9d]"></a>base_to_pc(void*)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, base_to_pc.o(i._Z10base_to_pcPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = base_to_pc(void*) &rArr; TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_mb_addr()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::pin_clk_config()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::set_addr(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::init_dma()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::fsm()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[16c]"></a>cfg_sys_clk()</STRONG> (Thumb, 570 bytes, Stack size 128 bytes, main.o(i._Z11cfg_sys_clkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cfg_sys_clk() &rArr; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_GetPriorityGrouping()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::LL_RCC_MSI_IsReady()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>code_sw_tmr(void*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, coding_switch.o(i._Z11code_sw_tmrPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = code_sw_tmr(void*) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
</UL>
<P><STRONG><a name="[a1]"></a>logger_ctrl(void*)</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, logger_ctrl.o(i._Z11logger_ctrlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = logger_ctrl(void*) &rArr; [local to logger_ctrl_cpp]::get_data(TRec&, TModel&) &rArr; TModel::get_sample_valid_sign() &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_led_mode(TSettings::TLedMode)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_btn_mode(TSettings::TPress)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_btn_mode()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::buf_process(const TRec*, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[a3]"></a>vPushButton(void*)</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, button_poll.o(i._Z11vPushButtonPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vPushButton(void*) &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TButton::read() const
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TButton::init()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_btn_mode(TSettings::TPress)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_btn_mode()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[290]"></a>FLASH_Unlock()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, old_flash_lib.o(i._Z12FLASH_Unlockv))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>

<P><STRONG><a name="[9e]"></a>base_to_sens(void*)</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, base_to_sens.o(i._Z12base_to_sensPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = base_to_sens(void*) &rArr; TUsart::set_sets(const TUsart::TSets&) &rArr; TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_sets(const TUsart::TSets&)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::pin_clk_config()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::set_addr(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::init_dma()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::fsm()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[9b]"></a>discrete_out(void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, discrete_out.o(i._Z12discrete_outPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = discrete_out(void*) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[9a]"></a>coding_switch(void*)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, coding_switch.o(i._Z13coding_switchPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = coding_switch(void*) &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[a5]"></a>do_uncalib_tmr(void*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, discrete_out.o(i._Z14do_uncalib_tmrPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = do_uncalib_tmr(void*) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
</UL>
<P><STRONG><a name="[9f]"></a>sens_to_master(void*)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sens_to_master.o(i._Z14sens_to_masterPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sens_to_master(void*) &rArr; [local to sens_to_master_cpp]::addr_determ() &rArr; TUsart::set_sets(const TUsart::TSets&) &rArr; TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::pin_clk_config()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::init_dma()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::fsm()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sens_to_master_cpp]::addr_determ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[a7]"></a>vTimerCallback(void*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, button_poll.o(i._Z14vTimerCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTimerCallback(void*) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
</UL>
<P><STRONG><a name="[243]"></a>FLASH_GetStatus()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, old_flash_lib.o(i._Z15FLASH_GetStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_data(const unsigned char*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[9c]"></a>mems(void*)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, mems.o(i._Z4memsPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mems(void*) &rArr; [local to mems_cpp]::mems_process() &rArr; TMems::acquire_data(TSettings::TAccelData(&)[300]) &rArr; MPU_9250::TAccGyroMagDriver_HL::collect_acc_data() &rArr; I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_aux()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::check_id_acc_gyro()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_driver()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionTL_SetOrientation_Acc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionTL_Initialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionTL_GetLibVersion
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[a6]"></a>pd_tmr(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, base_to_sens.o(i._Z6pd_tmrPv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv)
</UL>
<P><STRONG><a name="[1a5]"></a>get_eof(unsigned char, TModbusLink::TProcType)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modbus_link.o(i._Z7get_eofhN11TModbusLink9TProcTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_eof(unsigned char, TModbusLink::TProcType)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::idle()
</UL>

<P><STRONG><a name="[194]"></a>set_eof(unsigned char, TModbusLink::TProcType, bool)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbus_link.o(i._Z7set_eofhN11TModbusLink9TProcTypeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_eof(unsigned char, TModbusLink::TProcType, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_boot_mode(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[a0]"></a>dev_ctrl(void*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dev_ctrl.o(i._Z8dev_ctrlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dev_ctrl(void*) &rArr; [local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType) &rArr; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType) &rArr; TModel::set_pitch_bias_angle(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[a2]"></a>vLedCtrl(void*)</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, led_ctrl.o(i._Z8vLedCtrlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vLedCtrl(void*) &rArr; TModel::get_led_mode() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::init()
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_led_mode()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv)
</UL>
<P><STRONG><a name="[2aa]"></a>TDevDeterm::is_dev()</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, dev_determ.o(i._ZN10TDevDeterm6is_devEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TDevDeterm::is_dev()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>TDevDeterm::init_tmr()</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, dev_determ.o(i._ZN10TDevDeterm8init_tmrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TDevDeterm::init_tmr() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_determ_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>TDevDeterm::TDevDeterm(const TPin&, TIM_TypeDef*)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, dev_determ.o(i._ZN10TDevDetermC1ERK4TPinP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TDevDeterm::TDevDeterm(const TPin&, TIM_TypeDef*) &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_dev_determ_cpp_339485bd
</UL>

<P><STRONG><a name="[2fa]"></a>TDevDeterm::TDevDeterm__sub_object(const TPin&, TIM_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, dev_determ.o(i._ZN10TDevDetermC1ERK4TPinP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[ae]"></a>TDevDeterm::~TDevDeterm()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_determ.o(i._ZN10TDevDetermD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> dev_determ.o(i.__sti___14_dev_determ_cpp_339485bd)
</UL>
<P><STRONG><a name="[2fb]"></a>TDevDeterm::~TDevDeterm__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dev_determ.o(i._ZN10TDevDetermD1Ev), UNUSED)

<P><STRONG><a name="[197]"></a>TModbusApp::chk_new_val(unsigned short, TModbusApp::TMbFnct)</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, modbus_app.o(i._ZN10TModbusApp11chk_new_valEtNS_7TMbFnctE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TModbusApp::chk_new_val(unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>

<P><STRONG><a name="[eb]"></a>TModbusApp::s_boot_mode(unsigned char*, unsigned short)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, modbus_app.o(i._ZN10TModbusApp11s_boot_modeEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TModbusApp::s_boot_mode(unsigned char*, unsigned short) &rArr; TModel::set_boot_mode_flag(TSettings::TBootModeFlag) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_boot_mode_flag(TSettings::TBootModeFlag)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_eof(unsigned char, TModbusLink::TProcType, bool)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool std::equal&lang;unsigned char*, const char*&rang;(T1, T1, T2)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>TModbusApp::s_read_coils(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp12s_read_coilsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModbusApp::s_read_coils(unsigned char*, unsigned short) &rArr; TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, modbus_app.o(i._ZN10TModbusApp12write_singleEPhtNS_7TMbFnctE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_formatting_error_reply(unsigned char*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::chk_new_val(unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_write_single_register(unsigned char*, unsigned short)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_write_single_coil(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[199]"></a>TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, modbus_app.o(i._ZN10TModbusApp14chk_legal_itemEPKN12TDevHandlers4TPDUES3_tNS_7TMbFnctEMS0_FbPvEPS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>

<P><STRONG><a name="[e1]"></a>TModbusApp::m_processing_reply(unsigned char*, unsigned short)</STRONG> (Thumb, 144 bytes, Stack size 120 bytes, modbus_app.o(i._ZN10TModbusApp18m_processing_replyEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModbusApp::m_processing_reply(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>TModbusApp::s_checking_request()</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, modbus_app.o(i._ZN10TModbusApp18s_checking_requestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModbusApp::s_checking_request() &rArr; TModbusLink::handle_frame(const unsigned char*, unsigned short) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::get_rx_dma_data_qty()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::stop_receive()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;unsigned char*, unsigned char*&rang;(T1, T1, T2)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>TModbusApp::s_report_server_id(unsigned char*, unsigned short)</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, modbus_app.o(i._ZN10TModbusApp18s_report_server_idEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TModbusApp::s_report_server_id(unsigned char*, unsigned short) &rArr; TDevHandlers::get_id_17() &rArr; TModel::get_dev_type() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::get_id_17()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>TModbusApp::m_write_single_coil(unsigned char*, unsigned short)</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, modbus_app.o(i._ZN10TModbusApp19m_write_single_coilEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TModbusApp::m_write_single_coil(unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>TModbusApp::s_write_single_coil(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp19s_write_single_coilEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TModbusApp::s_write_single_coil(unsigned char*, unsigned short) &rArr; TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>TModbusApp::m_read_discrete_inputs(unsigned char*, unsigned short)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus_app.o(i._ZN10TModbusApp22m_read_discrete_inputsEPht))
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>TModbusApp::m_read_input_registers(unsigned char*, unsigned short)</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, modbus_app.o(i._ZN10TModbusApp22m_read_input_registersEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TModbusApp::m_read_input_registers(unsigned char*, unsigned short) &rArr; TDevHandlers::m_read_input_registers_complete() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::m_read_input_registers_complete()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>TModbusApp::s_read_discrete_inputs(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp22s_read_discrete_inputsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModbusApp::s_read_discrete_inputs(unsigned char*, unsigned short) &rArr; TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>TModbusApp::s_read_input_registers(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp22s_read_input_registersEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModbusApp::s_read_input_registers(unsigned char*, unsigned short) &rArr; TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>TModbusApp::m_write_single_register(unsigned char*, unsigned short)</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, modbus_app.o(i._ZN10TModbusApp23m_write_single_registerEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TModbusApp::m_write_single_register(unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>TModbusApp::s_write_single_register(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp23s_write_single_registerEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TModbusApp::s_write_single_register(unsigned char*, unsigned short) &rArr; TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>TModbusApp::m_read_holding_registers(unsigned char*, unsigned short)</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, modbus_app.o(i._ZN10TModbusApp24m_read_holding_registersEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TModbusApp::m_read_holding_registers(unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>TModbusApp::s_formatting_error_reply(unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp24s_formatting_error_replyEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TModbusApp::s_formatting_error_reply(unsigned char*) &rArr; TModbusLink::start_transmit(unsigned char) &rArr; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_processing_required_action(unsigned char*, unsigned short)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>

<P><STRONG><a name="[e5]"></a>TModbusApp::s_read_holding_registers(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp24s_read_holding_registersEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModbusApp::s_read_holding_registers(unsigned char*, unsigned short) &rArr; TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>TModbusApp::s_formatting_normal_reply()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus_app.o(i._ZN10TModbusApp25s_formatting_normal_replyEv))
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>TModbusApp::s_write_multiple_register(unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp25s_write_multiple_registerEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TModbusApp::s_write_multiple_register(unsigned char*, unsigned short) &rArr; TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>TModbusApp::s_processing_required_action(unsigned char*, unsigned short)</STRONG> (Thumb, 160 bytes, Stack size 168 bytes, modbus_app.o(i._ZN10TModbusApp28s_processing_required_actionEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModbusApp::s_processing_required_action(unsigned char*, unsigned short) &rArr; TModbusApp::s_formatting_error_reply(unsigned char*) &rArr; TModbusLink::start_transmit(unsigned char) &rArr; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_formatting_error_reply(unsigned char*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>TModbusApp::fsm()</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, modbus_app.o(i._ZN10TModbusApp3fsmEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TModbusApp::fsm()
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_to_master(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
</UL>

<P><STRONG><a name="[d9]"></a>TModbusApp::idle()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, modbus_app.o(i._ZN10TModbusApp4idleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModbusApp::idle() &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::stop_receive()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_handle()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_eof(unsigned char, TModbusLink::TProcType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct)</STRONG> (Thumb, 504 bytes, Stack size 120 bytes, modbus_app.o(i._ZN10TModbusApp9read_bitsEPhtNS_7TMbFnctE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_formatting_error_reply(unsigned char*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_read_discrete_inputs(unsigned char*, unsigned short)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_read_coils(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1a3]"></a>TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct)</STRONG> (Thumb, 446 bytes, Stack size 112 bytes, modbus_app.o(i._ZN10TModbusApp9read_regsEPhtNS_7TMbFnctE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_formatting_error_reply(unsigned char*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_read_holding_registers(unsigned char*, unsigned short)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_read_input_registers(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1a4]"></a>TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct)</STRONG> (Thumb, 448 bytes, Stack size 96 bytes, modbus_app.o(i._ZN10TModbusApp9write_mulEPhtNS_7TMbFnctE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct) &rArr; TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_formatting_error_reply(unsigned char*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::chk_legal_item(const TDevHandlers::TPDU*, const TDevHandlers::TPDU*, unsigned short, TModbusApp::TMbFnct, bool(TDevHandlers::*)(void*), const TDevHandlers::TPDU**)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::chk_new_val(unsigned short, TModbusApp::TMbFnct)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_write_multiple_register(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1a7]"></a>TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, modbus_app.o(i._ZN10TModbusAppC1ERK9TUsart_HWN11TModbusLink9TProcTypeEPN12TDevHandlers11TPduHandlerEPPvS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**) &rArr; TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::TDevHandlers(TDevHandlers::TPduHandler*)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_base_to_sens_cpp_e027ba68
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_base_to_pc_cpp_BaseToPc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_sens_to_master_cpp_20467949
</UL>

<P><STRONG><a name="[2fc]"></a>TModbusApp::TModbusApp__sub_object(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, modbus_app.o(i._ZN10TModbusAppC1ERK9TUsart_HWN11TModbusLink9TProcTypeEPN12TDevHandlers11TPduHandlerEPPvS9_), UNUSED)

<P><STRONG><a name="[ad]"></a>TModbusApp::~TModbusApp()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbus_app.o(i._ZN10TModbusAppD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TModbusApp::~TModbusApp() &rArr; TModbusLink::~TModbusLink() &rArr; TUsart::~TUsart()
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::~TDevHandlers()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::~TModbusLink()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> base_to_sens.o(i.__sti___16_base_to_sens_cpp_e027ba68)
<LI> base_to_pc.o(i.__sti___14_base_to_pc_cpp_BaseToPc)
<LI> sens_to_master.o(i.__sti___18_sens_to_master_cpp_20467949)
</UL>
<P><STRONG><a name="[2fd]"></a>TModbusApp::~TModbusApp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, modbus_app.o(i._ZN10TModbusAppD1Ev), UNUSED)

<P><STRONG><a name="[19e]"></a>TModbusLink::handle_frame(const unsigned char*, unsigned short)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, modbus_link.o(i._ZN11TModbusLink12handle_frameEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TModbusLink::handle_frame(const unsigned char*, unsigned short) &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::dis_eob_detect()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::chk_frame(const unsigned char*, unsigned short)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::_2_ch_cnt()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::get_rx_dma_data_qty()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::stop_receive()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_eof(unsigned char, TModbusLink::TProcType, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_checking_request()
</UL>

<P><STRONG><a name="[1a6]"></a>TModbusLink::start_handle()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, modbus_link.o(i._ZN11TModbusLink12start_handleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TModbusLink::start_handle() &rArr; TUsart::en_eob_detect(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::en_eob_detect(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::idle()
</UL>

<P><STRONG><a name="[19f]"></a>TModbusLink::stop_receive()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, modbus_link.o(i._ZN11TModbusLink12stop_receiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TModbusLink::stop_receive() &rArr; TUsart::dis_eob_detect()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::dis_eob_detect()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::get_rx_dma_data_qty()
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::idle()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_checking_request()
</UL>

<P><STRONG><a name="[19b]"></a>TModbusLink::start_transmit(unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, modbus_link.o(i._ZN11TModbusLink14start_transmitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TModbusLink::start_transmit(unsigned char) &rArr; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_mul(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_regs(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::read_bits(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_formatting_error_reply(unsigned char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_report_server_id(unsigned char*, unsigned short)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::write_single(unsigned char*, unsigned short, TModbusApp::TMbFnct)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::read_meas()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::pd_poll()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::acc_rdy()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::wr_axis_rotate()
</UL>

<P><STRONG><a name="[19c]"></a>TModbusLink::get_rx_dma_data_qty()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, modbus_link.o(i._ZN11TModbusLink19get_rx_dma_data_qtyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TModbusLink::get_rx_dma_data_qty()
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::stop_receive()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_checking_request()
</UL>

<P><STRONG><a name="[22d]"></a>TModbusLink::get_addr()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus_link.o(i._ZN11TModbusLink8get_addrEv))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::read_meas()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::acc_rdy()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to base_to_sens_cpp]::wr_axis_rotate()
</UL>

<P><STRONG><a name="[168]"></a>TModbusLink::init_dma()</STRONG> (Thumb, 652 bytes, Stack size 112 bytes, modbus_link.o(i._ZN11TModbusLink8init_dmaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TModbusLink::init_dma() &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_to_master(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
</UL>

<P><STRONG><a name="[16a]"></a>TModbusLink::set_addr(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus_link.o(i._ZN11TModbusLink8set_addrEh))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sens_to_master_cpp]::addr_determ()
</UL>

<P><STRONG><a name="[1ae]"></a>TModbusLink::_2_ch_cnt()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, modbus_link.o(i._ZN11TModbusLink9_2_ch_cntEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TModbusLink::_2_ch_cnt()
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1ac]"></a>TModbusLink::chk_frame(const unsigned char*, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, modbus_link.o(i._ZN11TModbusLink9chk_frameEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TModbusLink::chk_frame(const unsigned char*, unsigned short) &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1a8]"></a>TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, modbus_link.o(i._ZN11TModbusLinkC1ERK9TUsart_HWNS_9TProcTypeEPPvS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**)
</UL>

<P><STRONG><a name="[2fe]"></a>TModbusLink::TModbusLink__sub_object(const TUsart_HW&, TModbusLink::TProcType, void**, void**)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, modbus_link.o(i._ZN11TModbusLinkC1ERK9TUsart_HWNS_9TProcTypeEPPvS5_), UNUSED)

<P><STRONG><a name="[1ab]"></a>TModbusLink::~TModbusLink()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, modbus_link.o(i._ZN11TModbusLinkD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TModbusLink::~TModbusLink() &rArr; TUsart::~TUsart()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::~TUsart()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::~TModbusApp()
</UL>

<P><STRONG><a name="[2ff]"></a>TModbusLink::~TModbusLink__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, modbus_link.o(i._ZN11TModbusLinkD1Ev), UNUSED)

<P><STRONG><a name="[d8]"></a>TDevHandlers::chk_access(void*)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers10chk_accessEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TDevHandlers::chk_access(void*) &rArr; TModel::get_access() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_access()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_app.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>TDevHandlers::read_calib(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers10read_calibEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TDevHandlers::read_calib(unsigned) &rArr; TModel::get_acc_calib() &rArr; TModel::set_acc_calib(TSettings::TCalib) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_acc_calib()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>TDevHandlers::read_state(unsigned)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers10read_stateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_state(unsigned) &rArr; TModel::get_dev_state() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_state()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>TDevHandlers::read_u_par(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers10read_u_parEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_u_par(unsigned) &rArr; TModel::get_u_par() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_par()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>TDevHandlers::write_bias(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers10write_biasEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_bias(unsigned) &rArr; TModel::set_bias(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_bias(signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>TDevHandlers::write_hyst(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers10write_hystEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_hyst(unsigned) &rArr; TModel::set_hyst(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hyst(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>TDevHandlers::rdi_placebo(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlers11rdi_placeboEj))
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>TDevHandlers::write_u_par(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers11write_u_parEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_u_par(unsigned) &rArr; TModel::set_u_par(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_par(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>TDevHandlers::read_code_sw(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers12read_code_swEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_code_sw(unsigned) &rArr; TModel::get_code_sw() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_code_sw()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>TDevHandlers::read_connect(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers12read_connectEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_connect(unsigned) &rArr; TModel::get_connect() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_connect()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>TDevHandlers::read_hc_mems(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers12read_hc_memsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_hc_mems(unsigned) &rArr; TModel::get_hc_mems() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_mems()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>TDevHandlers::read_mb_addr(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers12read_mb_addrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_mb_addr(unsigned) &rArr; TModel::get_mb_addr() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_mb_addr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>TDevHandlers::read_my_angle(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers13read_my_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_my_angle(unsigned) &rArr; TModel::get_my_angle() &rArr; _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_my_angle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>TDevHandlers::read_prog_nbr(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlers13read_prog_nbrEj))
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>TDevHandlers::write_mb_addr(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers13write_mb_addrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TDevHandlers::write_mb_addr(unsigned) &rArr; TModel::set_mb_addr(short) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_mb_addr(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>TDevHandlers::read_base_mems(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers14read_base_memsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_base_mems(unsigned) &rArr; TModel::get_base_mems() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_base_mems()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>TDevHandlers::read_interconn(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers14read_interconnEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_interconn(unsigned) &rArr; TModel::get_interconn() &rArr; void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_interconn()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>TDevHandlers::read_hc_pos_err(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers15read_hc_pos_errEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_hc_pos_err(unsigned) &rArr; TModel::get_hc_pos_err() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_pos_err()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>TDevHandlers::read_open_angle(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers15read_open_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_open_angle(unsigned) &rArr; TModel::get_open_angle() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_open_angle()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>TDevHandlers::read_sens_angle(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers15read_sens_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_sens_angle(unsigned) &rArr; TModel::get_sens_angle() &rArr; _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_angle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>TDevHandlers::read_sens_calib(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers15read_sens_calibEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_sens_calib(unsigned) &rArr; TModel::get_hc_acc_calib() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_acc_calib()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>TDevHandlers::write_interconn(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers15write_interconnEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_interconn(unsigned) &rArr; TModel::set_interconn(TInterconn) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_interconn(TInterconn)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>TDevHandlers::read_adm_pswd_hi(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers16read_adm_pswd_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_adm_pswd_hi(unsigned) &rArr; TModel::get_psw_admin() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_admin()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>TDevHandlers::read_adm_pswd_lo(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers16read_adm_pswd_loEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_adm_pswd_lo(unsigned) &rArr; TModel::get_psw_admin() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_admin()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>TDevHandlers::read_axis_rotate(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers16read_axis_rotateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_axis_rotate(unsigned) &rArr; TModel::get_axis_rotate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_axis_rotate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>TDevHandlers::read_u_baud_rate(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers16read_u_baud_rateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_u_baud_rate(unsigned) &rArr; TModel::get_u_baud_rate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_baud_rate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>TDevHandlers::read_base_pos_err(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers17read_base_pos_errEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_base_pos_err(unsigned) &rArr; TModel::get_base_pos_err() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_base_pos_err()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>TDevHandlers::read_parameter_hi(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers17read_parameter_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_parameter_hi(unsigned) &rArr; TModel::get_calib_parameter() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_parameter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>TDevHandlers::read_parameter_lo(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers17read_parameter_loEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_parameter_lo(unsigned) &rArr; TModel::get_calib_parameter() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_parameter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>TDevHandlers::read_sens_code_sw(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers17read_sens_code_swEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_sens_code_sw(unsigned) &rArr; TModel::get_hc_code_sw() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_code_sw()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>TDevHandlers::write_adm_pswd_hi(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers17write_adm_pswd_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TDevHandlers::write_adm_pswd_hi(unsigned) &rArr; TModel::set_psw_admin(float) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_admin(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>TDevHandlers::write_adm_pswd_lo(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlers17write_adm_pswd_loEj))
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>TDevHandlers::write_axis_rotate(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers17write_axis_rotateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_axis_rotate(unsigned) &rArr; TModel::set_axis_rotate(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_axis_rotate(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>TDevHandlers::write_u_baud_rate(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers17write_u_baud_rateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_u_baud_rate(unsigned) &rArr; TModel::set_u_baud_rate(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_baud_rate(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>TDevHandlers::my_read_sens_angle(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers18my_read_sens_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::my_read_sens_angle(unsigned) &rArr; TModel::set_sens_angle(short) &rArr; _ZN6TModel11access_protIU8__packedssEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_angle(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>TDevHandlers::my_read_sens_calib(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers18my_read_sens_calibEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::my_read_sens_calib(unsigned) &rArr; TModel::set_hc_acc_calib(TSettings::TCalib) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_acc_calib(TSettings::TCalib)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>TDevHandlers::read_calib_process(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers18read_calib_processEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TDevHandlers::read_calib_process(unsigned) &rArr; TModel::get_calib_process() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_process()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>TDevHandlers::read_sens_prog_nbr(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers18read_sens_prog_nbrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TDevHandlers::read_sens_prog_nbr(unsigned) &rArr; TModel::get_hc_prog_nbr() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_prog_nbr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>TDevHandlers::read_super_pswd_hi(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers18read_super_pswd_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_super_pswd_hi(unsigned) &rArr; TModel::get_psw_super() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_super()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>TDevHandlers::read_super_pswd_lo(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers18read_super_pswd_loEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_super_pswd_lo(unsigned) &rArr; TModel::get_psw_super() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_super()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>TDevHandlers::write_parameter_hi(unsigned)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, dev_handlers.o(i._ZN12TDevHandlers18write_parameter_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TDevHandlers::write_parameter_hi(unsigned) &rArr; TModel::set_calib_parameter(float) &rArr; _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_authorize_item_ptr(const TModel::TAuthorize*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_authorize_item_ptr()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_parameter(float)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_access(TSettings::TAccess)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>TDevHandlers::write_parameter_lo(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlers18write_parameter_loEj))
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>TDevHandlers::read_pd_pressure_hi(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers19read_pd_pressure_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_pd_pressure_hi(unsigned) &rArr; TModel::get_pd_pressure() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_pd_pressure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>TDevHandlers::read_pd_pressure_lo(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers19read_pd_pressure_loEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_pd_pressure_lo(unsigned) &rArr; TModel::get_pd_pressure() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_pd_pressure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>TDevHandlers::write_calib_process(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers19write_calib_processEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TDevHandlers::write_calib_process(unsigned) &rArr; TModel::set_calib_cmd(unsigned short) &rArr; TModel::set_calib_process(TSettings::TCalibProcess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_cmd(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>TDevHandlers::write_super_pswd_hi(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers19write_super_pswd_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TDevHandlers::write_super_pswd_hi(unsigned) &rArr; TModel::set_psw_super(float) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_super(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>TDevHandlers::write_super_pswd_lo(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlers19write_super_pswd_loEj))
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>TDevHandlers::my_read_sens_code_sw(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers20my_read_sens_code_swEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::my_read_sens_code_sw(unsigned) &rArr; TModel::set_hc_code_sw(unsigned char) &rArr; _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_code_sw(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>TDevHandlers::read_roll_bias_angle(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers20read_roll_bias_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_roll_bias_angle(unsigned) &rArr; TModel::get_roll_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_roll_bias_angle()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_axis_rotate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>TDevHandlers::write_pd_pressure_hi(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers20write_pd_pressure_hiEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TDevHandlers::write_pd_pressure_hi(unsigned) &rArr; TModel::set_pd_pressure(float) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pd_pressure(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>TDevHandlers::write_pd_pressure_lo(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlers20write_pd_pressure_loEj))
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>TDevHandlers::write_start_meas_cmd(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers20write_start_meas_cmdEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TDevHandlers::write_start_meas_cmd(unsigned) &rArr; TModel::set_start_meas_cmd(TSettings::TMeas) &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_start_meas_cmd(TSettings::TMeas)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>TDevHandlers::my_read_sens_prog_nbr(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers21my_read_sens_prog_nbrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TDevHandlers::my_read_sens_prog_nbr(unsigned) &rArr; TModel::set_hc_prog_nbr(unsigned short) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_prog_nbr(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>TDevHandlers::read_pitch_bias_angle(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers21read_pitch_bias_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::read_pitch_bias_angle(unsigned) &rArr; TModel::get_pitch_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_pitch_bias_angle()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_axis_rotate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>TDevHandlers::read_sens_axis_rotate(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers21read_sens_axis_rotateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_sens_axis_rotate(unsigned) &rArr; TModel::get_sens_axis_rotate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_axis_rotate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>TDevHandlers::read_sample_valid_sign(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers22read_sample_valid_signEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TDevHandlers::read_sample_valid_sign(unsigned) &rArr; TModel::get_sample_valid_sign() &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sample_valid_sign()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>TDevHandlers::write_sens_axis_rotate(unsigned)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers22write_sens_axis_rotateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TDevHandlers::write_sens_axis_rotate(unsigned) &rArr; TModel::set_sens_axis_rotate(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_buf_axis_rotate(unsigned char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_axis_rotate(unsigned char)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_axis_rotate()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>TDevHandlers::my_write_start_meas_cmd(unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers23my_write_start_meas_cmdEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TDevHandlers::my_write_start_meas_cmd(unsigned) &rArr; TModel::get_start_meas_cmd() &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_start_meas_cmd()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 2]<UL><LI> base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba687acc_rdyEv)
<LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>TDevHandlers::my_read_sens_axis_rotate(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers24my_read_sens_axis_rotateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::my_read_sens_axis_rotate(unsigned) &rArr; TModel::set_sens_axis_rotate(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_axis_rotate(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>TDevHandlers::my_read_sample_valid_sign(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers25my_read_sample_valid_signEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TDevHandlers::my_read_sample_valid_sign(unsigned) &rArr; TModel::set_sens_sample_valid_sign(TSettings::TValidSign) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_sample_valid_sign(TSettings::TValidSign)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>TDevHandlers::my_write_sens_axis_rotate(unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dev_handlers.o(i._ZN12TDevHandlers25my_write_sens_axis_rotateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TDevHandlers::my_write_sens_axis_rotate(unsigned) &rArr; TModel::get_sens_buf_axis_rotate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_buf_axis_rotate()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 2]<UL><LI> base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba6814wr_axis_rotateEv)
<LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>TDevHandlers::read_sens_roll_bias_angle(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers25read_sens_roll_bias_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_sens_roll_bias_angle(unsigned) &rArr; TModel::get_sens_roll_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_roll_bias_angle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>TDevHandlers::read_sens_pitch_bias_angle(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers26read_sens_pitch_bias_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_sens_pitch_bias_angle(unsigned) &rArr; TModel::get_sens_pitch_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_pitch_bias_angle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>TDevHandlers::read_sens_sample_valid_sign(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers27read_sens_sample_valid_signEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TDevHandlers::read_sens_sample_valid_sign(unsigned) &rArr; TModel::get_sens_sample_valid_sign() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_sample_valid_sign()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>TDevHandlers::my_read_sens_roll_bias_angle(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers28my_read_sens_roll_bias_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::my_read_sens_roll_bias_angle(unsigned) &rArr; TModel::set_sens_roll_bias_angle(signed char) &rArr; _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_roll_bias_angle(signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>TDevHandlers::my_read_sens_pitch_bias_angle(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers29my_read_sens_pitch_bias_angleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::my_read_sens_pitch_bias_angle(unsigned) &rArr; TModel::set_sens_pitch_bias_angle(signed char) &rArr; _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_pitch_bias_angle(signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1a2]"></a>TDevHandlers::m_read_input_registers_complete()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dev_handlers.o(i._ZN12TDevHandlers31m_read_input_registers_completeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TDevHandlers::m_read_input_registers_complete() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::m_read_input_registers(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[e]"></a>TDevHandlers::read_do(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers7read_doEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_do(unsigned) &rArr; TModel::get_d_o_sets() &rArr; void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_d_o_sets()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>TDevHandlers::read_hc(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers7read_hcEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_hc(unsigned) &rArr; TModel::get_hc_state() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_state()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>TDevHandlers::read_thr(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers8read_thrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_thr(unsigned) &rArr; TModel::get_thr() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_thr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>TDevHandlers::write_do(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers8write_doEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_do(unsigned) &rArr; TModel::set_d_o_sets(TContact) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_d_o_sets(TContact)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1a0]"></a>TDevHandlers::get_id_17()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_handlers.o(i._ZN12TDevHandlers9get_id_17Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TDevHandlers::get_id_17() &rArr; TModel::get_dev_type() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_report_server_id(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[14]"></a>TDevHandlers::read_bias(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers9read_biasEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_bias(unsigned) &rArr; TModel::get_bias() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_bias()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>TDevHandlers::read_hyst(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers9read_hystEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TDevHandlers::read_hyst(unsigned) &rArr; TModel::get_hyst() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hyst()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>TDevHandlers::write_thr(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlers9write_thrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TDevHandlers::write_thr(unsigned) &rArr; TModel::set_thr(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_thr(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_handlers.o(.data)
</UL>
<P><STRONG><a name="[1a9]"></a>TDevHandlers::TDevHandlers(TDevHandlers::TPduHandler*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlersC1EPNS_11TPduHandlerE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TDevHandlers::TDevHandlers(TDevHandlers::TPduHandler*)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**)
</UL>

<P><STRONG><a name="[300]"></a>TDevHandlers::TDevHandlers__sub_object(TDevHandlers::TPduHandler*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dev_handlers.o(i._ZN12TDevHandlersC1EPNS_11TPduHandlerE), UNUSED)

<P><STRONG><a name="[1aa]"></a>TDevHandlers::~TDevHandlers()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlersD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::~TModbusApp()
</UL>

<P><STRONG><a name="[301]"></a>TDevHandlers::~TDevHandlers__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dev_handlers.o(i._ZN12TDevHandlersD1Ev), UNUSED)

<P><STRONG><a name="[1f2]"></a>TDiscreteOut::init()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, discrete_out.o(i._ZN12TDiscreteOut4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TDiscreteOut::init() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>TDiscreteOut::open()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, discrete_out.o(i._ZN12TDiscreteOut4openEv))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ctrl.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>TDiscreteOut::closed()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, discrete_out.o(i._ZN12TDiscreteOut6closedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TDiscreteOut::closed()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to discrete_out_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ctrl.o(.constdata)
</UL>
<P><STRONG><a name="[2a5]"></a>TDiscreteOut::TDiscreteOut(const TPin&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, discrete_out.o(i._ZN12TDiscreteOutC1ERK4TPin))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_discrete_out_cpp_Do
</UL>

<P><STRONG><a name="[302]"></a>TDiscreteOut::TDiscreteOut__sub_object(const TPin&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, discrete_out.o(i._ZN12TDiscreteOutC1ERK4TPin), UNUSED)

<P><STRONG><a name="[b0]"></a>TDiscreteOut::~TDiscreteOut()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, discrete_out.o(i._ZN12TDiscreteOutD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> discrete_out.o(i.__sti___16_discrete_out_cpp_Do)
</UL>
<P><STRONG><a name="[303]"></a>TDiscreteOut::~TDiscreteOut__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, discrete_out.o(i._ZN12TDiscreteOutD1Ev), UNUSED)

<P><STRONG><a name="[26e]"></a>T_RS_485_phy::get_config()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phy10get_configEv))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[272]"></a>T_RS_485_phy::T_RS_485_phy()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>

<P><STRONG><a name="[304]"></a>T_RS_485_phy::T_RS_485_phy__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyC1Ev), UNUSED)

<P><STRONG><a name="[273]"></a>T_RS_485_phy::~T_RS_485_phy()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::~TUsart()
</UL>

<P><STRONG><a name="[305]"></a>T_RS_485_phy::~T_RS_485_phy__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rs-485_phy.o(i._ZN12T_RS_485_phyD1Ev), UNUSED)

<P><STRONG><a name="[f0]"></a>TCodingSwitch::sample_ctrl(void*&)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, coding_switch.o(i._ZN13TCodingSwitch11sample_ctrlERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TCodingSwitch::sample_ctrl(void*&) &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_code_sw(unsigned char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool std::equal&lang;unsigned char*, unsigned char*&rang;(T1, T1, T2)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::rd_addr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coding_switch.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>TCodingSwitch::init()</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, coding_switch.o(i._ZN13TCodingSwitch4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TCodingSwitch::init() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coding_switch(void*)
</UL>

<P><STRONG><a name="[1f4]"></a>TCodingSwitch::rd_addr()</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, coding_switch.o(i._ZN13TCodingSwitch7rd_addrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TCodingSwitch::rd_addr()
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::sample_ctrl(void*&)
</UL>

<P><STRONG><a name="[f1]"></a>TCodingSwitch::dly_ctrl(void*&)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, coding_switch.o(i._ZN13TCodingSwitch8dly_ctrlERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TCodingSwitch::dly_ctrl(void*&) &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coding_switch.o(.constdata)
</UL>
<P><STRONG><a name="[2a6]"></a>TCodingSwitch::TCodingSwitch(const TDevAddr_HW(&)[4])</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, coding_switch.o(i._ZN13TCodingSwitchC1ERA4_K11TDevAddr_HW))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_coding_switch_cpp_CodeSw
</UL>

<P><STRONG><a name="[306]"></a>TCodingSwitch::TCodingSwitch__sub_object(const TDevAddr_HW(&)[4])</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, coding_switch.o(i._ZN13TCodingSwitchC1ERA4_K11TDevAddr_HW), UNUSED)

<P><STRONG><a name="[b1]"></a>TCodingSwitch::~TCodingSwitch()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coding_switch.o(i._ZN13TCodingSwitchD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> coding_switch.o(i.__sti___17_coding_switch_cpp_CodeSw)
</UL>
<P><STRONG><a name="[307]"></a>TCodingSwitch::~TCodingSwitch__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, coding_switch.o(i._ZN13TCodingSwitchD1Ev), UNUSED)

<P><STRONG><a name="[278]"></a>TMedianFilter::process(short)</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, median_filter.o(i._ZN13TMedianFilter7processEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMedianFilter::process(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_open_angle()
</UL>

<P><STRONG><a name="[2a3]"></a>TMedianFilter::TMedianFilter(short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, median_filter.o(i._ZN13TMedianFilterC1Es))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_angles_cnt_cpp_002624b5
</UL>

<P><STRONG><a name="[308]"></a>TMedianFilter::TMedianFilter__sub_object(short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, median_filter.o(i._ZN13TMedianFilterC1Es), UNUSED)

<P><STRONG><a name="[ab]"></a>TMedianFilter::~TMedianFilter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, median_filter.o(i._ZN13TMedianFilterD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(i.__sti___14_angles_cnt_cpp_002624b5)
</UL>
<P><STRONG><a name="[309]"></a>TMedianFilter::~TMedianFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, median_filter.o(i._ZN13TMedianFilterD1Ev), UNUSED)

<P><STRONG><a name="[22e]"></a>I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, i2c_driver.o(i._ZN3I2C4TI2C10read_burstEPhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::start_transfer(unsigned char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferSize(I2C_TypeDef*, unsigned)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_ClearFlag_ARLO(I2C_TypeDef*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Disable(I2C_TypeDef*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Enable(I2C_TypeDef*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::collect_acc_data()
</UL>

<P><STRONG><a name="[233]"></a>I2C::TI2C::i2c_hw_init()</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, i2c_driver.o(i._ZN3I2C4TI2C11i2c_hw_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C::TI2C::i2c_hw_init() &rArr; I2C::TI2C::i2c_set_interrupt()
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::i2c_set_interrupt()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetMasterAddressingMode(I2C_TypeDef*, unsigned)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Disable(I2C_TypeDef*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Enable(I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_driver()
</UL>

<P><STRONG><a name="[237]"></a>I2C::TI2C::pin_clk_config()</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, i2c_driver.o(i._ZN3I2C4TI2C14pin_clk_configEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C::TI2C::pin_clk_config() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_driver()
</UL>

<P><STRONG><a name="[22f]"></a>I2C::TI2C::start_transfer(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, i2c_driver.o(i._ZN3I2C4TI2C14start_transferEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C::TI2C::start_transfer(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetMasterAddressingMode(I2C_TypeDef*, unsigned)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_GenerateStartCondition(I2C_TypeDef*)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferRequest(I2C_TypeDef*, unsigned)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetSlaveAddr(I2C_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[238]"></a>I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, i2c_driver.o(i._ZN3I2C4TI2C16read_single_byteEPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::start_transfer(unsigned char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferSize(I2C_TypeDef*, unsigned)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_ClearFlag_ARLO(I2C_TypeDef*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Disable(I2C_TypeDef*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Enable(I2C_TypeDef*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::check_id_acc_gyro()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>

<P><STRONG><a name="[236]"></a>I2C::TI2C::i2c_set_interrupt()</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, i2c_driver.o(i._ZN3I2C4TI2C17i2c_set_interruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C::TI2C::i2c_set_interrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::i2c_hw_init()
</UL>

<P><STRONG><a name="[239]"></a>I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, i2c_driver.o(i._ZN3I2C4TI2C17write_single_byteEPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::start_transfer(unsigned char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferSize(I2C_TypeDef*, unsigned)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_ClearFlag_ARLO(I2C_TypeDef*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Disable(I2C_TypeDef*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_Enable(I2C_TypeDef*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>

<P><STRONG><a name="[23a]"></a>I2C::TI2C::TI2C(const TI2C_HW&, I2C::TMode, I2C::TRate, I2C::TAddressing)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, i2c_driver.o(i._ZN3I2C4TI2CC1ERK7TI2C_HWNS_5TModeENS_5TRateENS_11TAddressingE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C::TI2C::TI2C(const TI2C_HW&, I2C::TMode, I2C::TRate, I2C::TAddressing)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::TAccGyroMagDriver_HL(const TI2C_HW&)
</UL>

<P><STRONG><a name="[30a]"></a>I2C::TI2C::TI2C__sub_object(const TI2C_HW&, I2C::TMode, I2C::TRate, I2C::TAddressing)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, i2c_driver.o(i._ZN3I2C4TI2CC1ERK7TI2C_HWNS_5TModeENS_5TRateENS_11TAddressingE), UNUSED)

<P><STRONG><a name="[28f]"></a>I2C::TI2C::~TI2C()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN3I2C4TI2CD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::~TAccGyroMagDriver_HL()
</UL>

<P><STRONG><a name="[30b]"></a>I2C::TI2C::~TI2C__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN3I2C4TI2CD1Ev), UNUSED)

<P><STRONG><a name="[fb]"></a>TLed::on()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i._ZN4TLed2onEv))
<BR>[Address Reference Count : 1]<UL><LI> led_ctrl.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>TLed::off()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i._ZN4TLed3offEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TLed::off()
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Led_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_ctrl.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>TLed::init()</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, led.o(i._ZN4TLed4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TLed::init() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Led_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedCtrl(void*)
</UL>

<P><STRONG><a name="[fc]"></a>TLed::toggle()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, led.o(i._ZN4TLed6toggleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TLed::toggle()
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Led_cpp]::LL_GPIO_TogglePin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_ctrl.o(.constdata)
</UL>
<P><STRONG><a name="[2a7]"></a>TLed::TLed(const TPin&, void**)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i._ZN4TLedC1ERK4TPinPPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TLed::TLed(const TPin&, void**)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Led_cpp_Led
</UL>

<P><STRONG><a name="[30c]"></a>TLed::TLed__sub_object(const TPin&, void**)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, led.o(i._ZN4TLedC1ERK4TPinPPv), UNUSED)

<P><STRONG><a name="[b3]"></a>TLed::~TLed()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i._ZN4TLedD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.__sti___7_Led_cpp_Led)
</UL>
<P><STRONG><a name="[30d]"></a>TLed::~TLed__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led.o(i._ZN4TLedD1Ev), UNUSED)

<P><STRONG><a name="[1fb]"></a>TMems::cnt_average(const TSettings::TAccelData(&)[300], TSettings::TAccelData&)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, mems.o(i._ZN5TMems11cnt_averageERA300_KN9TSettings10TAccelDataERS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMems::cnt_average(const TSettings::TAccelData(&)[300], TSettings::TAccelData&)
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[1f8]"></a>TMems::acquire_data(TSettings::TAccelData(&)[300])</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mems.o(i._ZN5TMems12acquire_dataERA300_N9TSettings10TAccelDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TMems::acquire_data(TSettings::TAccelData(&)[300]) &rArr; MPU_9250::TAccGyroMagDriver_HL::collect_acc_data() &rArr; I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::get_acc_data() const
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::collect_acc_data()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[1f9]"></a>TMems::is_valid_data(const TSettings::TAccelData(&)[300])</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, mems.o(i._ZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMems::is_valid_data(const TSettings::TAccelData(&)[300])
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[2a8]"></a>TMems::TMems(MPU_9250::TAccGyroMagDriver_HL&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mems.o(i._ZN5TMemsC1ERN8MPU_925020TAccGyroMagDriver_HLE))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_mems_cpp_Mems
</UL>

<P><STRONG><a name="[30e]"></a>TMems::TMems__sub_object(MPU_9250::TAccGyroMagDriver_HL&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mems.o(i._ZN5TMemsC1ERN8MPU_925020TAccGyroMagDriver_HLE), UNUSED)

<P><STRONG><a name="[b5]"></a>TMems::~TMems()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mems.o(i._ZN5TMemsD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> mems.o(i.__sti___8_mems_cpp_Mems)
</UL>
<P><STRONG><a name="[30f]"></a>TMems::~TMems__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mems.o(i._ZN5TMemsD1Ev), UNUSED)

<P><STRONG><a name="[241]"></a>relay::TRelay::TRelay(GPIO_TypeDef*, unsigned, unsigned, char*)</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, relay.o(i._ZN5relay6TRelayC1EP12GPIO_TypeDefjjPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = relay::TRelay::TRelay(GPIO_TypeDef*, unsigned, unsigned, char*) &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Relay_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_63965102
</UL>

<P><STRONG><a name="[310]"></a>relay::TRelay::TRelay__sub_object(GPIO_TypeDef*, unsigned, unsigned, char*)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, relay.o(i._ZN5relay6TRelayC1EP12GPIO_TypeDefjjPc), UNUSED)

<P><STRONG><a name="[b4]"></a>relay::TRelay::~TRelay()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, relay.o(i._ZN5relay6TRelayD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_63965102)
</UL>
<P><STRONG><a name="[311]"></a>relay::TRelay::~TRelay__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, relay.o(i._ZN5relay6TRelayD1Ev), UNUSED)

<P><STRONG><a name="[22b]"></a>TFlash::write_data(const unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash_driver.o(i._ZN6TFlash10write_dataEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TFlash::write_data(const unsigned char*) &rArr; TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::buf_process(const TRec*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[246]"></a>TFlash::write_sets(const unsigned char*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, flash_driver.o(i._ZN6TFlash10write_setsEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TFlash::write_sets(const unsigned char*, unsigned short) &rArr; TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
</UL>

<P><STRONG><a name="[268]"></a>TFlash::get_sets(unsigned char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, flash_driver.o(i._ZN6TFlash8get_setsEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TFlash::get_sets(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
</UL>

<P><STRONG><a name="[247]"></a>TFlash::init_tmr()</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, flash_driver.o(i._ZN6TFlash8init_tmrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TFlash::init_tmr() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to Flash_driver_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::TFlash()
</UL>

<P><STRONG><a name="[249]"></a>TFlash::TFlash()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash_driver.o(i._ZN6TFlashC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TFlash::TFlash() &rArr; TFlash::init_tmr() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_Flash_driver_cpp_d50a58b4
</UL>

<P><STRONG><a name="[312]"></a>TFlash::TFlash__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flash_driver.o(i._ZN6TFlashC1Ev), UNUSED)

<P><STRONG><a name="[af]"></a>TFlash::~TFlash()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash_driver.o(i._ZN6TFlashD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4)
</UL>
<P><STRONG><a name="[313]"></a>TFlash::~TFlash__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, flash_driver.o(i._ZN6TFlashD1Ev), UNUSED)

<P><STRONG><a name="[1b3]"></a>TModel::get_access()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel10get_accessEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_access() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_calib(short, bool*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::chk_access(void*)
</UL>

<P><STRONG><a name="[1d5]"></a>TModel::set_access(TSettings::TAccess)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel10set_accessEN9TSettings7TAccessE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_access(TSettings::TAccess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_access(short, bool*)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_parameter_hi(unsigned)
</UL>

<P><STRONG><a name="[24a]"></a>TModel::get_accel_z()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11get_accel_zEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_accel_z() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::get_z_sign()
</UL>

<P><STRONG><a name="[1ba]"></a>TModel::get_code_sw()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11get_code_swEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_code_sw() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_code_sw(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
</UL>

<P><STRONG><a name="[1bb]"></a>TModel::get_connect()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11get_connectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_connect() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_connect(unsigned)
</UL>

<P><STRONG><a name="[1bc]"></a>TModel::get_hc_mems()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11get_hc_memsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_hc_mems() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_hc_mems(unsigned)
</UL>

<P><STRONG><a name="[169]"></a>TModel::get_mb_addr()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11get_mb_addrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_mb_addr() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_mb_addr(short)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_mb_addr(unsigned)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sens_to_master_cpp]::addr_determ()
</UL>

<P><STRONG><a name="[202]"></a>TModel::set_accel_z(float)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, model.o(i._ZN6TModel11set_accel_zEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TModel::set_accel_z(float) &rArr; _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[1f7]"></a>TModel::set_code_sw(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11set_code_swEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_code_sw(unsigned char) &rArr; _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::sample_ctrl(void*&)
</UL>

<P><STRONG><a name="[218]"></a>TModel::set_connect(TSettings::TConnect)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11set_connectEN9TSettings8TConnectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_connect(TSettings::TConnect) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned)
</UL>

<P><STRONG><a name="[222]"></a>TModel::set_hc_mems(TSettings::TMainState)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel11set_hc_memsEN9TSettings10TMainStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_hc_mems(TSettings::TMainState) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>

<P><STRONG><a name="[1be]"></a>TModel::set_mb_addr(short)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, model.o(i._ZN6TModel11set_mb_addrEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModel::set_mb_addr(short) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_mb_addr()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_mb_addr(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_mb_addr(unsigned)
</UL>

<P><STRONG><a name="[175]"></a>TModel::get_btn_mode()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12get_btn_modeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_btn_mode() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPushButton(void*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
</UL>

<P><STRONG><a name="[1eb]"></a>TModel::get_d_o_sets()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12get_d_o_setsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_d_o_sets() &rArr; void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_do(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[165]"></a>TModel::get_dev_type()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12get_dev_typeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_dev_type() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_ctrl(void*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_to_master(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::get_id_17()
</UL>

<P><STRONG><a name="[1ec]"></a>TModel::get_hc_state()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12get_hc_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_hc_state() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_hc(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[18c]"></a>TModel::get_led_mode()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12get_led_modeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_led_mode() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedCtrl(void*)
</UL>

<P><STRONG><a name="[1bd]"></a>TModel::get_my_angle()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12get_my_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_my_angle() &rArr; _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_open_angle()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_my_angle(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[c6]"></a>TModel::get_raw_roll()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12get_raw_rollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_raw_roll() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>TModel::set_btn_mode(TSettings::TPress)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel12set_btn_modeEN9TSettings6TPressE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_btn_mode(TSettings::TPress) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPushButton(void*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::buf_process(const TRec*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1ee]"></a>TModel::set_d_o_sets(TContact)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12set_d_o_setsE8TContact))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_d_o_sets(TContact) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_do(unsigned)
</UL>

<P><STRONG><a name="[21d]"></a>TModel::set_hc_state(TSettings::THC)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12set_hc_stateEN9TSettings3THCE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_hc_state(TSettings::THC) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[174]"></a>TModel::set_led_mode(TSettings::TLedMode)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel12set_led_modeEN9TSettings8TLedModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_led_mode(TSettings::TLedMode) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::buf_process(const TRec*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[255]"></a>TModel::set_my_angle(short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12set_my_angleEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_my_angle(short) &rArr; _ZN6TModel11access_protIU8__packedssEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedssEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
</UL>

<P><STRONG><a name="[201]"></a>TModel::set_raw_roll(signed char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i._ZN6TModel12set_raw_rollEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_raw_roll(signed char) &rArr; _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[1b4]"></a>TModel::get_acc_calib()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_acc_calibEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModel::get_acc_calib() &rArr; TModel::set_acc_calib(TSettings::TCalib) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_accel_calib_sign()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_acc_calib(TSettings::TCalib)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_calib(unsigned)
</UL>

<P><STRONG><a name="[1bf]"></a>TModel::get_base_mems()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_base_memsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_base_mems() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_base_mems(unsigned)
</UL>

<P><STRONG><a name="[1b5]"></a>TModel::get_dev_state()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_dev_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_dev_state() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_state(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
</UL>

<P><STRONG><a name="[1c0]"></a>TModel::get_interconn()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_interconnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_interconn() &rArr; void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_interconn(unsigned)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sens_to_master_cpp]::addr_determ()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>

<P><STRONG><a name="[d2]"></a>TModel::get_psw_admin()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_psw_adminEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_psw_admin() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pd_pressure(float)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_admin(float)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_adm_pswd_lo(unsigned)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_adm_pswd_hi(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>TModel::get_psw_super()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_psw_superEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_psw_super() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_super(float)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_super_pswd_lo(unsigned)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_super_pswd_hi(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>TModel::get_raw_pitch()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13get_raw_pitchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_raw_pitch() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>TModel::handler_calib(short, bool*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13handler_calibEsPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TModel::handler_calib(short, bool*) &rArr; TModel::set_calib_process(TSettings::TCalibProcess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_process()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_access()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[258]"></a>TModel::set_acc_calib(TSettings::TCalib)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13set_acc_calibEN9TSettings6TCalibE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_acc_calib(TSettings::TCalib) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_acc_calib()
</UL>

<P><STRONG><a name="[21e]"></a>TModel::set_base_mems(TSettings::TMainState)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13set_base_memsEN9TSettings10TMainStateE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_base_mems(TSettings::TMainState) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[1d9]"></a>TModel::set_calib_cmd(unsigned short)</STRONG> (Thumb, 174 bytes, Stack size 104 bytes, model.o(i._ZN6TModel13set_calib_cmdEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TModel::set_calib_cmd(unsigned short) &rArr; TModel::set_calib_process(TSettings::TCalibProcess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_calib_process(unsigned)
</UL>

<P><STRONG><a name="[1c6]"></a>TModel::set_interconn(TInterconn)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13set_interconnE10TInterconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_interconn(TInterconn) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_interconn(unsigned)
</UL>

<P><STRONG><a name="[1cc]"></a>TModel::set_psw_admin(float)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, model.o(i._ZN6TModel13set_psw_adminEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModel::set_psw_admin(float) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_admin()
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_adm_pswd_hi(unsigned)
</UL>

<P><STRONG><a name="[1da]"></a>TModel::set_psw_super(float)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, model.o(i._ZN6TModel13set_psw_superEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModel::set_psw_super(float) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_super()
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_super_pswd_hi(unsigned)
</UL>

<P><STRONG><a name="[200]"></a>TModel::set_raw_pitch(signed char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i._ZN6TModel13set_raw_pitchEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_raw_pitch(signed char) &rArr; _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[1cb]"></a>TModel::get_hc_code_sw()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel14get_hc_code_swEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_hc_code_sw() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_code_sw(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
</UL>

<P><STRONG><a name="[1c1]"></a>TModel::get_hc_pos_err()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel14get_hc_pos_errEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_hc_pos_err() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_hc_pos_err(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[1c2]"></a>TModel::get_open_angle()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel14get_open_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_open_angle() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_open_angle(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[1c4]"></a>TModel::get_sens_angle()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel14get_sens_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_sens_angle() &rArr; _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_open_angle()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_angle(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
</UL>

<P><STRONG><a name="[d7]"></a>TModel::handler_access(short, bool*)</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, model.o(i._ZN6TModel14handler_accessEsPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModel::handler_access(short, bool*) &rArr; TModel::set_calib_process(TSettings::TCalibProcess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_authorize_item_ptr(const TModel::TAuthorize*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_access(TSettings::TAccess)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>TModel::set_flash_data()</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, model.o(i._ZN6TModel14set_flash_dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_par(unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hyst(unsigned char)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_bias(signed char)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_thr(unsigned char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_axis_rotate(unsigned char)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pitch_bias_angle(signed char)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_roll_bias_angle(signed char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_boot_mode_flag(TSettings::TBootModeFlag)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_baud_rate(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pd_pressure(float)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_axis_rotate(unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_super(float)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_admin(float)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_interconn(TInterconn)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_d_o_sets(TContact)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_mb_addr(short)
</UL>

<P><STRONG><a name="[1db]"></a>TModel::set_hc_code_sw(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, model.o(i._ZN6TModel14set_hc_code_swEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_hc_code_sw(unsigned char) &rArr; _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sens_code_sw(unsigned)
</UL>

<P><STRONG><a name="[21c]"></a>TModel::set_hc_pos_err(TSettings::TPosErr)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_hc_pos_err(TSettings::TPosErr) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[25a]"></a>TModel::set_open_angle(float)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, model.o(i._ZN6TModel14set_open_angleEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TModel::set_open_angle(float) &rArr; _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
</UL>

<P><STRONG><a name="[1cf]"></a>TModel::set_sens_angle(short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i._ZN6TModel14set_sens_angleEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_sens_angle(short) &rArr; _ZN6TModel11access_protIU8__packedssEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedssEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sens_angle(unsigned)
</UL>

<P><STRONG><a name="[1c7]"></a>TModel::get_axis_rotate()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel15get_axis_rotateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_axis_rotate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_axis_rotate(unsigned char)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_axis_rotate(unsigned)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_pitch_bias_angle(unsigned)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_roll_bias_angle(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[1d2]"></a>TModel::get_hc_prog_nbr()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel15get_hc_prog_nbrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_hc_prog_nbr() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_prog_nbr(unsigned)
</UL>

<P><STRONG><a name="[1d8]"></a>TModel::get_pd_pressure()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel15get_pd_pressureEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_pd_pressure() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_pd_pressure_lo(unsigned)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_pd_pressure_hi(unsigned)
</UL>

<P><STRONG><a name="[1c8]"></a>TModel::get_u_baud_rate()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel15get_u_baud_rateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_u_baud_rate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_baud_rate(unsigned char)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_u_baud_rate(unsigned)
</UL>

<P><STRONG><a name="[1cd]"></a>TModel::set_axis_rotate(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel15set_axis_rotateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_axis_rotate(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_axis_rotate()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_axis_rotate(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_axis_rotate(unsigned)
</UL>

<P><STRONG><a name="[1de]"></a>TModel::set_hc_prog_nbr(unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel15set_hc_prog_nbrEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_hc_prog_nbr(unsigned short) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sens_prog_nbr(unsigned)
</UL>

<P><STRONG><a name="[1dc]"></a>TModel::set_pd_pressure(float)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, model.o(i._ZN6TModel15set_pd_pressureEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModel::set_pd_pressure(float) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_admin()
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_pd_pressure_hi(unsigned)
</UL>

<P><STRONG><a name="[1ce]"></a>TModel::set_u_baud_rate(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel15set_u_baud_rateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_u_baud_rate(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_baud_rate()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_u_baud_rate(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_u_baud_rate(unsigned)
</UL>

<P><STRONG><a name="[1c9]"></a>TModel::get_base_pos_err()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel16get_base_pos_errEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_base_pos_err() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_base_pos_err(unsigned)
</UL>

<P><STRONG><a name="[1c5]"></a>TModel::get_hc_acc_calib()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, model.o(i._ZN6TModel16get_hc_acc_calibEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_hc_acc_calib() &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_calib(unsigned)
</UL>

<P><STRONG><a name="[25d]"></a>TModel::set_base_pos_err(TSettings::TPosErr)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_base_pos_err(TSettings::TPosErr) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
</UL>

<P><STRONG><a name="[1d0]"></a>TModel::set_hc_acc_calib(TSettings::TCalib)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, model.o(i._ZN6TModel16set_hc_acc_calibEN9TSettings6TCalibE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_hc_acc_calib(TSettings::TCalib) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sens_calib(unsigned)
</UL>

<P><STRONG><a name="[1d1]"></a>TModel::get_calib_process()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel17get_calib_processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_calib_process() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_calib(short, bool*)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_calib_process(unsigned)
</UL>

<P><STRONG><a name="[1d6]"></a>TModel::set_calib_process(TSettings::TCalibProcess)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_calib_process(TSettings::TCalibProcess) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_access(short, bool*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_cmd(unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_calib(short, bool*)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_parameter_hi(unsigned)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::user_calib(short)
</UL>

<P><STRONG><a name="[1e3]"></a>TModel::get_start_meas_cmd()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel18get_start_meas_cmdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModel::get_start_meas_cmd() &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_communicate_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_write_start_meas_cmd(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>

<P><STRONG><a name="[193]"></a>TModel::set_boot_mode_flag(TSettings::TBootModeFlag)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, model.o(i._ZN6TModel18set_boot_mode_flagEN9TSettings13TBootModeFlagE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TModel::set_boot_mode_flag(TSettings::TBootModeFlag) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_boot_mode(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1dd]"></a>TModel::set_start_meas_cmd(TSettings::TMeas)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, model.o(i._ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModel::set_start_meas_cmd(TSettings::TMeas) &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_communicate_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_start_meas_cmd(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>

<P><STRONG><a name="[1ca]"></a>TModel::get_calib_parameter()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel19get_calib_parameterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_calib_parameter() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_parameter_hi(unsigned)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_parameter_lo(unsigned)
</UL>

<P><STRONG><a name="[c7]"></a>TModel::get_roll_bias_angle()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel19get_roll_bias_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_roll_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_roll_bias_angle(signed char)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_roll_bias_angle(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>TModel::set_calib_parameter(float)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, model.o(i._ZN6TModel19set_calib_parameterEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TModel::set_calib_parameter(float) &rArr; _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_parameter_hi(unsigned)
</UL>

<P><STRONG><a name="[21f]"></a>TModel::set_roll_bias_angle(signed char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel19set_roll_bias_angleEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_roll_bias_angle(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_roll_bias_angle()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_roll_bias_angle(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[215]"></a>TModel::get_accel_calib_sign()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel20get_accel_calib_signEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_accel_calib_sign() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_acc_calib()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[25e]"></a>TModel::get_communicate_byte()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i._ZN6TModel20get_communicate_byteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sample_valid_sign(TSettings::TValidSign)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sample_valid_sign()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_start_meas_cmd(TSettings::TMeas)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_start_meas_cmd()
</UL>

<P><STRONG><a name="[c9]"></a>TModel::get_pitch_bias_angle()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel20get_pitch_bias_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_pitch_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pitch_bias_angle(signed char)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_pitch_bias_angle(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>TModel::get_sens_axis_rotate()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel20get_sens_axis_rotateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_sens_axis_rotate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_axis_rotate(unsigned char)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_sens_axis_rotate(unsigned)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_axis_rotate(unsigned)
</UL>

<P><STRONG><a name="[221]"></a>TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel20set_accel_calib_signERKN9TSettings11TIsAccCalibE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[220]"></a>TModel::set_pitch_bias_angle(signed char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel20set_pitch_bias_angleEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_pitch_bias_angle(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_pitch_bias_angle()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_pitch_bias_angle(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[1e2]"></a>TModel::set_sens_axis_rotate(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel20set_sens_axis_rotateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_sens_axis_rotate(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_axis_rotate()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_axis_rotate(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sens_axis_rotate(unsigned)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_sens_axis_rotate(unsigned)
</UL>

<P><STRONG><a name="[1e0]"></a>TModel::get_sample_valid_sign()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel21get_sample_valid_signEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModel::get_sample_valid_sign() &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_communicate_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sample_valid_sign(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>

<P><STRONG><a name="[1fa]"></a>TModel::set_sample_valid_sign(TSettings::TValidSign)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, model.o(i._ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TModel::set_sample_valid_sign(TSettings::TValidSign) &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_communicate_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>

<P><STRONG><a name="[1d3]"></a>TModel::get_authorize_item_ptr()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i._ZN6TModel22get_authorize_item_ptrEv))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_parameter_hi(unsigned)
</UL>

<P><STRONG><a name="[1d7]"></a>TModel::set_authorize_item_ptr(const TModel::TAuthorize*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model.o(i._ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_access(short, bool*)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_parameter_hi(unsigned)
</UL>

<P><STRONG><a name="[1e5]"></a>TModel::get_sens_buf_axis_rotate()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel24get_sens_buf_axis_rotateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_sens_buf_axis_rotate() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_write_sens_axis_rotate(unsigned)
</UL>

<P><STRONG><a name="[1e6]"></a>TModel::get_sens_roll_bias_angle()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel24get_sens_roll_bias_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_sens_roll_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_roll_bias_angle(unsigned)
</UL>

<P><STRONG><a name="[1e1]"></a>TModel::set_sens_buf_axis_rotate(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, model.o(i._ZN6TModel24set_sens_buf_axis_rotateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_sens_buf_axis_rotate(unsigned char) &rArr; _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_axis_rotate(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_sens_axis_rotate(unsigned)
</UL>

<P><STRONG><a name="[1e9]"></a>TModel::set_sens_roll_bias_angle(signed char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i._ZN6TModel24set_sens_roll_bias_angleEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_sens_roll_bias_angle(signed char) &rArr; _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sens_roll_bias_angle(unsigned)
</UL>

<P><STRONG><a name="[1e7]"></a>TModel::get_sens_pitch_bias_angle()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel25get_sens_pitch_bias_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_sens_pitch_bias_angle() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_pitch_bias_angle(unsigned)
</UL>

<P><STRONG><a name="[1ea]"></a>TModel::set_sens_pitch_bias_angle(signed char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i._ZN6TModel25set_sens_pitch_bias_angleEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::set_sens_pitch_bias_angle(signed char) &rArr; _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sens_pitch_bias_angle(unsigned)
</UL>

<P><STRONG><a name="[1e8]"></a>TModel::get_sens_sample_valid_sign()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(i._ZN6TModel26get_sens_sample_valid_signEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TModel::get_sens_sample_valid_sign() &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_sens_sample_valid_sign(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
</UL>

<P><STRONG><a name="[23b]"></a>TModel::get_u_baud_rate_bit_to_sec()</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, model.o(i._ZN6TModel26get_u_baud_rate_bit_to_secEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TModel::get_u_baud_rate_bit_to_sec() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sens_to_master_cpp]::addr_determ()
</UL>

<P><STRONG><a name="[1e4]"></a>TModel::set_sens_sample_valid_sign(TSettings::TValidSign)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, model.o(i._ZN6TModel26set_sens_sample_valid_signEN9TSettings10TValidSignE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TModel::set_sens_sample_valid_sign(TSettings::TValidSign) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_read_sample_valid_sign(unsigned)
</UL>

<P><STRONG><a name="[1ed]"></a>TModel::get_thr()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel7get_thrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_thr() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_thr(unsigned char)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_thr(unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[1f1]"></a>TModel::set_thr(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel7set_thrEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_thr(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_thr()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_thr(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_thr(unsigned)
</UL>

<P><STRONG><a name="[1ef]"></a>TModel::get_bias()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel8get_biasEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_bias() &rArr; _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_bias(signed char)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_bias(unsigned)
</UL>

<P><STRONG><a name="[1f0]"></a>TModel::get_hyst()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel8get_hystEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_hyst() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hyst(unsigned char)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_hyst(unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[1b7]"></a>TModel::set_bias(signed char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel8set_biasEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_bias(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_bias()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_bias(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_bias(unsigned)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::user_calib(short)
</UL>

<P><STRONG><a name="[1b8]"></a>TModel::set_hyst(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel8set_hystEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_hyst(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hyst()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_hyst(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_hyst(unsigned)
</UL>

<P><STRONG><a name="[1b6]"></a>TModel::get_u_par()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, model.o(i._ZN6TModel9get_u_parEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TModel::get_u_par() &rArr; _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_par(unsigned char)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_u_par(unsigned)
</UL>

<P><STRONG><a name="[1b9]"></a>TModel::set_u_par(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model.o(i._ZN6TModel9set_u_parEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TModel::set_u_par(unsigned char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_par()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_u_par(short) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_u_par(unsigned)
</UL>

<P><STRONG><a name="[266]"></a>TModel::TModel(void*&)</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, model.o(i._ZN6TModelC1ERPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TModel::TModel(void*&) &rArr; TFlash::write_sets(const unsigned char*, unsigned short) &rArr; TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::TSettings()
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::get_sets(unsigned char*, unsigned short)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_model_cpp_Model
</UL>

<P><STRONG><a name="[314]"></a>TModel::TModel__sub_object(void*&)</STRONG> (Thumb, 0 bytes, Stack size 96 bytes, model.o(i._ZN6TModelC1ERPv), UNUSED)

<P><STRONG><a name="[b6]"></a>TModel::~TModel()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, model.o(i._ZN6TModelD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TModel::~TModel()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::~TSettings()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.__sti___9_model_cpp_Model)
</UL>
<P><STRONG><a name="[315]"></a>TModel::~TModel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, model.o(i._ZN6TModelD1Ev), UNUSED)

<P><STRONG><a name="[26a]"></a>TUsart::set_485_hd(unsigned, unsigned)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN6TUsart10set_485_hdEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TUsart::set_485_hd(unsigned, unsigned) &rArr; [local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[1af]"></a>TUsart::en_eob_detect(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN6TUsart13en_eob_detectEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TUsart::en_eob_detect(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_ClearFlag_RTO(USART_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_handle()
</UL>

<P><STRONG><a name="[26d]"></a>TUsart::set_interrupt()</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, usart_driver_.o(i._ZN6TUsart13set_interruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TUsart::set_interrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[1ad]"></a>TUsart::dis_eob_detect()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart_driver_.o(i._ZN6TUsart14dis_eob_detectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TUsart::dis_eob_detect()
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_ClearFlag_RTO(USART_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::stop_receive()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[166]"></a>TUsart::pin_clk_config()</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, usart_driver_.o(i._ZN6TUsart14pin_clk_configEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TUsart::pin_clk_config() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_to_master(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
</UL>

<P><STRONG><a name="[271]"></a>TUsart::dis_if()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN6TUsart6dis_ifEv))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_sets(const TUsart::TSets&)
</UL>

<P><STRONG><a name="[167]"></a>TUsart::hw_init(unsigned char)</STRONG> (Thumb, 296 bytes, Stack size 120 bytes, usart_driver_.o(i._ZN6TUsart7hw_initEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_RS_485_phy::get_config()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_232(unsigned, unsigned)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_interrupt()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::en_eob_detect(unsigned char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_485_hd(unsigned, unsigned)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_to_master(void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_sets(const TUsart::TSets&)
</UL>

<P><STRONG><a name="[26f]"></a>TUsart::set_232(unsigned, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN6TUsart7set_232Ejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TUsart::set_232(unsigned, unsigned) &rArr; [local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
</UL>

<P><STRONG><a name="[270]"></a>TUsart::chk_sets(const TUsart::TSets&)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN6TUsart8chk_setsERKNS_5TSetsE))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_sets(const TUsart::TSets&)
</UL>

<P><STRONG><a name="[17e]"></a>TUsart::set_sets(const TUsart::TSets&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN6TUsart8set_setsERKNS_5TSetsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TUsart::set_sets(const TUsart::TSets&) &rArr; TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::chk_sets(const TUsart::TSets&)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::hw_init(unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::dis_if()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sens_to_master_cpp]::addr_determ()
</UL>

<P><STRONG><a name="[1b1]"></a>TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usart_driver_.o(i._ZN6TUsartC1ERK9TUsart_HWRKNS_5TSetsENS_5TModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_RS_485_phy::T_RS_485_phy()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**)
</UL>

<P><STRONG><a name="[316]"></a>TUsart::TUsart__sub_object(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, usart_driver_.o(i._ZN6TUsartC1ERK9TUsart_HWRKNS_5TSetsENS_5TModeE), UNUSED)

<P><STRONG><a name="[1b2]"></a>TUsart::~TUsart()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_driver_.o(i._ZN6TUsartD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TUsart::~TUsart()
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_RS_485_phy::~T_RS_485_phy()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::~TModbusLink()
</UL>

<P><STRONG><a name="[317]"></a>TUsart::~TUsart__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, usart_driver_.o(i._ZN6TUsartD1Ev), UNUSED)

<P><STRONG><a name="[274]"></a>TAngles::get_z_sign()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, angles_cnt.o(i._ZN7TAngles10get_z_signEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TAngles::get_z_sign() &rArr; TModel::get_accel_z() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_accel_z()
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
</UL>

<P><STRONG><a name="[c5]"></a>TAngles::place_down(short, short)</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, angles_cnt.o(i._ZN7TAngles10place_downEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TAngles::place_down(short, short) &rArr; TModel::set_open_angle(float) &rArr; _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_bias()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_base_pos_err(TSettings::TPosErr)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_base_pos_err()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_open_angle(float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_open_angle()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_damp(float&, short, float)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cast_open_angle(short*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>TAngles::q1_neg_cnt(signed char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q1_neg_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>TAngles::q1_neg_cnt(short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q1_neg_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>TAngles::q1_pos_cnt(signed char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q1_pos_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>TAngles::q1_pos_cnt(short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q1_pos_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>TAngles::q2_neg_cnt(signed char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q2_neg_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>TAngles::q2_neg_cnt(short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q2_neg_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>TAngles::q2_pos_cnt(signed char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q2_pos_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>TAngles::q2_pos_cnt(short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q2_pos_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>TAngles::q3_neg_cnt(signed char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q3_neg_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>TAngles::q3_neg_cnt(short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q3_neg_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>TAngles::q3_pos_cnt(signed char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q3_pos_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>TAngles::q3_pos_cnt(short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q3_pos_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>TAngles::q4_neg_cnt(signed char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q4_neg_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>TAngles::q4_neg_cnt(short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q4_neg_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>TAngles::q4_pos_cnt(signed char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q4_pos_cntEa))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>TAngles::q4_pos_cnt(short, short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles10q4_pos_cntEss))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[277]"></a>TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)</STRONG> (Thumb, 342 bytes, Stack size 176 bytes, angles_cnt.o(i._ZN7TAngles11cnt_processEN9TSettings11TAxisRotateEbN10TMemsMount1TE))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T) &rArr; TAngles::get_z_sign() &rArr; TModel::get_accel_z() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_my_angle(short)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::get_z_sign()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::sens(TSettings::TAxisRotate, bool)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::base(TSettings::TAxisRotate, bool)
</UL>

<P><STRONG><a name="[21a]"></a>TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, angles_cnt.o(i._ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[21b]"></a>TAngles::cnt_open_angle()</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, angles_cnt.o(i._ZN7TAngles14cnt_open_angleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TAngles::cnt_open_angle() &rArr; TModel::get_sens_angle() &rArr; _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_angle()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_my_angle()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMedianFilter::process(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[275]"></a>TAngles::cast_open_angle(short*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles15cast_open_angleEPs))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
</UL>

<P><STRONG><a name="[c2]"></a>TAngles::base(TSettings::TAxisRotate, bool)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, angles_cnt.o(i._ZN7TAngles4baseEN9TSettings11TAxisRotateEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TAngles::base(TSettings::TAxisRotate, bool) &rArr; TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T) &rArr; TAngles::get_z_sign() &rArr; TModel::get_accel_z() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>TAngles::sens(TSettings::TAxisRotate, bool)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, angles_cnt.o(i._ZN7TAngles4sensEN9TSettings11TAxisRotateEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TAngles::sens(TSettings::TAxisRotate, bool) &rArr; TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T) &rArr; TAngles::get_z_sign() &rArr; TModel::get_accel_z() &rArr; _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[276]"></a>TAngles::cnt_damp(float&, short, float)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAngles8cnt_dampERfsf))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_up(short, short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::place_down(short, short)
</UL>

<P><STRONG><a name="[c4]"></a>TAngles::place_up(short, short)</STRONG> (Thumb, 238 bytes, Stack size 112 bytes, angles_cnt.o(i._ZN7TAngles8place_upEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TAngles::place_up(short, short) &rArr; TModel::set_open_angle(float) &rArr; _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_bias()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_base_pos_err(TSettings::TPosErr)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_base_pos_err()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_open_angle(float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_open_angle()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_damp(float&, short, float)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cast_open_angle(short*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.constdata)
</UL>
<P><STRONG><a name="[2a4]"></a>TAngles::TAngles()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAnglesC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_angles_cnt_cpp_002624b5
</UL>

<P><STRONG><a name="[318]"></a>TAngles::TAngles__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAnglesC1Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>TAngles::~TAngles()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAnglesD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(i.__sti___14_angles_cnt_cpp_002624b5)
</UL>
<P><STRONG><a name="[319]"></a>TAngles::~TAngles__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, angles_cnt.o(i._ZN7TAnglesD1Ev), UNUSED)

<P><STRONG><a name="[17a]"></a>TButton::init()</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, button.o(i._ZN7TButton4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TButton::init() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPushButton(void*)
</UL>

<P><STRONG><a name="[2a1]"></a>TButton::TButton(const TPin&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonC1ERK4TPin))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Button_cpp_Btn
</UL>

<P><STRONG><a name="[31a]"></a>TButton::TButton__sub_object(const TPin&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonC1ERK4TPin), UNUSED)

<P><STRONG><a name="[a8]"></a>TButton::~TButton()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> button.o(i.__sti___10_Button_cpp_Btn)
</UL>
<P><STRONG><a name="[31b]"></a>TButton::~TButton__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, button.o(i._ZN7TButtonD1Ev), UNUSED)

<P><STRONG><a name="[279]"></a>MPU_9250::TAccGyroMagDriver_HL::config_acc()</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL10config_accEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::config_acc() &rArr; I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::get_acc_gyro_addr(MPU_9250::TLogicLevelAD0) const
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::accel_full_scale_select(unsigned char*, MPU_9250::VAccelFullScaleSelect)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::accel_filter_choise(unsigned char*, MPU_9250::VAccelFilterChoise)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::accel_filter_read(unsigned char, MPU_9250::VSetAccelFilter*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::set_accel_filter(unsigned char*, MPU_9250::VSetAccelFilter)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
</UL>

<P><STRONG><a name="[27f]"></a>MPU_9250::TAccGyroMagDriver_HL::config_gyro()</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL11config_gyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::config_gyro() &rArr; I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::get_acc_gyro_addr(MPU_9250::TLogicLevelAD0) const
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::filter_gyro_temp_config(unsigned char*, MPU_9250::VFilterGyroTempConfig)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::gyro_full_scale_select(unsigned char*, MPU_9250::VGyroFullScaleSelect)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::filter_gyro_temp_read(unsigned char, MPU_9250::VFilterGyroTempConfig*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::gyro_filter_choise(unsigned char*, MPU_9250::VGyroFilterChoise)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
</UL>

<P><STRONG><a name="[286]"></a>MPU_9250::TAccGyroMagDriver_HL::count_accel(const MPU_9250::TRawAxesData*)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL11count_accelEPKNS_12TRawAxesDataE))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::convert_acc_data(unsigned char*)
</UL>

<P><STRONG><a name="[181]"></a>MPU_9250::TAccGyroMagDriver_HL::init_driver()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL11init_driverEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::init_driver() &rArr; I2C::TI2C::i2c_hw_init() &rArr; I2C::TI2C::i2c_set_interrupt()
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::pin_clk_config()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::i2c_hw_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[285]"></a>MPU_9250::TAccGyroMagDriver_HL::rev_half_word(MPU_9250::TSensorData)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL13rev_half_wordENS_11TSensorDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::rev_half_word(MPU_9250::TSensorData)
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::convert_acc_data(unsigned char*)
</UL>

<P><STRONG><a name="[23e]"></a>MPU_9250::TAccGyroMagDriver_HL::collect_acc_data()</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL16collect_acc_dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::collect_acc_data() &rArr; I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::get_acc_gyro_addr(MPU_9250::TLogicLevelAD0) const
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::convert_acc_data(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::acquire_data(TSettings::TAccelData(&)[300])
</UL>

<P><STRONG><a name="[284]"></a>MPU_9250::TAccGyroMagDriver_HL::convert_acc_data(unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL16convert_acc_dataEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::convert_acc_data(unsigned char*) &rArr; MPU_9250::TAccGyroMagDriver_HL::rev_half_word(MPU_9250::TSensorData)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::rev_half_word(MPU_9250::TSensorData)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::count_accel(const MPU_9250::TRawAxesData*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::collect_acc_data()
</UL>

<P><STRONG><a name="[184]"></a>MPU_9250::TAccGyroMagDriver_HL::check_id_acc_gyro()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL17check_id_acc_gyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::check_id_acc_gyro() &rArr; I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::get_acc_gyro_addr(MPU_9250::TLogicLevelAD0) const
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[182]"></a>MPU_9250::TAccGyroMagDriver_HL::init_aux()</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL8init_auxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::init_aux() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[183]"></a>MPU_9250::TAccGyroMagDriver_HL::init_chip()</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HL9init_chipEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::init_chip() &rArr; MPU_9250::TAccGyroMagDriver_HL::config_gyro() &rArr; I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::get_acc_gyro_addr(MPU_9250::TLogicLevelAD0) const
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::i2c_master_if_module_ctrl(unsigned char*, MPU_9250::VI2CMasterCtrl)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::raw_data_ready_int_ctrl(unsigned char*, MPU_9250::VEnDis)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::int_logic_level(unsigned char*, MPU_9250::VLogicLevelINT)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::int_pin_config(unsigned char*, MPU_9250::VPinConfigINT)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::int_latch_ctrl(unsigned char*, MPU_9250::VLatchINT)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[28c]"></a>MPU_9250::TAccGyroMagDriver_HL::TAccGyroMagDriver_HL(const TI2C_HW&)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HLC1ERK7TI2C_HW))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::TAccGyroMagDriver_HL(const TI2C_HW&) &rArr; I2C::TI2C::TI2C(const TI2C_HW&, I2C::TMode, I2C::TRate, I2C::TAddressing)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::TAccGyroMagDriver_LL()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::TI2C(const TI2C_HW&, I2C::TMode, I2C::TRate, I2C::TAddressing)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c
</UL>

<P><STRONG><a name="[31c]"></a>MPU_9250::TAccGyroMagDriver_HL::TAccGyroMagDriver_HL__sub_object(const TI2C_HW&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HLC1ERK7TI2C_HW), UNUSED)

<P><STRONG><a name="[b2]"></a>MPU_9250::TAccGyroMagDriver_HL::~TAccGyroMagDriver_HL()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HLD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPU_9250::TAccGyroMagDriver_HL::~TAccGyroMagDriver_HL()
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_LL::~TAccGyroMagDriver_LL()
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::~TI2C()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu-9250_acc_gyro_mag_driver_hl.o(i.__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c)
</UL>
<P><STRONG><a name="[31d]"></a>MPU_9250::TAccGyroMagDriver_HL::~TAccGyroMagDriver_HL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZN8MPU_925020TAccGyroMagDriver_HLD1Ev), UNUSED)

<P><STRONG><a name="[289]"></a>MPU_9250::TAccGyroMagDriver_LL::int_latch_ctrl(unsigned char*, MPU_9250::VLatchINT)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL14int_latch_ctrlEPhNS_9VLatchINTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::int_latch_ctrl(unsigned char*, MPU_9250::VLatchINT)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
</UL>

<P><STRONG><a name="[288]"></a>MPU_9250::TAccGyroMagDriver_LL::int_pin_config(unsigned char*, MPU_9250::VPinConfigINT)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL14int_pin_configEPhNS_13VPinConfigINTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::int_pin_config(unsigned char*, MPU_9250::VPinConfigINT)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
</UL>

<P><STRONG><a name="[287]"></a>MPU_9250::TAccGyroMagDriver_LL::int_logic_level(unsigned char*, MPU_9250::VLogicLevelINT)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL15int_logic_levelEPhNS_14VLogicLevelINTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::int_logic_level(unsigned char*, MPU_9250::VLogicLevelINT)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
</UL>

<P><STRONG><a name="[27d]"></a>MPU_9250::TAccGyroMagDriver_LL::set_accel_filter(unsigned char*, MPU_9250::VSetAccelFilter)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL16set_accel_filterEPhNS_15VSetAccelFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::set_accel_filter(unsigned char*, MPU_9250::VSetAccelFilter)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>

<P><STRONG><a name="[27e]"></a>MPU_9250::TAccGyroMagDriver_LL::accel_filter_read(unsigned char, MPU_9250::VSetAccelFilter*)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL17accel_filter_readEhPNS_15VSetAccelFilterE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::accel_filter_read(unsigned char, MPU_9250::VSetAccelFilter*)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>

<P><STRONG><a name="[281]"></a>MPU_9250::TAccGyroMagDriver_LL::gyro_filter_choise(unsigned char*, MPU_9250::VGyroFilterChoise)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL18gyro_filter_choiseEPhNS_17VGyroFilterChoiseE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::gyro_filter_choise(unsigned char*, MPU_9250::VGyroFilterChoise)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
</UL>

<P><STRONG><a name="[27c]"></a>MPU_9250::TAccGyroMagDriver_LL::accel_filter_choise(unsigned char*, MPU_9250::VAccelFilterChoise)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL19accel_filter_choiseEPhNS_18VAccelFilterChoiseE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::accel_filter_choise(unsigned char*, MPU_9250::VAccelFilterChoise)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>

<P><STRONG><a name="[283]"></a>MPU_9250::TAccGyroMagDriver_LL::filter_gyro_temp_read(unsigned char, MPU_9250::VFilterGyroTempConfig*)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL21filter_gyro_temp_readEhPNS_21VFilterGyroTempConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::filter_gyro_temp_read(unsigned char, MPU_9250::VFilterGyroTempConfig*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
</UL>

<P><STRONG><a name="[280]"></a>MPU_9250::TAccGyroMagDriver_LL::gyro_full_scale_select(unsigned char*, MPU_9250::VGyroFullScaleSelect)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL22gyro_full_scale_selectEPhNS_20VGyroFullScaleSelectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::gyro_full_scale_select(unsigned char*, MPU_9250::VGyroFullScaleSelect)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
</UL>

<P><STRONG><a name="[27b]"></a>MPU_9250::TAccGyroMagDriver_LL::accel_full_scale_select(unsigned char*, MPU_9250::VAccelFullScaleSelect)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL23accel_full_scale_selectEPhNS_21VAccelFullScaleSelectE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::accel_full_scale_select(unsigned char*, MPU_9250::VAccelFullScaleSelect)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>

<P><STRONG><a name="[282]"></a>MPU_9250::TAccGyroMagDriver_LL::filter_gyro_temp_config(unsigned char*, MPU_9250::VFilterGyroTempConfig)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL23filter_gyro_temp_configEPhNS_21VFilterGyroTempConfigE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::filter_gyro_temp_config(unsigned char*, MPU_9250::VFilterGyroTempConfig)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
</UL>

<P><STRONG><a name="[28a]"></a>MPU_9250::TAccGyroMagDriver_LL::raw_data_ready_int_ctrl(unsigned char*, MPU_9250::VEnDis)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL23raw_data_ready_int_ctrlEPhNS_6VEnDisE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::raw_data_ready_int_ctrl(unsigned char*, MPU_9250::VEnDis)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
</UL>

<P><STRONG><a name="[28b]"></a>MPU_9250::TAccGyroMagDriver_LL::i2c_master_if_module_ctrl(unsigned char*, MPU_9250::VI2CMasterCtrl)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LL25i2c_master_if_module_ctrlEPhNS_14VI2CMasterCtrlE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::i2c_master_if_module_ctrl(unsigned char*, MPU_9250::VI2CMasterCtrl)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
</UL>

<P><STRONG><a name="[28d]"></a>MPU_9250::TAccGyroMagDriver_LL::TAccGyroMagDriver_LL()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LLC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::TAccGyroMagDriver_HL(const TI2C_HW&)
</UL>

<P><STRONG><a name="[31e]"></a>MPU_9250::TAccGyroMagDriver_LL::TAccGyroMagDriver_LL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LLC1Ev), UNUSED)

<P><STRONG><a name="[28e]"></a>MPU_9250::TAccGyroMagDriver_LL::~TAccGyroMagDriver_LL()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LLD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::~TAccGyroMagDriver_HL()
</UL>

<P><STRONG><a name="[31f]"></a>MPU_9250::TAccGyroMagDriver_LL::~TAccGyroMagDriver_LL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZN8MPU_925020TAccGyroMagDriver_LLD1Ev), UNUSED)

<P><STRONG><a name="[2a2]"></a>TDevCtrl::TDevCtrl()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dev_ctrl.o(i._ZN8TDevCtrlC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_dev_ctrl_cpp_DevCtrl
</UL>

<P><STRONG><a name="[320]"></a>TDevCtrl::TDevCtrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dev_ctrl.o(i._ZN8TDevCtrlC1Ev), UNUSED)

<P><STRONG><a name="[a9]"></a>TDevCtrl::~TDevCtrl()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_ctrl.o(i._ZN8TDevCtrlD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> dev_ctrl.o(i.__sti___12_dev_ctrl_cpp_DevCtrl)
</UL>
<P><STRONG><a name="[321]"></a>TDevCtrl::~TDevCtrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dev_ctrl.o(i._ZN8TDevCtrlD1Ev), UNUSED)

<P><STRONG><a name="[267]"></a>TSettings::TSettings()</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_settings_cpp_Settings
</UL>

<P><STRONG><a name="[322]"></a>TSettings::TSettings__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsC1Ev), UNUSED)

<P><STRONG><a name="[aa]"></a>TSettings::~TSettings()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::~TModel()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.__sti___12_settings_cpp_Settings)
</UL>
<P><STRONG><a name="[323]"></a>TSettings::~TSettings__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, settings.o(i._ZN9TSettingsD1Ev), UNUSED)

<P><STRONG><a name="[244]"></a>TFlash::erase_page(unsigned) const</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flash_driver.o(i._ZNK6TFlash10erase_pageEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TFlash::erase_page(unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::clear_all_error() const
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_data(const unsigned char*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[245]"></a>TFlash::write_page(const unsigned char*, unsigned short, unsigned) const</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, flash_driver.o(i._ZNK6TFlash10write_pageEPKhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_data(const unsigned char*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_sets(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[291]"></a>TFlash::clear_all_error() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash_driver.o(i._ZNK6TFlash15clear_all_errorEv))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::erase_page(unsigned) const
</UL>

<P><STRONG><a name="[293]"></a>TFlash::prog(const unsigned*, unsigned, unsigned) const</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, flash_driver.o(i._ZNK6TFlash4progEPKjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::start_tmr() const
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::stop_tmr() const
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::clear_all_error() const
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_page(const unsigned char*, unsigned short, unsigned) const
</UL>

<P><STRONG><a name="[295]"></a>TFlash::stop_tmr() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash_driver.o(i._ZNK6TFlash8stop_tmrEv))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>

<P><STRONG><a name="[294]"></a>TFlash::start_tmr() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, flash_driver.o(i._ZNK6TFlash9start_tmrEv))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>

<P><STRONG><a name="[17d]"></a>TButton::read() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, button.o(i._ZNK7TButton4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPushButton(void*)
</UL>

<P><STRONG><a name="[23f]"></a>MPU_9250::TAccGyroMagDriver_HL::get_acc_data() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i._ZNK8MPU_925020TAccGyroMagDriver_HL12get_acc_dataEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::acquire_data(TSettings::TAccelData(&)[300])
</UL>

<P><STRONG><a name="[27a]"></a>MPU_9250::TAccGyroMagDriver_LL::get_acc_gyro_addr(MPU_9250::TLogicLevelAD0) const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu-9250_acc_gyro_mag_driver_ll.o(i._ZNK8MPU_925020TAccGyroMagDriver_LL17get_acc_gyro_addrENS_14TLogicLevelAD0E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPU_9250::TAccGyroMagDriver_LL::get_acc_gyro_addr(MPU_9250::TLogicLevelAD0) const
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::init_chip()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::check_id_acc_gyro()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::collect_acc_data()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_gyro()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::config_acc()
</UL>

<P><STRONG><a name="[d6]"></a>TSettings::chk_access(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings10chk_accessEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_access(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>TSettings::chk_mb_addr(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings11chk_mb_addrEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_mb_addr(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_mb_addr(short)
</UL>

<P><STRONG><a name="[25b]"></a>TSettings::chk_axis_rotate(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings15chk_axis_rotateEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_axis_rotate(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_buf_axis_rotate(unsigned char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_axis_rotate(unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_axis_rotate(unsigned char)
</UL>

<P><STRONG><a name="[25c]"></a>TSettings::chk_u_baud_rate(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings15chk_u_baud_rateEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_u_baud_rate(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_baud_rate(unsigned char)
</UL>

<P><STRONG><a name="[260]"></a>TSettings::chk_roll_bias_angle(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings19chk_roll_bias_angleEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_roll_bias_angle(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_roll_bias_angle(signed char)
</UL>

<P><STRONG><a name="[261]"></a>TSettings::chk_pitch_bias_angle(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings20chk_pitch_bias_angleEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_pitch_bias_angle(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pitch_bias_angle(signed char)
</UL>

<P><STRONG><a name="[262]"></a>TSettings::chk_thr(short) const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings7chk_thrEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_thr(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_thr(unsigned char)
</UL>

<P><STRONG><a name="[263]"></a>TSettings::chk_bias(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings8chk_biasEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_bias(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_bias(signed char)
</UL>

<P><STRONG><a name="[264]"></a>TSettings::chk_hyst(short) const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings8chk_hystEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_hyst(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hyst(unsigned char)
</UL>

<P><STRONG><a name="[d4]"></a>TSettings::chk_calib(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings9chk_calibEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_calib(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>TSettings::chk_u_par(short) const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(i._ZNK9TSettings9chk_u_parEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSettings::chk_u_par(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_par(unsigned char)
</UL>

<P><STRONG><a name="[1fc]"></a>std::pow(float, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mems.o(i._ZSt3powfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::pow(float, int) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[1fd]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mems.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[299]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[240]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::is_valid_data(const TSettings::TAccelData(&)[300])
</UL>

<P><STRONG><a name="[1fe]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[297]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
</UL>

<P><STRONG><a name="[324]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[1c3]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::read_open_angle(unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[298]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>

<P><STRONG><a name="[2a0]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[29b]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[29f]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[29e]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[29a]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[325]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[326]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[327]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[29d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[127]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[97]"></a>main</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; [local to main_cpp]::create_tasks() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDiscreteOut::init()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevDeterm::init_tmr()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevDeterm::is_dev()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetProgNum
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_semphrs()
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_mutexes()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_timers()
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_mx_gpio()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[121]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[2d4]"></a>pvPortMalloc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2e2]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2c5]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2ad]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2bf]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2dd]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[2b5]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[2c4]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2af]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2ae]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2b1]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2b3]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2be]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[2de]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2d6]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[2b6]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[2ce]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[164]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_to_master(void*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discrete_out(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_pc(void*)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::handle_frame(const unsigned char*, unsigned short)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::idle()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
</UL>

<P><STRONG><a name="[2d3]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2d9]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2d8]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[2da]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2e3]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2ab]"></a>vTaskStartScheduler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b8]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[11c]"></a>vTaskSwitchContext</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[207]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_63965102
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
</UL>

<P><STRONG><a name="[2dc]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[20d]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_mutexes()
</UL>

<P><STRONG><a name="[210]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_semphrs()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[177]"></a>xQueueGenericReceive</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLedCtrl(void*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coding_switch(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPushButton(void*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedssEEvRT_RKT0_
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_sample_valid_sign(TSettings::TValidSign)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_sample_valid_sign()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_accel_calib_sign()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_boot_mode_flag(TSettings::TBootModeFlag)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_process()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_prog_nbr(unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_prog_nbr()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_led_mode(TSettings::TLedMode)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_btn_mode(TSettings::TPress)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_led_mode()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_btn_mode()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_mb_addr(short)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_access(TSettings::TAccess)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_access()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::idle()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::acquire_data(TSettings::TAccelData(&)[300])
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_sens_axis_rotate(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::user_calib(short)
</UL>

<P><STRONG><a name="[2c2]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[173]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerCallback(void*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_uncalib_tmr(void*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_sw_tmr(void*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedssEEvRT_RKT0_
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_sample_valid_sign(TSettings::TValidSign)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_sample_valid_sign()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_accel_calib_sign()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_boot_mode_flag(TSettings::TBootModeFlag)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_process()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_prog_nbr(unsigned short)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_prog_nbr()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::handler_calib(short, bool*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_led_mode(TSettings::TLedMode)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_btn_mode(TSettings::TPress)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_led_mode()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_type()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_btn_mode()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_mb_addr(short)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_access(TSettings::TAccess)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_access()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::m_read_input_registers_complete()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_write_sens_axis_rotate(unsigned)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::my_write_start_meas_cmd(unsigned)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevHandlers::write_sens_axis_rotate(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::hc_ctrl()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[2e5]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[134]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_stop_active()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to modbus_link_cpp]::usart_int_handler(TUsartInt*)
</UL>

<P><STRONG><a name="[2e4]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[205]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2e1]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[17b]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coding_switch(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPushButton(void*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::dly_ctrl(void*&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::sample_ctrl(void*&)
</UL>

<P><STRONG><a name="[161]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2bd]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2d2]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2b9]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[20a]"></a>xTimerCreate</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_timers()
</UL>

<P><STRONG><a name="[2db]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[17c]"></a>xTimerGenericCommand</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coding_switch(void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base_to_sens(void*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPushButton(void*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::dly_ctrl(void*&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::sample_ctrl(void*&)
</UL>

<P><STRONG><a name="[1f5]"></a>xTimerIsTimerActive</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTimerIsTimerActive
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::dly_ctrl(void*&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::sample_ctrl(void*&)
</UL>

<P><STRONG><a name="[252]"></a>void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = void TModel::access_prot&lang;TBits, TBits&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_interconn(TInterconn)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_interconn()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_d_o_sets(TContact)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_d_o_sets()
</UL>

<P><STRONG><a name="[259]"></a>void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_flash_data()
</UL>

<P><STRONG><a name="[25f]"></a>void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sample_valid_sign(TSettings::TValidSign)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_communicate_byte()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_start_meas_cmd(TSettings::TMeas)
</UL>

<P><STRONG><a name="[24d]"></a>void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_base_pos_err(TSettings::TPosErr)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_base_pos_err()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_acc_calib(TSettings::TCalib)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_acc_calib()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_pos_err(TSettings::TPosErr)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_pos_err()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_base_mems(TSettings::TMainState)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_acc_calib(TSettings::TCalib)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_state()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_base_mems()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_state(TSettings::THC)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_state()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_mems(TSettings::TMainState)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_connect(TSettings::TConnect)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_mems()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_connect()
</UL>

<P><STRONG><a name="[257]"></a>_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_bias(signed char)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_pitch_bias_angle(signed char)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_roll_bias_angle(signed char)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pitch_bias_angle(signed char)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_roll_bias_angle(signed char)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_raw_pitch(signed char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_raw_roll(signed char)
</UL>

<P><STRONG><a name="[24e]"></a>_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIU8__packedffEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_open_angle(float)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_parameter(float)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pd_pressure(float)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_super(float)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_psw_admin(float)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_accel_z(float)
</UL>

<P><STRONG><a name="[24f]"></a>_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_par(unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hyst(unsigned char)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_thr(unsigned char)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_buf_axis_rotate(unsigned char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_axis_rotate(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_u_baud_rate(unsigned char)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_axis_rotate(unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_code_sw(unsigned char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_code_sw(unsigned char)
</UL>

<P><STRONG><a name="[256]"></a>_ZN6TModel11access_protIU8__packedssEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIU8__packedssEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIU8__packedssEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_my_angle(short)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sens_angle(short)
</UL>

<P><STRONG><a name="[254]"></a>_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_bias()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_pitch_bias_angle()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_roll_bias_angle()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_raw_pitch()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_raw_roll()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_pitch_bias_angle()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_roll_bias_angle()
</UL>

<P><STRONG><a name="[24b]"></a>_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_open_angle()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_accel_z()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_calib_parameter()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_pd_pressure()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_super()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_psw_admin()
</UL>

<P><STRONG><a name="[24c]"></a>_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_par()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hyst()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_thr()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_baud_rate_bit_to_sec()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_buf_axis_rotate()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_axis_rotate()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_baud_rate()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_axis_rotate()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_code_sw()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_mb_addr()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_code_sw()
</UL>

<P><STRONG><a name="[253]"></a>_ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, model.o(t._ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_ &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_angle()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_my_angle()
</UL>

<P><STRONG><a name="[296]"></a>bool TSettings::chk_param&lang;short&rang;(const TSettings::TRange&, T1) const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, settings.o(t._ZNK9TSettings9chk_paramIsEEbRKNS_6TRangeET_))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_u_par(short) const
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_calib(short) const
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_hyst(short) const
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_bias(short) const
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_thr(short) const
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_pitch_bias_angle(short) const
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_roll_bias_angle(short) const
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_u_baud_rate(short) const
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_axis_rotate(short) const
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_mb_addr(short) const
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::chk_access(short) const
</UL>

<P><STRONG><a name="[22c]"></a>T2 std::copy&lang;const unsigned char*, unsigned char*&rang;(T1, T1, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, logger_ctrl.o(t._ZSt4copyIPKhPhET0_T_S4_S3_))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to logger_ctrl_cpp]::buf_process(const TRec*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[19d]"></a>T2 std::copy&lang;unsigned char*, unsigned char*&rang;(T1, T1, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modbus_app.o(t._ZSt4copyIPhS0_ET0_T_S2_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_checking_request()
</UL>

<P><STRONG><a name="[203]"></a>void std::fill&lang;float*, unsigned&rang;(T1, T1, const T2&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mems.o(t._ZSt4fillIPfjEvT_S1_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mems_cpp]::mems_process()
</UL>

<P><STRONG><a name="[192]"></a>bool std::equal&lang;unsigned char*, const char*&rang;(T1, T1, T2)</STRONG> (Thumb, 68 bytes, Stack size 36 bytes, modbus_app.o(t._ZSt5equalIPhPKcEbT_S3_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bool std::equal&lang;unsigned char*, const char*&rang;(T1, T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::s_boot_mode(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1f6]"></a>bool std::equal&lang;unsigned char*, unsigned char*&rang;(T1, T1, T2)</STRONG> (Thumb, 68 bytes, Stack size 36 bytes, coding_switch.o(t._ZSt5equalIPhS0_EbT_S1_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bool std::equal&lang;unsigned char*, unsigned char*&rang;(T1, T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::sample_ctrl(void*&)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[106]"></a>__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu-9250_acc_gyro_mag_driver_hl.o(i.__sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___35_MPU_9250_acc_gyro_mag_driver_hl_cpp_f9f9292c &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_9250::TAccGyroMagDriver_HL::TAccGyroMagDriver_HL(const TI2C_HW&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu-9250_acc_gyro_mag_driver_hl.o(.init_array)
</UL>
<P><STRONG><a name="[242]"></a>[local to Relay_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, relay.o(i._ZN30_INTERNAL_9_Relay_cpp_6c3d9d8e22LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay::TRelay::TRelay(GPIO_TypeDef*, unsigned, unsigned, char*)
</UL>

<P><STRONG><a name="[107]"></a>__sti___10_Button_cpp_Btn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button.o(i.__sti___10_Button_cpp_Btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___10_Button_cpp_Btn &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TButton::TButton(const TPin&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.init_array)
</UL>
<P><STRONG><a name="[23d]"></a>[local to Led_cpp]::LL_GPIO_TogglePin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i._ZN23_INTERNAL_7_Led_cpp_Led17LL_GPIO_TogglePinEP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::toggle()
</UL>

<P><STRONG><a name="[23c]"></a>[local to Led_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(i._ZN23_INTERNAL_7_Led_cpp_Led22LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::init()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::off()
</UL>

<P><STRONG><a name="[108]"></a>__sti___7_Led_cpp_Led</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led.o(i.__sti___7_Led_cpp_Led))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___7_Led_cpp_Led &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLed::TLed(const TPin&, void**)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.init_array)
</UL>
<P><STRONG><a name="[109]"></a>__sti___14_angles_cnt_cpp_002624b5</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, angles_cnt.o(i.__sti___14_angles_cnt_cpp_002624b5))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___14_angles_cnt_cpp_002624b5 &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMedianFilter::TMedianFilter(short)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::TAngles()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> angles_cnt.o(.init_array)
</UL>
<P><STRONG><a name="[204]"></a>[local to main_cpp]::create_tasks()</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [local to main_cpp]::create_tasks() &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::check_create_task(long)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>[local to main_cpp]::init_mx_gpio()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510212init_mx_gpioEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = [local to main_cpp]::init_mx_gpio() &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[209]"></a>[local to main_cpp]::create_timers()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = [local to main_cpp]::create_timers() &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::check_create_timer(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>[local to main_cpp]::create_mutexes()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510214create_mutexesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [local to main_cpp]::create_mutexes() &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::check_create_mutex(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20f]"></a>[local to main_cpp]::create_semphrs()</STRONG> (Thumb, 604 bytes, Stack size 8 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510214create_semphrsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to main_cpp]::create_semphrs() &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::check_create_semphr(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>[local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
</UL>

<P><STRONG><a name="[206]"></a>[local to main_cpp]::check_create_task(long)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510217check_create_taskEl))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_tasks()
</UL>

<P><STRONG><a name="[16d]"></a>[local to main_cpp]::LL_RCC_MSI_IsReady()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
</UL>

<P><STRONG><a name="[20e]"></a>[local to main_cpp]::check_create_mutex(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_mutexes()
</UL>

<P><STRONG><a name="[20b]"></a>[local to main_cpp]::check_create_timer(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_timerEPv))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_timers()
</UL>

<P><STRONG><a name="[171]"></a>[local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
</UL>

<P><STRONG><a name="[211]"></a>[local to main_cpp]::check_create_semphr(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::create_semphrs()
</UL>

<P><STRONG><a name="[170]"></a>[local to main_cpp]::NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_sys_clk()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::init_ll()
</UL>

<P><STRONG><a name="[212]"></a>[local to main_cpp]::init_ll()</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, main.o(i._ZN29_INTERNAL_8_main_cpp_639651027init_llEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to main_cpp]::init_ll() &rArr; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_GetPriorityGrouping()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>__sti___8_main_cpp_63965102</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i.__sti___8_main_cpp_63965102))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __sti___8_main_cpp_63965102 &rArr; relay::TRelay::TRelay(GPIO_TypeDef*, unsigned, unsigned, char*) &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay::TRelay::TRelay(GPIO_TypeDef*, unsigned, unsigned, char*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[3]"></a>[local to hard_config_cpp]::LL_AHB2_GRP1_EnableClock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_config.o(i._ZN37_INTERNAL_15_hard_config_cpp_1a7f66ee24LL_AHB2_GRP1_EnableClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hard_config_cpp]::LL_AHB2_GRP1_EnableClock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_config.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>[local to hard_config_cpp]::LL_APB1_GRP1_EnableClock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_config.o(i._ZN37_INTERNAL_15_hard_config_cpp_1a7f66ee24LL_APB1_GRP1_EnableClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hard_config_cpp]::LL_APB1_GRP1_EnableClock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_config.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>[local to hard_config_cpp]::LL_APB2_GRP1_EnableClock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hard_config.o(i._ZN37_INTERNAL_15_hard_config_cpp_1a7f66ee24LL_APB2_GRP1_EnableClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hard_config_cpp]::LL_APB2_GRP1_EnableClock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hard_config.o(.data)
</UL>
<P><STRONG><a name="[18f]"></a>[local to dev_determ_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dev_determ.o(i._ZN36_INTERNAL_14_dev_determ_cpp_339485bd23LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevDeterm::init_tmr()
</UL>

<P><STRONG><a name="[10b]"></a>__sti___14_dev_determ_cpp_339485bd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dev_determ.o(i.__sti___14_dev_determ_cpp_339485bd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __sti___14_dev_determ_cpp_339485bd &rArr; TDevDeterm::TDevDeterm(const TPin&, TIM_TypeDef*) &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevDeterm::TDevDeterm(const TPin&, TIM_TypeDef*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_determ.o(.init_array)
</UL>
<P><STRONG><a name="[10c]"></a>__sti___9_model_cpp_Model</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, model.o(i.__sti___9_model_cpp_Model))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __sti___9_model_cpp_Model &rArr; TModel::TModel(void*&) &rArr; TFlash::write_sets(const unsigned char*, unsigned short) &rArr; TFlash::write_page(const unsigned char*, unsigned short, unsigned) const &rArr; TFlash::prog(const unsigned*, unsigned, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::TModel(void*&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(.init_array)
</UL>
<P><STRONG><a name="[26b]"></a>[local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usart_driver_.o(i._ZN39_INTERNAL_17_usart_driver__cpp_b612a17520LL_USART_SetBaudRateEP13USART_TypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to usart_driver__cpp]::LL_USART_SetBaudRate(USART_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_232(unsigned, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_485_hd(unsigned, unsigned)
</UL>

<P><STRONG><a name="[26c]"></a>[local to usart_driver__cpp]::LL_USART_ClearFlag_RTO(USART_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_driver_.o(i._ZN39_INTERNAL_17_usart_driver__cpp_b612a17522LL_USART_ClearFlag_RTOEP13USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::dis_eob_detect()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::en_eob_detect(unsigned char)
</UL>

<P><STRONG><a name="[248]"></a>[local to Flash_driver_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_driver.o(i._ZN38_INTERNAL_16_Flash_driver_cpp_d50a58b423LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::init_tmr()
</UL>

<P><STRONG><a name="[10d]"></a>__sti___16_Flash_driver_cpp_d50a58b4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_driver.o(i.__sti___16_Flash_driver_cpp_d50a58b4))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __sti___16_Flash_driver_cpp_d50a58b4 &rArr; TFlash::TFlash() &rArr; TFlash::init_tmr() &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::TFlash()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_driver.o(.init_array)
</UL>
<P><STRONG><a name="[232]"></a>[local to I2C_driver_cpp]::LL_I2C_Enable(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c113LL_I2C_EnableEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::i2c_hw_init()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13e]"></a>[local to I2C_driver_cpp]::dks_tc_active()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c113dks_tc_activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to I2C_driver_cpp]::dks_tc_active() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_GenerateStartCondition(I2C_TypeDef*)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferRequest(I2C_TypeDef*, unsigned)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetTransferSize(I2C_TypeDef*, unsigned)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_SetSlaveAddr(I2C_TypeDef*, unsigned)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_DisableIT_TX(I2C_TypeDef*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_DisableIT_TC(I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[230]"></a>[local to I2C_driver_cpp]::LL_I2C_Disable(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c114LL_I2C_DisableEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::i2c_hw_init()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13c]"></a>[local to I2C_driver_cpp]::dks_rxne_active()</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c115dks_rxne_activeEv))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>[local to I2C_driver_cpp]::dks_stop_active()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c115dks_stop_activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to I2C_driver_cpp]::dks_stop_active() &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_ClearFlag_STOP(I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>[local to I2C_driver_cpp]::dks_txis_active()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c115dks_txis_activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to I2C_driver_cpp]::dks_txis_active()
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_ClearFlag_STOP(I2C_TypeDef*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_TransmitData8(I2C_TypeDef*, unsigned char)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::LL_I2C_DisableIT_TX(I2C_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>[local to I2C_driver_cpp]::LL_I2C_DisableIT_TC(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c119LL_I2C_DisableIT_TCEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[226]"></a>[local to I2C_driver_cpp]::LL_I2C_DisableIT_TX(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c119LL_I2C_DisableIT_TXEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[223]"></a>[local to I2C_driver_cpp]::LL_I2C_SetSlaveAddr(I2C_TypeDef*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c119LL_I2C_SetSlaveAddrEP11I2C_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::start_transfer(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[22a]"></a>[local to I2C_driver_cpp]::LL_I2C_TransmitData8(I2C_TypeDef*, unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c120LL_I2C_TransmitData8EP11I2C_TypeDefh))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
</UL>

<P><STRONG><a name="[231]"></a>[local to I2C_driver_cpp]::LL_I2C_ClearFlag_ARLO(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c121LL_I2C_ClearFlag_ARLOEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[229]"></a>[local to I2C_driver_cpp]::LL_I2C_ClearFlag_STOP(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c121LL_I2C_ClearFlag_STOPEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_txis_active()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_stop_active()
</UL>

<P><STRONG><a name="[225]"></a>[local to I2C_driver_cpp]::LL_I2C_SetTransferSize(I2C_TypeDef*, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c122LL_I2C_SetTransferSizeEP11I2C_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::write_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_single_byte(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[224]"></a>[local to I2C_driver_cpp]::LL_I2C_SetTransferRequest(I2C_TypeDef*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c125LL_I2C_SetTransferRequestEP11I2C_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::start_transfer(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[228]"></a>[local to I2C_driver_cpp]::LL_I2C_GenerateStartCondition(I2C_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c129LL_I2C_GenerateStartConditionEP11I2C_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::start_transfer(unsigned char)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to I2C_driver_cpp]::dks_tc_active()
</UL>

<P><STRONG><a name="[235]"></a>[local to I2C_driver_cpp]::LL_I2C_SetMasterAddressingMode(I2C_TypeDef*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_driver.o(i._ZN36_INTERNAL_14_I2C_driver_cpp_0101a1c130LL_I2C_SetMasterAddressingModeEP11I2C_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::i2c_hw_init()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::TI2C::start_transfer(unsigned char)
</UL>

<P><STRONG><a name="[2d5]"></a>prvHeapInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heap_2.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[b7]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2bb]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2bc]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2c0]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[2c1]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2c8]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2c9]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2d1]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2ac]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2b0]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2b7]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2ba]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[b8]"></a>prvIdleTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2c3]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2b2]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[2e6]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2b4]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2d0]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2c6]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[2c7]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[2ca]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2cb]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2cd]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[2cc]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[2cf]"></a>prvSwitchTimerLists</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[b9]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[163]"></a>[local to modbus_link_cpp]::usart_int_handler(TUsartInt*)</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof17usart_int_handlerEP9TUsartInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to modbus_link_cpp]::usart_int_handler(TUsartInt*) &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>[local to modbus_link_cpp]::LL_DMA_ClearFlag_TC4(DMA_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC4EP11DMA_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> modbus_link.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>[local to modbus_link_cpp]::LL_DMA_ClearFlag_TC6(DMA_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC6EP11DMA_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> modbus_link.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>[local to modbus_link_cpp]::LL_DMA_ClearFlag_TC7(DMA_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC7EP11DMA_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> modbus_link.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>[local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::init_dma()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_handle()
</UL>

<P><STRONG><a name="[130]"></a>[local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::init_dma()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel6_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::stop_receive()
</UL>

<P><STRONG><a name="[ec]"></a>[local to modbus_link_cpp]::LL_AHB1_GRP1_EnableClock(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to modbus_link_cpp]::LL_AHB1_GRP1_EnableClock(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus_link.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>[local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, modbus_link.o(i._ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel6_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>__sti___17_coding_switch_cpp_CodeSw</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, coding_switch.o(i.__sti___17_coding_switch_cpp_CodeSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___17_coding_switch_cpp_CodeSw &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCodingSwitch::TCodingSwitch(const TDevAddr_HW(&)[4])
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coding_switch.o(.init_array)
</UL>
<P><STRONG><a name="[1f3]"></a>[local to discrete_out_cpp]::LL_GPIO_SetOutputPin(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, discrete_out.o(i._ZN32_INTERNAL_16_discrete_out_cpp_Do20LL_GPIO_SetOutputPinEP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDiscreteOut::closed()
</UL>

<P><STRONG><a name="[10f]"></a>__sti___16_discrete_out_cpp_Do</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, discrete_out.o(i.__sti___16_discrete_out_cpp_Do))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___16_discrete_out_cpp_Do &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDiscreteOut::TDiscreteOut(const TPin&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> discrete_out.o(.init_array)
</UL>
<P><STRONG><a name="[189]"></a>[local to mems_cpp]::mems_process()</STRONG> (Thumb, 520 bytes, Stack size 80 bytes, mems.o(i._ZN25_INTERNAL_8_mems_cpp_Mems12mems_processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = [local to mems_cpp]::mems_process() &rArr; TMems::acquire_data(TSettings::TAccelData(&)[300]) &rArr; MPU_9250::TAccGyroMagDriver_HL::collect_acc_data() &rArr; I2C::TI2C::read_burst(unsigned char*, unsigned char, unsigned char, unsigned char) &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sample_valid_sign(TSettings::TValidSign)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_raw_pitch(signed char)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_raw_roll(signed char)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_accel_z(float)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::fill&lang;float*, unsigned&rang;(T1, T1, const T2&)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::is_valid_data(const TSettings::TAccelData(&)[300])
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::acquire_data(TSettings::TAccelData(&)[300])
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::cnt_average(const TSettings::TAccelData(&)[300], TSettings::TAccelData&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mems(void*)
</UL>

<P><STRONG><a name="[110]"></a>__sti___8_mems_cpp_Mems</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mems.o(i.__sti___8_mems_cpp_Mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___8_mems_cpp_Mems &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMems::TMems(MPU_9250::TAccGyroMagDriver_HL&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mems.o(.init_array)
</UL>
<P><STRONG><a name="[111]"></a>__sti___12_settings_cpp_Settings</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(i.__sti___12_settings_cpp_Settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___12_settings_cpp_Settings &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSettings::TSettings()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(.init_array)
</UL>
<P><STRONG><a name="[112]"></a>__sti___14_base_to_pc_cpp_BaseToPc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, base_to_pc.o(i.__sti___14_base_to_pc_cpp_BaseToPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___14_base_to_pc_cpp_BaseToPc &rArr; TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**) &rArr; TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_to_pc.o(.init_array)
</UL>
<P><STRONG><a name="[f5]"></a>[local to base_to_sens_cpp]::wr_axis_rotate()</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba6814wr_axis_rotateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to base_to_sens_cpp]::wr_axis_rotate() &rArr; TModbusLink::start_transmit(unsigned char) &rArr; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::get_addr()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_to_sens.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>[local to base_to_sens_cpp]::acc_rdy()</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba687acc_rdyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to base_to_sens_cpp]::acc_rdy() &rArr; TModbusLink::start_transmit(unsigned char) &rArr; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::get_addr()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_to_sens.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>[local to base_to_sens_cpp]::pd_poll()</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba687pd_pollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to base_to_sens_cpp]::pd_poll() &rArr; TModbusLink::start_transmit(unsigned char) &rArr; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_to_sens.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>[local to base_to_sens_cpp]::read_meas()</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, base_to_sens.o(i._ZN38_INTERNAL_16_base_to_sens_cpp_e027ba689read_measEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to base_to_sens_cpp]::read_meas() &rArr; TModbusLink::start_transmit(unsigned char) &rArr; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::get_addr()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::start_transmit(unsigned char)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_to_sens.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>__sti___16_base_to_sens_cpp_e027ba68</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, base_to_sens.o(i.__sti___16_base_to_sens_cpp_e027ba68))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___16_base_to_sens_cpp_e027ba68 &rArr; TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**) &rArr; TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> base_to_sens.o(.init_array)
</UL>
<P><STRONG><a name="[213]"></a>[local to dev_ctrl_cpp]::user_calib(short)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [local to dev_ctrl_cpp]::user_calib(short) &rArr; TModel::set_bias(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_bias(signed char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
</UL>

<P><STRONG><a name="[214]"></a>[local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::user_calib(short)
</UL>

<P><STRONG><a name="[18a]"></a>[local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl13factory_calibEN9TSettings8TDevTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = [local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType) &rArr; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType) &rArr; TModel::set_pitch_bias_angle(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_accel_calib_sign()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_ctrl(void*)
</UL>

<P><STRONG><a name="[217]"></a>[local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl14sens_dev_stageEPKPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned) &rArr; TModel::set_connect(TSettings::TConnect) &rArr; void TModel::access_prot&lang;TSettings::TState, TSettings::TState&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_connect(TSettings::TConnect)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
</UL>

<P><STRONG><a name="[219]"></a>[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)</STRONG> (Thumb, 256 bytes, Stack size 120 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl15open_angle_ctrlEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = [local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*) &rArr; [local to dev_ctrl_cpp]::user_calib(short) &rArr; TModel::set_bias(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_open_angle()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_open_angle()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hyst()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_thr()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_axis_rotate()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_pos_err(TSettings::TPosErr)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_pos_err()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_state(TSettings::THC)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_state()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_d_o_sets()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::user_calib(short)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::base_ctrl()
</UL>

<P><STRONG><a name="[216]"></a>[local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType) &rArr; TModel::set_pitch_bias_angle(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_my_angle()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_pitch_bias_angle(signed char)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_roll_bias_angle(signed char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_calib_process(TSettings::TCalibProcess)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_base_mems(TSettings::TMainState)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType)
</UL>

<P><STRONG><a name="[f7]"></a>[local to dev_ctrl_cpp]::hc_ctrl()</STRONG> (Thumb, 342 bytes, Stack size 112 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7hc_ctrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = [local to dev_ctrl_cpp]::hc_ctrl() &rArr; TModel::set_sample_valid_sign(TSettings::TValidSign) &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_my_angle()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_sample_valid_sign(TSettings::TValidSign)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sample_valid_sign()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_start_meas_cmd(TSettings::TMeas)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_start_meas_cmd()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_axis_rotate()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_pos_err(TSettings::TPosErr)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_pos_err()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_interconn()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_state(TSettings::THC)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_state()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_d_o_sets()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_hc_mems(TSettings::TMainState)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDiscreteOut::open()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ctrl.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>[local to dev_ctrl_cpp]::base_ctrl()</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, dev_ctrl.o(i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = [local to dev_ctrl_cpp]::base_ctrl() &rArr; [local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*) &rArr; [local to dev_ctrl_cpp]::user_calib(short) &rArr; TModel::set_bias(signed char) &rArr; TModel::set_flash_data() &rArr; void TModel::access_prot&lang;TSettings::TFlashData, TSettings::TFlashData&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_sample_valid_sign()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sample_valid_sign()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_start_meas_cmd(TSettings::TMeas)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_base_mems(TSettings::TMainState)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ctrl.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>__sti___12_dev_ctrl_cpp_DevCtrl</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dev_ctrl.o(i.__sti___12_dev_ctrl_cpp_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __sti___12_dev_ctrl_cpp_DevCtrl &rArr; __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TDevCtrl::TDevCtrl()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_ctrl.o(.init_array)
</UL>
<P><STRONG><a name="[180]"></a>[local to sens_to_master_cpp]::addr_determ()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sens_to_master.o(i._ZN40_INTERNAL_18_sens_to_master_cpp_2046794911addr_determEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [local to sens_to_master_cpp]::addr_determ() &rArr; TUsart::set_sets(const TUsart::TSets&) &rArr; TUsart::hw_init(unsigned char) &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_u_baud_rate_bit_to_sec()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_interconn()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_mb_addr()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TUsart::set_sets(const TUsart::TSets&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusLink::set_addr(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_to_master(void*)
</UL>

<P><STRONG><a name="[115]"></a>__sti___18_sens_to_master_cpp_20467949</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sens_to_master.o(i.__sti___18_sens_to_master_cpp_20467949))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___18_sens_to_master_cpp_20467949 &rArr; TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**) &rArr; TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**) &rArr; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModbusApp::TModbusApp(const TUsart_HW&, TModbusLink::TProcType, TDevHandlers::TPduHandler*, void**, void**)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sens_to_master.o(.init_array)
</UL>
<P><STRONG><a name="[179]"></a>[local to logger_ctrl_cpp]::buf_process(const TRec*, unsigned char*, unsigned short)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, logger_ctrl.o(i._ZN37_INTERNAL_15_logger_ctrl_cpp_9246bc9111buf_processEPK4TRecPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [local to logger_ctrl_cpp]::buf_process(const TRec*, unsigned char*, unsigned short) &rArr; TModel::set_led_mode(TSettings::TLedMode) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_led_mode(TSettings::TLedMode)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::set_btn_mode(TSettings::TPress)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFlash::write_data(const unsigned char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;const unsigned char*, unsigned char*&rang;(T1, T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
</UL>

<P><STRONG><a name="[178]"></a>[local to logger_ctrl_cpp]::get_data(TRec&, TModel&)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, logger_ctrl.o(i._ZN37_INTERNAL_15_logger_ctrl_cpp_9246bc918get_dataER4TRecR6TModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [local to logger_ctrl_cpp]::get_data(TRec&, TModel&) &rArr; TModel::get_sample_valid_sign() &rArr; TModel::get_communicate_byte() &rArr; void TModel::access_prot&lang;TSettings::TCommunicate, TSettings::TCommunicate&rang;(T1&, const T2&) &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_angle()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_open_angle()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_my_angle()
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sens_sample_valid_sign()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_sample_valid_sign()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_hc_code_sw()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_dev_state()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TModel::get_code_sw()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_ctrl(void*)
</UL>

<P><STRONG><a name="[101]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC1(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC1EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC2(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC2EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC3(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC3EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC1(TIM_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC1EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC2(TIM_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC2EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC3(TIM_TypeDef*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC3EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC1(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC1EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC2(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC2EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>[local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC3(TIM_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, line_wrapper_spl_to_ll.o(i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC3EP11TIM_TypeDef))
<BR>[Address Reference Count : 1]<UL><LI> line_wrapper_spl_to_ll.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sensline.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableINT
</UL>

<P><STRONG><a name="[13a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sensline.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableINT
</UL>

<P><STRONG><a name="[140]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32l4xx_ll_dma.o(i.LL_DMA_SetPeriphRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[142]"></a>LL_EXTI_DisableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[148]"></a>LL_EXTI_DisableEvent_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableEvent_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[144]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[14a]"></a>LL_EXTI_DisableIT_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_DisableIT_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[145]"></a>LL_EXTI_EnableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[14b]"></a>LL_EXTI_EnableEvent_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableEvent_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[147]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[14d]"></a>LL_EXTI_EnableFallingTrig_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableFallingTrig_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[143]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[149]"></a>LL_EXTI_EnableIT_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableIT_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[146]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[14c]"></a>LL_EXTI_EnableRisingTrig_32_63</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_ll_exti.o(i.LL_EXTI_EnableRisingTrig_32_63))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[154]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[155]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[156]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[15a]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[15b]"></a>LL_RCC_MSI_GetRangeAfterStandby</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_MSI_GetRangeAfterStandby))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[159]"></a>LL_RCC_MSI_IsEnabledRangeSelect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_MSI_IsEnabledRangeSelect))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[15e]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[15d]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[15f]"></a>LL_RCC_PLL_GetN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_rcc.o(i.LL_RCC_PLL_GetN))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[158]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_usart.o(i.LL_USART_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
