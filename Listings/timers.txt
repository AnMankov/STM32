; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\timers.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timers.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\timers.crf Source\RTOS\src\timers.c]
                          THUMB

                          AREA ||i.pcTimerGetName||, CODE, READONLY, ALIGN=1

                  pcTimerGetName PROC
;;;488    
;;;489    const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  4601              MOV      r1,r0
;;;490    {
;;;491    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000002  460a              MOV      r2,r1
;;;492    
;;;493    	configASSERT( xTimer );
000004  b951              CBNZ     r1,|L1.28|
000006  bf00              NOP      
000008  2030              MOVS     r0,#0x30
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
000018  bf00              NOP      
                  |L1.26|
00001a  e7fe              B        |L1.26|
                  |L1.28|
;;;494    	return pxTimer->pcTimerName;
00001c  6810              LDR      r0,[r2,#0]
;;;495    }
00001e  4770              BX       lr
;;;496    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvCheckForValidListAndQueue||, CODE, READONLY, ALIGN=2

                  prvCheckForValidListAndQueue PROC
;;;929    
;;;930    static void prvCheckForValidListAndQueue( void )
000000  b510              PUSH     {r4,lr}
;;;931    {
;;;932    	/* Check that the list from which active timers are referenced, and the
;;;933    	queue used to communicate with the timer service, have been
;;;934    	initialised. */
;;;935    	taskENTER_CRITICAL();
000002  f7fffffe          BL       vPortEnterCritical
;;;936    	{
;;;937    		if( xTimerQueue == NULL )
000006  4810              LDR      r0,|L2.72|
000008  6800              LDR      r0,[r0,#0]  ; xTimerQueue
00000a  b9d0              CBNZ     r0,|L2.66|
;;;938    		{
;;;939    			vListInitialise( &xActiveTimerList1 );
00000c  480f              LDR      r0,|L2.76|
00000e  f7fffffe          BL       vListInitialise
;;;940    			vListInitialise( &xActiveTimerList2 );
000012  480f              LDR      r0,|L2.80|
000014  f7fffffe          BL       vListInitialise
;;;941    			pxCurrentTimerList = &xActiveTimerList1;
000018  480c              LDR      r0,|L2.76|
00001a  490e              LDR      r1,|L2.84|
00001c  6008              STR      r0,[r1,#0]  ; pxCurrentTimerList
;;;942    			pxOverflowTimerList = &xActiveTimerList2;
00001e  480c              LDR      r0,|L2.80|
000020  490d              LDR      r1,|L2.88|
000022  6008              STR      r0,[r1,#0]  ; pxOverflowTimerList
;;;943    
;;;944    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;945    			{
;;;946    				/* The timer queue is allocated statically in case
;;;947    				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
;;;948    				static StaticQueue_t xStaticTimerQueue;
;;;949    				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];
;;;950    
;;;951    				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
;;;952    			}
;;;953    			#else
;;;954    			{
;;;955    				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
000024  2200              MOVS     r2,#0
000026  210c              MOVS     r1,#0xc
000028  200a              MOVS     r0,#0xa
00002a  f7fffffe          BL       xQueueGenericCreate
00002e  4906              LDR      r1,|L2.72|
000030  6008              STR      r0,[r1,#0]  ; xTimerQueue
;;;956    			}
;;;957    			#endif
;;;958    
;;;959    			#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;960    			{
;;;961    				if( xTimerQueue != NULL )
000032  4608              MOV      r0,r1
000034  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000036  b120              CBZ      r0,|L2.66|
;;;962    				{
;;;963    					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
000038  a108              ADR      r1,|L2.92|
00003a  4803              LDR      r0,|L2.72|
00003c  6800              LDR      r0,[r0,#0]  ; xTimerQueue
00003e  f7fffffe          BL       vQueueAddToRegistry
                  |L2.66|
;;;964    				}
;;;965    				else
;;;966    				{
;;;967    					mtCOVERAGE_TEST_MARKER();
;;;968    				}
;;;969    			}
;;;970    			#endif /* configQUEUE_REGISTRY_SIZE */
;;;971    		}
;;;972    		else
;;;973    		{
;;;974    			mtCOVERAGE_TEST_MARKER();
;;;975    		}
;;;976    	}
;;;977    	taskEXIT_CRITICAL();
000042  f7fffffe          BL       vPortExitCritical
;;;978    }
000046  bd10              POP      {r4,pc}
;;;979    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.72|
                          DCD      xTimerQueue
                  |L2.76|
                          DCD      xActiveTimerList1
                  |L2.80|
                          DCD      xActiveTimerList2
                  |L2.84|
                          DCD      pxCurrentTimerList
                  |L2.88|
                          DCD      pxOverflowTimerList
                  |L2.92|
00005c  546d7251          DCB      "TmrQ",0
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.prvGetNextExpireTime||, CODE, READONLY, ALIGN=2

                  prvGetNextExpireTime PROC
;;;633    
;;;634    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
000000  4601              MOV      r1,r0
;;;635    {
;;;636    TickType_t xNextExpireTime;
;;;637    
;;;638    	/* Timers are listed in expiry time order, with the head of the list
;;;639    	referencing the task that will expire first.  Obtain the time at which
;;;640    	the timer with the nearest expiry time will expire.  If there are no
;;;641    	active timers then just set the next expire time to 0.  That will cause
;;;642    	this task to unblock when the tick count overflows, at which point the
;;;643    	timer lists will be switched and the next expiry time can be
;;;644    	re-assessed.  */
;;;645    	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
000002  4a08              LDR      r2,|L3.36|
000004  6812              LDR      r2,[r2,#0]  ; pxCurrentTimerList
000006  6812              LDR      r2,[r2,#0]
000008  b90a              CBNZ     r2,|L3.14|
00000a  2201              MOVS     r2,#1
00000c  e000              B        |L3.16|
                  |L3.14|
00000e  2200              MOVS     r2,#0
                  |L3.16|
000010  600a              STR      r2,[r1,#0]
;;;646    	if( *pxListWasEmpty == pdFALSE )
000012  680a              LDR      r2,[r1,#0]
000014  b922              CBNZ     r2,|L3.32|
;;;647    	{
;;;648    		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
000016  4a03              LDR      r2,|L3.36|
000018  6812              LDR      r2,[r2,#0]  ; pxCurrentTimerList
00001a  68d2              LDR      r2,[r2,#0xc]
00001c  6810              LDR      r0,[r2,#0]
00001e  e000              B        |L3.34|
                  |L3.32|
;;;649    	}
;;;650    	else
;;;651    	{
;;;652    		/* Ensure the task unblocks when the tick count rolls over. */
;;;653    		xNextExpireTime = ( TickType_t ) 0U;
000020  2000              MOVS     r0,#0
                  |L3.34|
;;;654    	}
;;;655    
;;;656    	return xNextExpireTime;
;;;657    }
000022  4770              BX       lr
;;;658    /*-----------------------------------------------------------*/
                          ENDP

                  |L3.36|
                          DCD      pxCurrentTimerList

                          AREA ||i.prvInitialiseNewTimer||, CODE, READONLY, ALIGN=1

                  prvInitialiseNewTimer PROC
;;;387    
;;;388    static void prvInitialiseNewTimer(	const char * const pcTimerName,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;389    									const TickType_t xTimerPeriodInTicks,
;;;390    									const UBaseType_t uxAutoReload,
;;;391    									void * const pvTimerID,
;;;392    									TimerCallbackFunction_t pxCallbackFunction,
;;;393    									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;394    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd9408          LDRD     r9,r4,[sp,#0x20]
;;;395    	/* 0 is not a valid value for xTimerPeriodInTicks. */
;;;396    	configASSERT( ( xTimerPeriodInTicks > 0 ) );
000010  b10d              CBZ      r5,|L4.22|
000012  2001              MOVS     r0,#1
000014  e000              B        |L4.24|
                  |L4.22|
000016  2000              MOVS     r0,#0
                  |L4.24|
000018  b950              CBNZ     r0,|L4.48|
00001a  bf00              NOP      
00001c  2030              MOVS     r0,#0x30
00001e  f3808811          MSR      BASEPRI,r0
000022  f3bf8f4f          DSB      
000026  f3bf8f6f          ISB      
00002a  bf00              NOP      
00002c  bf00              NOP      
                  |L4.46|
00002e  e7fe              B        |L4.46|
                  |L4.48|
;;;397    
;;;398    	if( pxNewTimer != NULL )
000030  b15c              CBZ      r4,|L4.74|
;;;399    	{
;;;400    		/* Ensure the infrastructure used by the timer service task has been
;;;401    		created/initialised. */
;;;402    		prvCheckForValidListAndQueue();
000032  f7fffffe          BL       prvCheckForValidListAndQueue
;;;403    
;;;404    		/* Initialise the timer structure members using the function
;;;405    		parameters. */
;;;406    		pxNewTimer->pcTimerName = pcTimerName;
000036  6026              STR      r6,[r4,#0]
;;;407    		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
000038  61a5              STR      r5,[r4,#0x18]
;;;408    		pxNewTimer->uxAutoReload = uxAutoReload;
00003a  61e7              STR      r7,[r4,#0x1c]
;;;409    		pxNewTimer->pvTimerID = pvTimerID;
00003c  f8c48020          STR      r8,[r4,#0x20]
;;;410    		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
000040  f8c49024          STR      r9,[r4,#0x24]
;;;411    		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
000044  1d20              ADDS     r0,r4,#4
000046  f7fffffe          BL       vListInitialiseItem
                  |L4.74|
;;;412    		traceTIMER_CREATE( pxNewTimer );
;;;413    	}
;;;414    }
00004a  e8bd87f0          POP      {r4-r10,pc}
;;;415    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInsertTimerInActiveList||, CODE, READONLY, ALIGN=2

                  prvInsertTimerInActiveList PROC
;;;682    
;;;683    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;684    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;685    BaseType_t xProcessTimerNow = pdFALSE;
00000c  f04f0800          MOV      r8,#0
;;;686    
;;;687    	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
000010  6065              STR      r5,[r4,#4]
;;;688    	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000012  6124              STR      r4,[r4,#0x10]
;;;689    
;;;690    	if( xNextExpiryTime <= xTimeNow )
000014  42b5              CMP      r5,r6
000016  d80c              BHI      |L5.50|
;;;691    	{
;;;692    		/* Has the expiry time elapsed between the command to start/reset a
;;;693    		timer was issued, and the time the command was processed? */
;;;694    		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000018  1bf0              SUBS     r0,r6,r7
00001a  69a1              LDR      r1,[r4,#0x18]
00001c  4288              CMP      r0,r1
00001e  d302              BCC      |L5.38|
;;;695    		{
;;;696    			/* The time between a command being issued and the command being
;;;697    			processed actually exceeds the timers period.  */
;;;698    			xProcessTimerNow = pdTRUE;
000020  f04f0801          MOV      r8,#1
000024  e011              B        |L5.74|
                  |L5.38|
;;;699    		}
;;;700    		else
;;;701    		{
;;;702    			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
000026  1d21              ADDS     r1,r4,#4
000028  4809              LDR      r0,|L5.80|
00002a  6800              LDR      r0,[r0,#0]  ; pxOverflowTimerList
00002c  f7fffffe          BL       vListInsert
000030  e00b              B        |L5.74|
                  |L5.50|
;;;703    		}
;;;704    	}
;;;705    	else
;;;706    	{
;;;707    		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
000032  42be              CMP      r6,r7
000034  d204              BCS      |L5.64|
000036  42bd              CMP      r5,r7
000038  d302              BCC      |L5.64|
;;;708    		{
;;;709    			/* If, since the command was issued, the tick count has overflowed
;;;710    			but the expiry time has not, then the timer must have already passed
;;;711    			its expiry time and should be processed immediately. */
;;;712    			xProcessTimerNow = pdTRUE;
00003a  f04f0801          MOV      r8,#1
00003e  e004              B        |L5.74|
                  |L5.64|
;;;713    		}
;;;714    		else
;;;715    		{
;;;716    			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
000040  1d21              ADDS     r1,r4,#4
000042  4804              LDR      r0,|L5.84|
000044  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
000046  f7fffffe          BL       vListInsert
                  |L5.74|
;;;717    		}
;;;718    	}
;;;719    
;;;720    	return xProcessTimerNow;
00004a  4640              MOV      r0,r8
;;;721    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;722    /*-----------------------------------------------------------*/
                          ENDP

                  |L5.80|
                          DCD      pxOverflowTimerList
                  |L5.84|
                          DCD      pxCurrentTimerList

                          AREA ||i.prvProcessExpiredTimer||, CODE, READONLY, ALIGN=2

                  prvProcessExpiredTimer PROC
;;;497    
;;;498    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
000000  b5f8              PUSH     {r3-r7,lr}
;;;499    {
000002  4605              MOV      r5,r0
000004  460f              MOV      r7,r1
;;;500    BaseType_t xResult;
;;;501    Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
000006  4816              LDR      r0,|L6.96|
000008  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  68c4              LDR      r4,[r0,#0xc]
;;;502    
;;;503    	/* Remove the timer from the list of active timers.  A check has already
;;;504    	been performed to ensure the list is not empty. */
;;;505    	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
;;;506    	traceTIMER_EXPIRED( pxTimer );
;;;507    
;;;508    	/* If the timer is an auto reload timer then calculate the next
;;;509    	expiry time and re-insert the timer in the list of active timers. */
;;;510    	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
000014  69e0              LDR      r0,[r4,#0x1c]
000016  2801              CMP      r0,#1
000018  d11d              BNE      |L6.86|
;;;511    	{
;;;512    		/* The timer is inserted into a list using a time relative to anything
;;;513    		other than the current time.  It will therefore be inserted into the
;;;514    		correct list relative to the time this task thinks it is now. */
;;;515    		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
00001a  69a0              LDR      r0,[r4,#0x18]
00001c  1941              ADDS     r1,r0,r5
00001e  462b              MOV      r3,r5
000020  463a              MOV      r2,r7
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       prvInsertTimerInActiveList
000028  b1a8              CBZ      r0,|L6.86|
;;;516    		{
;;;517    			/* The timer expired before it was added to the active timer
;;;518    			list.  Reload it now.  */
;;;519    			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
00002a  2000              MOVS     r0,#0
00002c  4603              MOV      r3,r0
00002e  462a              MOV      r2,r5
000030  4601              MOV      r1,r0
000032  9000              STR      r0,[sp,#0]
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       xTimerGenericCommand
00003a  4606              MOV      r6,r0
;;;520    			configASSERT( xResult );
00003c  b956              CBNZ     r6,|L6.84|
00003e  bf00              NOP      
000040  2030              MOVS     r0,#0x30
000042  f3808811          MSR      BASEPRI,r0
000046  f3bf8f4f          DSB      
00004a  f3bf8f6f          ISB      
00004e  bf00              NOP      
000050  bf00              NOP      
                  |L6.82|
000052  e7fe              B        |L6.82|
                  |L6.84|
;;;521    			( void ) xResult;
000054  bf00              NOP      
                  |L6.86|
;;;522    		}
;;;523    		else
;;;524    		{
;;;525    			mtCOVERAGE_TEST_MARKER();
;;;526    		}
;;;527    	}
;;;528    	else
;;;529    	{
;;;530    		mtCOVERAGE_TEST_MARKER();
;;;531    	}
;;;532    
;;;533    	/* Call the timer callback. */
;;;534    	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
000056  4620              MOV      r0,r4
000058  6a61              LDR      r1,[r4,#0x24]
00005a  4788              BLX      r1
;;;535    }
00005c  bdf8              POP      {r3-r7,pc}
;;;536    /*-----------------------------------------------------------*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      pxCurrentTimerList

                          AREA ||i.prvProcessReceivedCommands||, CODE, READONLY, ALIGN=2

                  prvProcessReceivedCommands PROC
;;;723    
;;;724    static void	prvProcessReceivedCommands( void )
000000  b570              PUSH     {r4-r6,lr}
;;;725    {
000002  b086              SUB      sp,sp,#0x18
;;;726    DaemonTaskMessage_t xMessage;
;;;727    Timer_t *pxTimer;
;;;728    BaseType_t xTimerListsWereSwitched, xResult;
;;;729    TickType_t xTimeNow;
;;;730    
;;;731    	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
000004  e06a              B        |L7.220|
                  |L7.6|
;;;732    	{
;;;733    		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
;;;734    		{
;;;735    			/* Negative commands are pended function calls rather than timer
;;;736    			commands. */
;;;737    			if( xMessage.xMessageID < ( BaseType_t ) 0 )
;;;738    			{
;;;739    				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
;;;740    
;;;741    				/* The timer uses the xCallbackParameters member to request a
;;;742    				callback be executed.  Check the callback is not NULL. */
;;;743    				configASSERT( pxCallback );
;;;744    
;;;745    				/* Call the function. */
;;;746    				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
;;;747    			}
;;;748    			else
;;;749    			{
;;;750    				mtCOVERAGE_TEST_MARKER();
;;;751    			}
;;;752    		}
;;;753    		#endif /* INCLUDE_xTimerPendFunctionCall */
;;;754    
;;;755    		/* Commands that are positive are timer commands rather than pended
;;;756    		function calls. */
;;;757    		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
000006  9803              LDR      r0,[sp,#0xc]
000008  2800              CMP      r0,#0
00000a  db67              BLT      |L7.220|
;;;758    		{
;;;759    			/* The messages uses the xTimerParameters member to work on a
;;;760    			software timer. */
;;;761    			pxTimer = xMessage.u.xTimerParameters.pxTimer;
00000c  9c05              LDR      r4,[sp,#0x14]
;;;762    
;;;763    			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
00000e  6960              LDR      r0,[r4,#0x14]
000010  b908              CBNZ     r0,|L7.22|
000012  2001              MOVS     r0,#1
000014  e000              B        |L7.24|
                  |L7.22|
000016  2000              MOVS     r0,#0
                  |L7.24|
000018  b910              CBNZ     r0,|L7.32|
;;;764    			{
;;;765    				/* The timer is in a list, remove it. */
;;;766    				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
00001a  1d20              ADDS     r0,r4,#4
00001c  f7fffffe          BL       uxListRemove
                  |L7.32|
;;;767    			}
;;;768    			else
;;;769    			{
;;;770    				mtCOVERAGE_TEST_MARKER();
;;;771    			}
;;;772    
;;;773    			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageValue );
;;;774    
;;;775    			/* In this case the xTimerListsWereSwitched parameter is not used, but
;;;776    			it must be present in the function call.  prvSampleTimeNow() must be
;;;777    			called after the message is received from xTimerQueue so there is no
;;;778    			possibility of a higher priority task adding a message to the message
;;;779    			queue with a time that is ahead of the timer daemon task (because it
;;;780    			pre-empted the timer daemon task after the xTimeNow value was set). */
;;;781    			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       prvSampleTimeNow
000026  4605              MOV      r5,r0
;;;782    
;;;783    			switch( xMessage.xMessageID )
000028  9803              LDR      r0,[sp,#0xc]
00002a  280a              CMP      r0,#0xa
00002c  d254              BCS      |L7.216|
00002e  e8dff000          TBB      [pc,r0]
000032  0905              DCB      0x09,0x05
000034  0731334f          DCB      0x07,0x31,0x33,0x4f
000038  06083234          DCB      0x06,0x08,0x32,0x34
;;;784    			{
;;;785    				case tmrCOMMAND_START :
;;;786    			    case tmrCOMMAND_START_FROM_ISR :
00003c  bf00              NOP      
;;;787    			    case tmrCOMMAND_RESET :
00003e  bf00              NOP      
;;;788    			    case tmrCOMMAND_RESET_FROM_ISR :
000040  bf00              NOP      
;;;789    				case tmrCOMMAND_START_DONT_TRACE :
000042  bf00              NOP      
;;;790    					/* Start or restart a timer. */
;;;791    					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
000044  9804              LDR      r0,[sp,#0x10]
000046  69a2              LDR      r2,[r4,#0x18]
000048  1881              ADDS     r1,r0,r2
00004a  4603              MOV      r3,r0
00004c  462a              MOV      r2,r5
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       prvInsertTimerInActiveList
000054  b1e8              CBZ      r0,|L7.146|
;;;792    					{
;;;793    						/* The timer expired before it was added to the active
;;;794    						timer list.  Process it now. */
;;;795    						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
000056  4620              MOV      r0,r4
000058  6a61              LDR      r1,[r4,#0x24]
00005a  4788              BLX      r1
;;;796    						traceTIMER_EXPIRED( pxTimer );
;;;797    
;;;798    						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
00005c  69e0              LDR      r0,[r4,#0x1c]
00005e  2801              CMP      r0,#1
000060  d117              BNE      |L7.146|
;;;799    						{
;;;800    							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
000062  2000              MOVS     r0,#0
000064  9000              STR      r0,[sp,#0]
000066  9804              LDR      r0,[sp,#0x10]
000068  69a1              LDR      r1,[r4,#0x18]
00006a  1842              ADDS     r2,r0,r1
00006c  2300              MOVS     r3,#0
00006e  4619              MOV      r1,r3
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       xTimerGenericCommand
000076  4606              MOV      r6,r0
;;;801    							configASSERT( xResult );
000078  b956              CBNZ     r6,|L7.144|
00007a  bf00              NOP      
00007c  2030              MOVS     r0,#0x30
00007e  f3808811          MSR      BASEPRI,r0
000082  f3bf8f4f          DSB      
000086  f3bf8f6f          ISB      
00008a  bf00              NOP      
00008c  bf00              NOP      
                  |L7.142|
00008e  e7fe              B        |L7.142|
                  |L7.144|
;;;802    							( void ) xResult;
000090  bf00              NOP      
                  |L7.146|
;;;803    						}
;;;804    						else
;;;805    						{
;;;806    							mtCOVERAGE_TEST_MARKER();
;;;807    						}
;;;808    					}
;;;809    					else
;;;810    					{
;;;811    						mtCOVERAGE_TEST_MARKER();
;;;812    					}
;;;813    					break;
000092  e022              B        |L7.218|
;;;814    
;;;815    				case tmrCOMMAND_STOP :
;;;816    				case tmrCOMMAND_STOP_FROM_ISR :
000094  bf00              NOP      
;;;817    					/* The timer has already been removed from the active list.
;;;818    					There is nothing to do here. */
;;;819    					break;
000096  e020              B        |L7.218|
;;;820    
;;;821    				case tmrCOMMAND_CHANGE_PERIOD :
;;;822    				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
000098  bf00              NOP      
;;;823    					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
00009a  9804              LDR      r0,[sp,#0x10]
00009c  61a0              STR      r0,[r4,#0x18]
;;;824    					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
00009e  69a0              LDR      r0,[r4,#0x18]
0000a0  b108              CBZ      r0,|L7.166|
0000a2  2001              MOVS     r0,#1
0000a4  e000              B        |L7.168|
                  |L7.166|
0000a6  2000              MOVS     r0,#0
                  |L7.168|
0000a8  b950              CBNZ     r0,|L7.192|
0000aa  bf00              NOP      
0000ac  2030              MOVS     r0,#0x30
0000ae  f3808811          MSR      BASEPRI,r0
0000b2  f3bf8f4f          DSB      
0000b6  f3bf8f6f          ISB      
0000ba  bf00              NOP      
0000bc  bf00              NOP      
                  |L7.190|
0000be  e7fe              B        |L7.190|
                  |L7.192|
;;;825    
;;;826    					/* The new period does not really have a reference, and can
;;;827    					be longer or shorter than the old one.  The command time is
;;;828    					therefore set to the current time, and as the period cannot
;;;829    					be zero the next expiry time can only be in the future,
;;;830    					meaning (unlike for the xTimerStart() case above) there is
;;;831    					no fail case that needs to be handled here. */
;;;832    					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
0000c0  69a0              LDR      r0,[r4,#0x18]
0000c2  1941              ADDS     r1,r0,r5
0000c4  462b              MOV      r3,r5
0000c6  462a              MOV      r2,r5
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       prvInsertTimerInActiveList
;;;833    					break;
0000ce  e004              B        |L7.218|
;;;834    
;;;835    				case tmrCOMMAND_DELETE :
;;;836    					/* The timer has already been removed from the active list,
;;;837    					just free up the memory if the memory was dynamically
;;;838    					allocated. */
;;;839    					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;840    					{
;;;841    						/* The timer can only have been allocated dynamically -
;;;842    						free it again. */
;;;843    						vPortFree( pxTimer );
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       vPortFree
;;;844    					}
;;;845    					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;846    					{
;;;847    						/* The timer could have been allocated statically or
;;;848    						dynamically, so check before attempting to free the
;;;849    						memory. */
;;;850    						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;851    						{
;;;852    							vPortFree( pxTimer );
;;;853    						}
;;;854    						else
;;;855    						{
;;;856    							mtCOVERAGE_TEST_MARKER();
;;;857    						}
;;;858    					}
;;;859    					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;860    					break;
0000d6  e000              B        |L7.218|
                  |L7.216|
;;;861    
;;;862    				default	:
;;;863    					/* Don't expect to get here. */
;;;864    					break;
0000d8  bf00              NOP      
                  |L7.218|
0000da  bf00              NOP                            ;813
                  |L7.220|
0000dc  2300              MOVS     r3,#0                 ;731
0000de  461a              MOV      r2,r3                 ;731
0000e0  a903              ADD      r1,sp,#0xc            ;731
0000e2  4804              LDR      r0,|L7.244|
0000e4  6800              LDR      r0,[r0,#0]            ;731  ; xTimerQueue
0000e6  f7fffffe          BL       xQueueGenericReceive
0000ea  2800              CMP      r0,#0                 ;731
0000ec  d18b              BNE      |L7.6|
;;;865    			}
;;;866    		}
;;;867    	}
;;;868    }
0000ee  b006              ADD      sp,sp,#0x18
0000f0  bd70              POP      {r4-r6,pc}
;;;869    /*-----------------------------------------------------------*/
                          ENDP

0000f2  0000              DCW      0x0000
                  |L7.244|
                          DCD      xTimerQueue

                          AREA ||i.prvProcessTimerOrBlockTask||, CODE, READONLY, ALIGN=2

                  prvProcessTimerOrBlockTask PROC
;;;573    
;;;574    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
000000  b5f8              PUSH     {r3-r7,lr}
;;;575    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;576    TickType_t xTimeNow;
;;;577    BaseType_t xTimerListsWereSwitched;
;;;578    
;;;579    	vTaskSuspendAll();
000006  f7fffffe          BL       vTaskSuspendAll
;;;580    	{
;;;581    		/* Obtain the time now to make an assessment as to whether the timer
;;;582    		has expired or not.  If obtaining the time causes the lists to switch
;;;583    		then don't process this timer as any timers that remained in the list
;;;584    		when the lists were switched will have been processed within the
;;;585    		prvSampleTimeNow() function. */
;;;586    		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       prvSampleTimeNow
000010  4606              MOV      r6,r0
;;;587    		if( xTimerListsWereSwitched == pdFALSE )
000012  9800              LDR      r0,[sp,#0]
000014  bb20              CBNZ     r0,|L8.96|
;;;588    		{
;;;589    			/* The tick count has not overflowed, has the timer expired? */
;;;590    			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
000016  b944              CBNZ     r4,|L8.42|
000018  42b5              CMP      r5,r6
00001a  d806              BHI      |L8.42|
;;;591    			{
;;;592    				( void ) xTaskResumeAll();
00001c  f7fffffe          BL       xTaskResumeAll
;;;593    				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
000020  4631              MOV      r1,r6
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       prvProcessExpiredTimer
000028  e01c              B        |L8.100|
                  |L8.42|
;;;594    			}
;;;595    			else
;;;596    			{
;;;597    				/* The tick count has not overflowed, and the next expire
;;;598    				time has not been reached yet.  This task should therefore
;;;599    				block to wait for the next expire time or a command to be
;;;600    				received - whichever comes first.  The following line cannot
;;;601    				be reached unless xNextExpireTime > xTimeNow, except in the
;;;602    				case when the current timer list is empty. */
;;;603    				if( xListWasEmpty != pdFALSE )
00002a  b13c              CBZ      r4,|L8.60|
;;;604    				{
;;;605    					/* The current timer list is empty - is the overflow list
;;;606    					also empty? */
;;;607    					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
00002c  480e              LDR      r0,|L8.104|
00002e  6800              LDR      r0,[r0,#0]  ; pxOverflowTimerList
000030  6800              LDR      r0,[r0,#0]
000032  b908              CBNZ     r0,|L8.56|
000034  2001              MOVS     r0,#1
000036  e000              B        |L8.58|
                  |L8.56|
000038  2000              MOVS     r0,#0
                  |L8.58|
00003a  4604              MOV      r4,r0
                  |L8.60|
;;;608    				}
;;;609    
;;;610    				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
00003c  1ba9              SUBS     r1,r5,r6
00003e  4622              MOV      r2,r4
000040  480a              LDR      r0,|L8.108|
000042  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000044  f7fffffe          BL       vQueueWaitForMessageRestricted
;;;611    
;;;612    				if( xTaskResumeAll() == pdFALSE )
000048  f7fffffe          BL       xTaskResumeAll
00004c  b950              CBNZ     r0,|L8.100|
;;;613    				{
;;;614    					/* Yield to wait for either a command to arrive, or the
;;;615    					block time to expire.  If a command arrived between the
;;;616    					critical section being exited and this yield then the yield
;;;617    					will not cause the task to block. */
;;;618    					portYIELD_WITHIN_API();
00004e  f04f5080          MOV      r0,#0x10000000
000052  4907              LDR      r1,|L8.112|
000054  6008              STR      r0,[r1,#0]
000056  f3bf8f4f          DSB      
00005a  f3bf8f6f          ISB      
00005e  e001              B        |L8.100|
                  |L8.96|
;;;619    				}
;;;620    				else
;;;621    				{
;;;622    					mtCOVERAGE_TEST_MARKER();
;;;623    				}
;;;624    			}
;;;625    		}
;;;626    		else
;;;627    		{
;;;628    			( void ) xTaskResumeAll();
000060  f7fffffe          BL       xTaskResumeAll
                  |L8.100|
;;;629    		}
;;;630    	}
;;;631    }
000064  bdf8              POP      {r3-r7,pc}
;;;632    /*-----------------------------------------------------------*/
                          ENDP

000066  0000              DCW      0x0000
                  |L8.104|
                          DCD      pxOverflowTimerList
                  |L8.108|
                          DCD      xTimerQueue
                  |L8.112|
                          DCD      0xe000ed04

                          AREA ||i.prvSampleTimeNow||, CODE, READONLY, ALIGN=2

                  prvSampleTimeNow PROC
;;;659    
;;;660    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
000000  b570              PUSH     {r4-r6,lr}
;;;661    {
000002  4604              MOV      r4,r0
;;;662    TickType_t xTimeNow;
;;;663    PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */
;;;664    
;;;665    	xTimeNow = xTaskGetTickCount();
000004  f7fffffe          BL       xTaskGetTickCount
000008  4605              MOV      r5,r0
;;;666    
;;;667    	if( xTimeNow < xLastTime )
00000a  4807              LDR      r0,|L9.40|
00000c  6800              LDR      r0,[r0,#0]  ; xLastTime
00000e  4285              CMP      r5,r0
000010  d204              BCS      |L9.28|
;;;668    	{
;;;669    		prvSwitchTimerLists();
000012  f7fffffe          BL       prvSwitchTimerLists
;;;670    		*pxTimerListsWereSwitched = pdTRUE;
000016  2001              MOVS     r0,#1
000018  6020              STR      r0,[r4,#0]
00001a  e001              B        |L9.32|
                  |L9.28|
;;;671    	}
;;;672    	else
;;;673    	{
;;;674    		*pxTimerListsWereSwitched = pdFALSE;
00001c  2000              MOVS     r0,#0
00001e  6020              STR      r0,[r4,#0]
                  |L9.32|
;;;675    	}
;;;676    
;;;677    	xLastTime = xTimeNow;
000020  4801              LDR      r0,|L9.40|
000022  6005              STR      r5,[r0,#0]  ; xLastTime
;;;678    
;;;679    	return xTimeNow;
000024  4628              MOV      r0,r5
;;;680    }
000026  bd70              POP      {r4-r6,pc}
;;;681    /*-----------------------------------------------------------*/
                          ENDP

                  |L9.40|
                          DCD      xLastTime

                          AREA ||i.prvSwitchTimerLists||, CODE, READONLY, ALIGN=2

                  prvSwitchTimerLists PROC
;;;870    
;;;871    static void prvSwitchTimerLists( void )
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;872    {
;;;873    TickType_t xNextExpireTime, xReloadTime;
;;;874    List_t *pxTemp;
;;;875    Timer_t *pxTimer;
;;;876    BaseType_t xResult;
;;;877    
;;;878    	/* The tick count has overflowed.  The timer lists must be switched.
;;;879    	If there are any timers still referenced from the current timer list
;;;880    	then they must have expired and should be processed before the lists
;;;881    	are switched. */
;;;882    	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
000004  e032              B        |L10.108|
                  |L10.6|
;;;883    	{
;;;884    		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
000006  4824              LDR      r0,|L10.152|
000008  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  6805              LDR      r5,[r0,#0]
;;;885    
;;;886    		/* Remove the timer from the list. */
;;;887    		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
00000e  4822              LDR      r0,|L10.152|
000010  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
000012  68c0              LDR      r0,[r0,#0xc]
000014  68c4              LDR      r4,[r0,#0xc]
;;;888    		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       uxListRemove
;;;889    		traceTIMER_EXPIRED( pxTimer );
;;;890    
;;;891    		/* Execute its callback, then send a command to restart the timer if
;;;892    		it is an auto-reload timer.  It cannot be restarted here as the lists
;;;893    		have not yet been switched. */
;;;894    		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
00001c  4620              MOV      r0,r4
00001e  6a61              LDR      r1,[r4,#0x24]
000020  4788              BLX      r1
;;;895    
;;;896    		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
000022  69e0              LDR      r0,[r4,#0x1c]
000024  2801              CMP      r0,#1
000026  d121              BNE      |L10.108|
;;;897    		{
;;;898    			/* Calculate the reload value, and if the reload value results in
;;;899    			the timer going into the same timer list then it has already expired
;;;900    			and the timer should be re-inserted into the current list so it is
;;;901    			processed again within this loop.  Otherwise a command should be sent
;;;902    			to restart the timer to ensure it is only inserted into a list after
;;;903    			the lists have been swapped. */
;;;904    			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
000028  69a0              LDR      r0,[r4,#0x18]
00002a  1946              ADDS     r6,r0,r5
;;;905    			if( xReloadTime > xNextExpireTime )
00002c  42ae              CMP      r6,r5
00002e  d907              BLS      |L10.64|
;;;906    			{
;;;907    				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
000030  6066              STR      r6,[r4,#4]
;;;908    				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000032  6124              STR      r4,[r4,#0x10]
;;;909    				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
000034  1d21              ADDS     r1,r4,#4
000036  4818              LDR      r0,|L10.152|
000038  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
00003a  f7fffffe          BL       vListInsert
00003e  e015              B        |L10.108|
                  |L10.64|
;;;910    			}
;;;911    			else
;;;912    			{
;;;913    				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
000040  2000              MOVS     r0,#0
000042  4603              MOV      r3,r0
000044  462a              MOV      r2,r5
000046  4601              MOV      r1,r0
000048  9000              STR      r0,[sp,#0]
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       xTimerGenericCommand
000050  4607              MOV      r7,r0
;;;914    				configASSERT( xResult );
000052  b957              CBNZ     r7,|L10.106|
000054  bf00              NOP      
000056  2030              MOVS     r0,#0x30
000058  f3808811          MSR      BASEPRI,r0
00005c  f3bf8f4f          DSB      
000060  f3bf8f6f          ISB      
000064  bf00              NOP      
000066  bf00              NOP      
                  |L10.104|
000068  e7fe              B        |L10.104|
                  |L10.106|
;;;915    				( void ) xResult;
00006a  bf00              NOP      
                  |L10.108|
00006c  480a              LDR      r0,|L10.152|
00006e  6800              LDR      r0,[r0,#0]            ;882  ; pxCurrentTimerList
000070  6800              LDR      r0,[r0,#0]            ;882
000072  b908              CBNZ     r0,|L10.120|
000074  2001              MOVS     r0,#1                 ;882
000076  e000              B        |L10.122|
                  |L10.120|
000078  2000              MOVS     r0,#0                 ;882
                  |L10.122|
00007a  2800              CMP      r0,#0                 ;882
00007c  d0c3              BEQ      |L10.6|
;;;916    			}
;;;917    		}
;;;918    		else
;;;919    		{
;;;920    			mtCOVERAGE_TEST_MARKER();
;;;921    		}
;;;922    	}
;;;923    
;;;924    	pxTemp = pxCurrentTimerList;
00007e  4806              LDR      r0,|L10.152|
000080  f8d08000          LDR      r8,[r0,#0]  ; pxCurrentTimerList
;;;925    	pxCurrentTimerList = pxOverflowTimerList;
000084  4805              LDR      r0,|L10.156|
000086  6800              LDR      r0,[r0,#0]  ; pxOverflowTimerList
000088  4903              LDR      r1,|L10.152|
00008a  6008              STR      r0,[r1,#0]  ; pxCurrentTimerList
;;;926    	pxOverflowTimerList = pxTemp;
00008c  4803              LDR      r0,|L10.156|
00008e  f8c08000          STR      r8,[r0,#0]  ; pxOverflowTimerList
;;;927    }
000092  e8bd83f8          POP      {r3-r9,pc}
;;;928    /*-----------------------------------------------------------*/
                          ENDP

000096  0000              DCW      0x0000
                  |L10.152|
                          DCD      pxCurrentTimerList
                  |L10.156|
                          DCD      pxOverflowTimerList

                          AREA ||i.prvTimerTask||, CODE, READONLY, ALIGN=1

                  prvTimerTask PROC
;;;537    
;;;538    static void prvTimerTask( void *pvParameters )
000000  b508              PUSH     {r3,lr}
;;;539    {
;;;540    TickType_t xNextExpireTime;
;;;541    BaseType_t xListWasEmpty;
;;;542    
;;;543    	/* Just to avoid compiler warnings. */
;;;544    	( void ) pvParameters;
;;;545    
;;;546    	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
;;;547    	{
;;;548    		extern void vApplicationDaemonTaskStartupHook( void );
;;;549    
;;;550    		/* Allow the application writer to execute some code in the context of
;;;551    		this task at the point the task starts executing.  This is useful if the
;;;552    		application includes initialisation code that would benefit from
;;;553    		executing after the scheduler has been started. */
;;;554    		vApplicationDaemonTaskStartupHook();
;;;555    	}
;;;556    	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
;;;557    
;;;558    	for( ;; )
000002  bf00              NOP      
                  |L11.4|
;;;559    	{
;;;560    		/* Query the timers list to see if it contains any timers, and if so,
;;;561    		obtain the time at which the next timer will expire. */
;;;562    		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       prvGetNextExpireTime
00000a  4604              MOV      r4,r0
;;;563    
;;;564    		/* If a timer has expired, process it.  Otherwise, block this task
;;;565    		until either a timer does expire, or a command is received. */
;;;566    		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
00000c  4620              MOV      r0,r4
00000e  9900              LDR      r1,[sp,#0]
000010  f7fffffe          BL       prvProcessTimerOrBlockTask
;;;567    
;;;568    		/* Empty the command queue. */
;;;569    		prvProcessReceivedCommands();
000014  f7fffffe          BL       prvProcessReceivedCommands
000018  e7f4              B        |L11.4|
;;;570    	}
;;;571    }
;;;572    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.pvTimerGetTimerID||, CODE, READONLY, ALIGN=1

                  pvTimerGetTimerID PROC
;;;1001   
;;;1002   void *pvTimerGetTimerID( const TimerHandle_t xTimer )
000000  b570              PUSH     {r4-r6,lr}
;;;1003   {
000002  4604              MOV      r4,r0
;;;1004   Timer_t * const pxTimer = ( Timer_t * ) xTimer;
000004  4625              MOV      r5,r4
;;;1005   void *pvReturn;
;;;1006   
;;;1007   	configASSERT( xTimer );
000006  b954              CBNZ     r4,|L12.30|
000008  bf00              NOP      
00000a  2030              MOVS     r0,#0x30
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L12.28|
00001c  e7fe              B        |L12.28|
                  |L12.30|
;;;1008   
;;;1009   	taskENTER_CRITICAL();
00001e  f7fffffe          BL       vPortEnterCritical
;;;1010   	{
;;;1011   		pvReturn = pxTimer->pvTimerID;
000022  6a2e              LDR      r6,[r5,#0x20]
;;;1012   	}
;;;1013   	taskEXIT_CRITICAL();
000024  f7fffffe          BL       vPortExitCritical
;;;1014   
;;;1015   	return pvReturn;
000028  4630              MOV      r0,r6
;;;1016   }
00002a  bd70              POP      {r4-r6,pc}
;;;1017   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vTimerSetTimerID||, CODE, READONLY, ALIGN=1

                  vTimerSetTimerID PROC
;;;1018   
;;;1019   void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
000000  b570              PUSH     {r4-r6,lr}
;;;1020   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1021   Timer_t * const pxTimer = ( Timer_t * ) xTimer;
000006  4626              MOV      r6,r4
;;;1022   
;;;1023   	configASSERT( xTimer );
000008  b954              CBNZ     r4,|L13.32|
00000a  bf00              NOP      
00000c  2030              MOVS     r0,#0x30
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L13.30|
00001e  e7fe              B        |L13.30|
                  |L13.32|
;;;1024   
;;;1025   	taskENTER_CRITICAL();
000020  f7fffffe          BL       vPortEnterCritical
;;;1026   	{
;;;1027   		pxTimer->pvTimerID = pvNewID;
000024  6235              STR      r5,[r6,#0x20]
;;;1028   	}
;;;1029   	taskEXIT_CRITICAL();
000026  f7fffffe          BL       vPortExitCritical
;;;1030   }
00002a  bd70              POP      {r4-r6,pc}
;;;1031   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xTimerCreate||, CODE, READONLY, ALIGN=1

                  xTimerCreate PROC
;;;313    
;;;314    	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;315    								const TickType_t xTimerPeriodInTicks,
;;;316    								const UBaseType_t uxAutoReload,
;;;317    								void * const pvTimerID,
;;;318    								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;319    	{
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9028          LDR      r9,[sp,#0x28]
;;;320    	Timer_t *pxNewTimer;
;;;321    
;;;322    		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
000010  202c              MOVS     r0,#0x2c
000012  f7fffffe          BL       pvPortMalloc
000016  4604              MOV      r4,r0
;;;323    
;;;324    		if( pxNewTimer != NULL )
000018  b13c              CBZ      r4,|L14.42|
;;;325    		{
;;;326    			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
00001a  4643              MOV      r3,r8
00001c  463a              MOV      r2,r7
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  e9cd9400          STRD     r9,r4,[sp,#0]
000026  f7fffffe          BL       prvInitialiseNewTimer
                  |L14.42|
;;;327    
;;;328    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;329    			{
;;;330    				/* Timers can be created statically or dynamically, so note this
;;;331    				timer was created dynamically in case the timer is later
;;;332    				deleted. */
;;;333    				pxNewTimer->ucStaticallyAllocated = pdFALSE;
;;;334    			}
;;;335    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;336    		}
;;;337    
;;;338    		return pxNewTimer;
00002a  4620              MOV      r0,r4
;;;339    	}
00002c  e8bd87fc          POP      {r2-r10,pc}
;;;340    
                          ENDP


                          AREA ||i.xTimerCreateTimerTask||, CODE, READONLY, ALIGN=2

                  xTimerCreateTimerTask PROC
;;;258    
;;;259    BaseType_t xTimerCreateTimerTask( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;260    {
;;;261    BaseType_t xReturn = pdFAIL;
000002  2400              MOVS     r4,#0
;;;262    
;;;263    	/* This function is called when the scheduler is started if
;;;264    	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
;;;265    	timer service task has been created/initialised.  If timers have already
;;;266    	been created then the initialisation will already have been performed. */
;;;267    	prvCheckForValidListAndQueue();
000004  f7fffffe          BL       prvCheckForValidListAndQueue
;;;268    
;;;269    	if( xTimerQueue != NULL )
000008  480d              LDR      r0,|L15.64|
00000a  6800              LDR      r0,[r0,#0]  ; xTimerQueue
00000c  b150              CBZ      r0,|L15.36|
;;;270    	{
;;;271    		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;272    		{
;;;273    			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
;;;274    			StackType_t *pxTimerTaskStackBuffer = NULL;
;;;275    			uint32_t ulTimerTaskStackSize;
;;;276    
;;;277    			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
;;;278    			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
;;;279    													"Tmr Svc",
;;;280    													ulTimerTaskStackSize,
;;;281    													NULL,
;;;282    													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
;;;283    													pxTimerTaskStackBuffer,
;;;284    													pxTimerTaskTCBBuffer );
;;;285    
;;;286    			if( xTimerTaskHandle != NULL )
;;;287    			{
;;;288    				xReturn = pdPASS;
;;;289    			}
;;;290    		}
;;;291    		#else
;;;292    		{
;;;293    			xReturn = xTaskCreate(	prvTimerTask,
00000e  480d              LDR      r0,|L15.68|
000010  2102              MOVS     r1,#2
000012  2300              MOVS     r3,#0
000014  2240              MOVS     r2,#0x40
000016  e9cd1000          STRD     r1,r0,[sp,#0]
00001a  a10b              ADR      r1,|L15.72|
00001c  480c              LDR      r0,|L15.80|
00001e  f7fffffe          BL       xTaskCreate
000022  4604              MOV      r4,r0
                  |L15.36|
;;;294    									"Tmr Svc",
;;;295    									configTIMER_TASK_STACK_DEPTH,
;;;296    									NULL,
;;;297    									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
;;;298    									&xTimerTaskHandle );
;;;299    		}
;;;300    		#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;301    	}
;;;302    	else
;;;303    	{
;;;304    		mtCOVERAGE_TEST_MARKER();
;;;305    	}
;;;306    
;;;307    	configASSERT( xReturn );
000024  b954              CBNZ     r4,|L15.60|
000026  bf00              NOP      
000028  2030              MOVS     r0,#0x30
00002a  f3808811          MSR      BASEPRI,r0
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
000036  bf00              NOP      
000038  bf00              NOP      
                  |L15.58|
00003a  e7fe              B        |L15.58|
                  |L15.60|
;;;308    	return xReturn;
00003c  4620              MOV      r0,r4
;;;309    }
00003e  bd1c              POP      {r2-r4,pc}
;;;310    /*-----------------------------------------------------------*/
                          ENDP

                  |L15.64|
                          DCD      xTimerQueue
                  |L15.68|
                          DCD      xTimerTaskHandle
                  |L15.72|
000048  546d7220          DCB      "Tmr Svc",0
00004c  53766300
                  |L15.80|
                          DCD      prvTimerTask

                          AREA ||i.xTimerGenericCommand||, CODE, READONLY, ALIGN=2

                  xTimerGenericCommand PROC
;;;416    
;;;417    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;418    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;419    BaseType_t xReturn = pdFAIL;
000010  f04f0900          MOV      r9,#0
;;;420    DaemonTaskMessage_t xMessage;
;;;421    
;;;422    	configASSERT( xTimer );
000014  b954              CBNZ     r4,|L16.44|
000016  bf00              NOP      
000018  2030              MOVS     r0,#0x30
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L16.42|
00002a  e7fe              B        |L16.42|
                  |L16.44|
;;;423    
;;;424    	/* Send a message to the timer service task to perform a particular action
;;;425    	on a particular timer definition. */
;;;426    	if( xTimerQueue != NULL )
00002c  4814              LDR      r0,|L16.128|
00002e  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000030  b310              CBZ      r0,|L16.120|
;;;427    	{
;;;428    		/* Send a command to the timer service task to start the xTimer timer. */
;;;429    		xMessage.xMessageID = xCommandID;
000032  9500              STR      r5,[sp,#0]
;;;430    		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
000034  9601              STR      r6,[sp,#4]
;;;431    		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
000036  9402              STR      r4,[sp,#8]
;;;432    
;;;433    		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
000038  2d06              CMP      r5,#6
00003a  da15              BGE      |L16.104|
;;;434    		{
;;;435    			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
00003c  f7fffffe          BL       xTaskGetSchedulerState
000040  2802              CMP      r0,#2
000042  d108              BNE      |L16.86|
;;;436    			{
;;;437    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
000044  2300              MOVS     r3,#0
000046  4642              MOV      r2,r8
000048  4669              MOV      r1,sp
00004a  480d              LDR      r0,|L16.128|
00004c  6800              LDR      r0,[r0,#0]  ; xTimerQueue
00004e  f7fffffe          BL       xQueueGenericSend
000052  4681              MOV      r9,r0
000054  e010              B        |L16.120|
                  |L16.86|
;;;438    			}
;;;439    			else
;;;440    			{
;;;441    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
000056  2300              MOVS     r3,#0
000058  461a              MOV      r2,r3
00005a  4669              MOV      r1,sp
00005c  4808              LDR      r0,|L16.128|
00005e  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000060  f7fffffe          BL       xQueueGenericSend
000064  4681              MOV      r9,r0
000066  e007              B        |L16.120|
                  |L16.104|
;;;442    			}
;;;443    		}
;;;444    		else
;;;445    		{
;;;446    			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
000068  2300              MOVS     r3,#0
00006a  463a              MOV      r2,r7
00006c  4669              MOV      r1,sp
00006e  4804              LDR      r0,|L16.128|
000070  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000072  f7fffffe          BL       xQueueGenericSendFromISR
000076  4681              MOV      r9,r0
                  |L16.120|
;;;447    		}
;;;448    
;;;449    		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
;;;450    	}
;;;451    	else
;;;452    	{
;;;453    		mtCOVERAGE_TEST_MARKER();
;;;454    	}
;;;455    
;;;456    	return xReturn;
000078  4648              MOV      r0,r9
;;;457    }
00007a  e8bd83fe          POP      {r1-r9,pc}
;;;458    /*-----------------------------------------------------------*/
                          ENDP

00007e  0000              DCW      0x0000
                  |L16.128|
                          DCD      xTimerQueue

                          AREA ||i.xTimerGetExpiryTime||, CODE, READONLY, ALIGN=1

                  xTimerGetExpiryTime PROC
;;;477    
;;;478    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
000000  b510              PUSH     {r4,lr}
;;;479    {
000002  4601              MOV      r1,r0
;;;480    Timer_t * pxTimer = ( Timer_t * ) xTimer;
000004  460a              MOV      r2,r1
;;;481    TickType_t xReturn;
;;;482    
;;;483    	configASSERT( xTimer );
000006  b951              CBNZ     r1,|L17.30|
000008  bf00              NOP      
00000a  2330              MOVS     r3,#0x30
00000c  f3838811          MSR      BASEPRI,r3
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L17.28|
00001c  e7fe              B        |L17.28|
                  |L17.30|
;;;484    	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
00001e  6850              LDR      r0,[r2,#4]
;;;485    	return xReturn;
;;;486    }
000020  bd10              POP      {r4,pc}
;;;487    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xTimerGetPeriod||, CODE, READONLY, ALIGN=1

                  xTimerGetPeriod PROC
;;;468    
;;;469    TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
000000  4601              MOV      r1,r0
;;;470    {
;;;471    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000002  460a              MOV      r2,r1
;;;472    
;;;473    	configASSERT( xTimer );
000004  b951              CBNZ     r1,|L18.28|
000006  bf00              NOP      
000008  2030              MOVS     r0,#0x30
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
000018  bf00              NOP      
                  |L18.26|
00001a  e7fe              B        |L18.26|
                  |L18.28|
;;;474    	return pxTimer->xTimerPeriodInTicks;
00001c  6990              LDR      r0,[r2,#0x18]
;;;475    }
00001e  4770              BX       lr
;;;476    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xTimerGetTimerDaemonTaskHandle||, CODE, READONLY, ALIGN=2

                  xTimerGetTimerDaemonTaskHandle PROC
;;;459    
;;;460    TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
000000  480a              LDR      r0,|L19.44|
;;;461    {
;;;462    	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
;;;463    	started, then xTimerTaskHandle will be NULL. */
;;;464    	configASSERT( ( xTimerTaskHandle != NULL ) );
000002  6800              LDR      r0,[r0,#0]  ; xTimerTaskHandle
000004  b108              CBZ      r0,|L19.10|
000006  2001              MOVS     r0,#1
000008  e000              B        |L19.12|
                  |L19.10|
00000a  2000              MOVS     r0,#0
                  |L19.12|
00000c  b950              CBNZ     r0,|L19.36|
00000e  bf00              NOP      
000010  2030              MOVS     r0,#0x30
000012  f3808811          MSR      BASEPRI,r0
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  bf00              NOP      
                  |L19.34|
000022  e7fe              B        |L19.34|
                  |L19.36|
;;;465    	return xTimerTaskHandle;
000024  4801              LDR      r0,|L19.44|
000026  6800              LDR      r0,[r0,#0]  ; xTimerTaskHandle
;;;466    }
000028  4770              BX       lr
;;;467    /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L19.44|
                          DCD      xTimerTaskHandle

                          AREA ||i.xTimerIsTimerActive||, CODE, READONLY, ALIGN=1

                  xTimerIsTimerActive PROC
;;;980    
;;;981    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
000000  b570              PUSH     {r4-r6,lr}
;;;982    {
000002  4604              MOV      r4,r0
;;;983    BaseType_t xTimerIsInActiveList;
;;;984    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000004  4626              MOV      r6,r4
;;;985    
;;;986    	configASSERT( xTimer );
000006  b954              CBNZ     r4,|L20.30|
000008  bf00              NOP      
00000a  2030              MOVS     r0,#0x30
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L20.28|
00001c  e7fe              B        |L20.28|
                  |L20.30|
;;;987    
;;;988    	/* Is the timer in the list of active timers? */
;;;989    	taskENTER_CRITICAL();
00001e  f7fffffe          BL       vPortEnterCritical
;;;990    	{
;;;991    		/* Checking to see if it is in the NULL list in effect checks to see if
;;;992    		it is referenced from either the current or the overflow timer lists in
;;;993    		one go, but the logic has to be reversed, hence the '!'. */
;;;994    		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
000022  6970              LDR      r0,[r6,#0x14]
000024  b908              CBNZ     r0,|L20.42|
000026  2001              MOVS     r0,#1
000028  e000              B        |L20.44|
                  |L20.42|
00002a  2000              MOVS     r0,#0
                  |L20.44|
00002c  f0800501          EOR      r5,r0,#1
;;;995    	}
;;;996    	taskEXIT_CRITICAL();
000030  f7fffffe          BL       vPortExitCritical
;;;997    
;;;998    	return xTimerIsInActiveList;
000034  4628              MOV      r0,r5
;;;999    } /*lint !e818 Can't be pointer to const due to the typedef. */
000036  bd70              POP      {r4-r6,pc}
;;;1000   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  xActiveTimerList1
                          %        20
                  xActiveTimerList2
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTimerList
                          DCD      0x00000000
                  pxOverflowTimerList
                          DCD      0x00000000
                  xTimerQueue
                          DCD      0x00000000
                  xTimerTaskHandle
                          DCD      0x00000000
                  xLastTime
                          DCD      0x00000000
