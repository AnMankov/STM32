; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\mems.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\mems.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\mems.crf Source\Tasks\src\mems.cpp]
                          THUMB

                          AREA ||i._Z4memsPv||, CODE, READONLY, ALIGN=2

                  _Z4memsPv PROC ; mems(void*)
;;;354    //----- Задача RTOS --------------------------------------------------
;;;355    void mems( void *Params ) //работа с МЭМС-датчиком
000000  b08a              SUB      sp,sp,#0x28
;;;356    {
;;;357    //  constexpr uint8_t DLY = 10U; //[мс]
;;;358      constexpr uint8_t WAIT_CALIB_DLY = 10U; 
000002  bf00              NOP      
;;;359    
;;;360      do
000004  bf00              NOP      
                  |L1.6|
;;;361      {
;;;362        AccMagGyro.init_driver();
000006  4816              LDR      r0,|L1.96|
000008  f7fffffe          BL       _ZN8MPU_925020TAccGyroMagDriver_HL11init_driverEv ; MPU_9250::TAccGyroMagDriver_HL::init_driver()
;;;363        AccMagGyro.init_aux();
00000c  4814              LDR      r0,|L1.96|
00000e  f7fffffe          BL       _ZN8MPU_925020TAccGyroMagDriver_HL8init_auxEv ; MPU_9250::TAccGyroMagDriver_HL::init_aux()
;;;364        AccMagGyro.init_chip();
000012  4813              LDR      r0,|L1.96|
000014  f7fffffe          BL       _ZN8MPU_925020TAccGyroMagDriver_HL9init_chipEv ; MPU_9250::TAccGyroMagDriver_HL::init_chip()
;;;365      } while( AccMagGyro.check_id_acc_gyro() == false );
000018  4811              LDR      r0,|L1.96|
00001a  f7fffffe          BL       _ZN8MPU_925020TAccGyroMagDriver_HL17check_id_acc_gyroEv ; MPU_9250::TAccGyroMagDriver_HL::check_id_acc_gyro()
00001e  2800              CMP      r0,#0
000020  d0f1              BEQ      |L1.6|
;;;366    
;;;367      LL_AHB1_GRP1_EnableClock( LL_AHB1_GRP1_PERIPH_CRC ); //UM2277, rev.6, page 3: the CRC module in STM32 microcontroller \
000022  f44f5080          MOV      r0,#0x1000
000026  490f              LDR      r1,|L1.100|
000028  6c89              LDR      r1,[r1,#0x48]
00002a  4301              ORRS     r1,r1,r0
00002c  4a0d              LDR      r2,|L1.100|
00002e  6491              STR      r1,[r2,#0x48]
000030  4611              MOV      r1,r2
000032  6c89              LDR      r1,[r1,#0x48]
000034  4001              ANDS     r1,r1,r0
000036  9100              STR      r1,[sp,#0]
000038  bf00              NOP      
00003a  bf00              NOP      
;;;368                                                             (in RCC peripheral clock enable register) has to be enabled \
;;;369                                                             before using the library
;;;370      MotionTL_Initialize();
00003c  f7fffffe          BL       MotionTL_Initialize
;;;371    
;;;372      constexpr char *acc_orientation = "enu";
000040  bf00              NOP      
;;;373      MotionTL_SetOrientation_Acc( acc_orientation );
000042  a009              ADR      r0,|L1.104|
000044  f7fffffe          BL       MotionTL_SetOrientation_Acc
;;;374    
;;;375      constexpr uint8_t LIB_VERSION_BUF_SIZE  = 35;
000048  bf00              NOP      
;;;376      char LibAcVersion[LIB_VERSION_BUF_SIZE] = { 0 };
00004a  2124              MOVS     r1,#0x24
00004c  a801              ADD      r0,sp,#4
00004e  f7fffffe          BL       __aeabi_memclr4
;;;377      MotionTL_GetLibVersion( LibAcVersion );
000052  a801              ADD      r0,sp,#4
000054  f7fffffe          BL       MotionTL_GetLibVersion
;;;378    
;;;379      for ( ;; )
000058  bf00              NOP      
                  |L1.90|
;;;380      {
;;;381        mems_process();
00005a  f7fffffe          BL       _ZN25_INTERNAL_8_mems_cpp_Mems12mems_processEv ; [local to mems_cpp]::mems_process()
00005e  e7fc              B        |L1.90|
;;;382      }
;;;383    }
;;;384    //\---- Задача RTOS -------------------------------------------------------------------------------------------------
                          ENDP

                  |L1.96|
                          DCD      AccMagGyro
                  |L1.100|
                          DCD      0x40021000
                  |L1.104|
000068  656e7500          DCB      "enu",0

                          AREA ||i._ZN25_INTERNAL_8_mems_cpp_Mems12mems_processEv||, CODE, READONLY, ALIGN=2

                  _ZN25_INTERNAL_8_mems_cpp_Mems12mems_processEv PROC ; [local to mems_cpp]::mems_process()
;;;385    
;;;386    static void mems_process()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;387    {
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b088              SUB      sp,sp,#0x20
;;;388      static TModel::TAccelData AccAverage = { 0.0f, 0.0f, 0.0f };
;;;389      constexpr uint32_t RE_READY_DLY = 5U;
00000a  f04f0805          MOV      r8,#5
;;;390      
;;;391    //  Model.set_start_meas_cmd( TModel::TMeas::__STOP_MEAS ); //сброс команды до начала следующего окна
;;;392      
;;;393    	xSemaphoreGive( MemsDevRdySem ); //МЭМС готов измерять
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4619              MOV      r1,r3
000014  487c              LDR      r0,|L2.520|
000016  6800              LDR      r0,[r0,#0]  ; MemsDevRdySem
000018  f7fffffe          BL       xQueueGenericSend
;;;394      if ( xSemaphoreTake( DevMemsStartSem, RE_READY_DLY ) == pdFAIL )
00001c  2300              MOVS     r3,#0
00001e  2205              MOVS     r2,#5
000020  4619              MOV      r1,r3
000022  487a              LDR      r0,|L2.524|
000024  6800              LDR      r0,[r0,#0]  ; DevMemsStartSem
000026  f7fffffe          BL       xQueueGenericReceive
00002a  b948              CBNZ     r0,|L2.64|
;;;395      {
;;;396        static uint8_t Ctr;
;;;397        ++Ctr;
00002c  4878              LDR      r0,|L2.528|
00002e  7800              LDRB     r0,[r0,#0]  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE3Ctr
000030  1c40              ADDS     r0,r0,#1
000032  4977              LDR      r1,|L2.528|
000034  7008              STRB     r0,[r1,#0]
                  |L2.54|
;;;398        
;;;399        return; //повторная попытка начать измерения
;;;400      }
;;;401    //  Do.closed();
;;;402      Mems.acquire_data( AccelBuf );
;;;403    //  Do.open();
;;;404    
;;;405      if ( Mems.is_valid_data( AccelBuf ) == true ) //если все выборки текущего окна валидные
;;;406      {
;;;407        
;;;408        Model.set_sample_valid_sign( TModel::TValidSign::__VALID );
;;;409        
;;;410        AccAverage = { 0.0f, 0.0f, 0.0f };
;;;411        Mems.cnt_average( AccelBuf, AccAverage ); //вычисление средних значений по осям
;;;412        
;;;413        static float AccelAxisSum = 0.0f;
;;;414        AccelAxisSum = AccAverage.X + AccAverage.Y + AccAverage.Z;
;;;415    
;;;416        struct TCnt
;;;417        {
;;;418          float Numerator;
;;;419          float Denominator;
;;;420        };
;;;421        
;;;422        TCnt RawPitch = { AccAverage.X, sqrt( pow( AccAverage.Y, 2 ) + pow( AccAverage.Z, 2 ) ) };
;;;423        TCnt RawRoll  = { AccAverage.Y, sqrt( pow( AccAverage.X, 2 ) + pow( AccAverage.Z, 2 ) ) };
;;;424            
;;;425        Model.set_raw_pitch( roundf( atan2f( RawPitch.Numerator, RawPitch.Denominator ) * 180.0f / M_PI ) );
;;;426        Model.set_raw_roll( roundf( atan2f( RawRoll.Numerator, RawRoll.Denominator ) * 180.0f / M_PI ) );
;;;427        
;;;428        Model.set_accel_z( AccAverage.Z );
;;;429    
;;;430    //    float NumeratorP   = AccAverage.X;
;;;431    //    float Denominator = sqrt( pow( AccAverage.Y, 2 ) + pow( AccAverage.Z, 2 ) );
;;;432    //    float DenominatorRoll = sqrt( pow( AccAverage.X, 2 ) + pow( AccAverage.Z, 2 ) );
;;;433    //    static float PitchOld;
;;;434    //    static float Pitch;
;;;435    //    static float RollOld;
;;;436    //    static __packed float PrevPitch = 0.0f;
;;;437    
;;;438    //    PitchOld = atan2f( Numerator, Denominator ) * 180.0f / M_PI;
;;;439    //    RollOld = atan2f( AccAverage.Y, DenominatorRoll ) * 180.0f / M_PI;
;;;440    //    
;;;441    //    
;;;442    //    Pitch = Mems.convert_angle( PitchOld, AccAverage.Z, Model.get_dev_type() );
;;;443    //    Mems.cnt_damp( PrevPitch, Pitch, 1.0f ); //1.0f => без демпфирования
;;;444    //    
;;;445    //    Model.set_my_angle( roundf( PrevPitch ) );
;;;446        
;;;447        auto beg = reinterpret_cast<float *>(AccelBuf);
;;;448        auto end = reinterpret_cast<float *>(&AccelBuf[ACCEL_BUF_SIZE]);
;;;449        std::fill( beg, end, 0U ); //обнуление массива с выборками
;;;450        
;;;451        
;;;452        
;;;453    //	  xSemaphoreGive( MemsDevDoneSem ); //измерения готовы
;;;454        
;;;455      }
;;;456      else
;;;457      {
;;;458        Model.set_sample_valid_sign( TModel::TValidSign::__INVALID );
;;;459      }
;;;460    	
;;;461      xSemaphoreGive( MemsDevDoneSem ); //измерения готовы
;;;462    }
000036  b008              ADD      sp,sp,#0x20
000038  ecbd8b06          VPOP     {d8-d10}
00003c  e8bd81f0          POP      {r4-r8,pc}
                  |L2.64|
000040  4974              LDR      r1,|L2.532|
000042  4875              LDR      r0,|L2.536|
000044  f7fffffe          BL       _ZN5TMems12acquire_dataERA300_N9TSettings10TAccelDataE ; TMems::acquire_data(TSettings::TAccelData(&)[300])
000048  4972              LDR      r1,|L2.532|
00004a  4873              LDR      r0,|L2.536|
00004c  f7fffffe          BL       _ZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataE ; TMems::is_valid_data(const TSettings::TAccelData(&)[300])
000050  2800              CMP      r0,#0                 ;405
000052  d07c              BEQ      |L2.334|
000054  2101              MOVS     r1,#1                 ;408
000056  4871              LDR      r0,|L2.540|
000058  f7fffffe          BL       _ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE ; TModel::set_sample_valid_sign(TSettings::TValidSign)
00005c  2000              MOVS     r0,#0                 ;410
00005e  9005              STR      r0,[sp,#0x14]         ;410
000060  9006              STR      r0,[sp,#0x18]         ;410
000062  9007              STR      r0,[sp,#0x1c]         ;410
000064  486e              LDR      r0,|L2.544|
000066  9905              LDR      r1,[sp,#0x14]         ;410
000068  6001              STR      r1,[r0,#0]            ;410  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
00006a  9906              LDR      r1,[sp,#0x18]         ;410
00006c  6041              STR      r1,[r0,#4]            ;410  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
00006e  9907              LDR      r1,[sp,#0x1c]         ;410
000070  6081              STR      r1,[r0,#8]            ;410  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
000072  4602              MOV      r2,r0                 ;411
000074  4967              LDR      r1,|L2.532|
000076  4868              LDR      r0,|L2.536|
000078  f7fffffe          BL       _ZN5TMems11cnt_averageERA300_KN9TSettings10TAccelDataERS1_ ; TMems::cnt_average(const TSettings::TAccelData(&)[300], TSettings::TAccelData&)
00007c  4868              LDR      r0,|L2.544|
00007e  6800              LDR      r0,[r0,#0]            ;414  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
000080  ee000a10          VMOV     s0,r0                 ;414
000084  4866              LDR      r0,|L2.544|
000086  6840              LDR      r0,[r0,#4]            ;414  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
000088  ee000a90          VMOV     s1,r0                 ;414
00008c  ee700a20          VADD.F32 s1,s0,s1              ;414
000090  4863              LDR      r0,|L2.544|
000092  6880              LDR      r0,[r0,#8]            ;414  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
000094  ee000a10          VMOV     s0,r0                 ;414
000098  ee300a80          VADD.F32 s0,s1,s0              ;414
00009c  4861              LDR      r0,|L2.548|
00009e  ed800a00          VSTR     s0,[r0,#0]            ;414
0000a2  485f              LDR      r0,|L2.544|
0000a4  6800              LDR      r0,[r0,#0]            ;422  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
0000a6  9002              STR      r0,[sp,#8]            ;422
0000a8  485d              LDR      r0,|L2.544|
0000aa  6840              LDR      r0,[r0,#4]            ;422  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
0000ac  ee000a10          VMOV     s0,r0                 ;422
0000b0  2002              MOVS     r0,#2                 ;422
0000b2  f7fffffe          BL       _ZSt3powfi ; std::pow(float, int)
0000b6  eef08a40          VMOV.F32 s17,s0                ;422
0000ba  4859              LDR      r0,|L2.544|
0000bc  6880              LDR      r0,[r0,#8]            ;422  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
0000be  ee000a10          VMOV     s0,r0                 ;422
0000c2  2002              MOVS     r0,#2                 ;422
0000c4  f7fffffe          BL       _ZSt3powfi ; std::pow(float, int)
0000c8  ee380a80          VADD.F32 s0,s17,s0             ;422
0000cc  eeb08a40          VMOV.F32 s16,s0                ;422
0000d0  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
0000d4  ed8d0a03          VSTR     s0,[sp,#0xc]          ;422
0000d8  4851              LDR      r0,|L2.544|
0000da  6840              LDR      r0,[r0,#4]            ;423  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
0000dc  9000              STR      r0,[sp,#0]            ;423
0000de  4850              LDR      r0,|L2.544|
0000e0  6800              LDR      r0,[r0,#0]            ;423  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
0000e2  ee000a10          VMOV     s0,r0                 ;423
0000e6  2002              MOVS     r0,#2                 ;423
0000e8  f7fffffe          BL       _ZSt3powfi ; std::pow(float, int)
0000ec  eef08a40          VMOV.F32 s17,s0                ;423
0000f0  484b              LDR      r0,|L2.544|
0000f2  6880              LDR      r0,[r0,#8]            ;423  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
0000f4  ee000a10          VMOV     s0,r0                 ;423
0000f8  2002              MOVS     r0,#2                 ;423
0000fa  f7fffffe          BL       _ZSt3powfi ; std::pow(float, int)
0000fe  ee380a80          VADD.F32 s0,s17,s0             ;423
000102  eeb08a40          VMOV.F32 s16,s0                ;423
000106  f7fffffe          BL       _ZSt4sqrtf ; std::sqrt(float)
00010a  ed8d0a01          VSTR     s0,[sp,#4]            ;423
00010e  ed9d1a03          VLDR     s2,[sp,#0xc]          ;425
000112  eef00a41          VMOV.F32 s1,s2                 ;425
000116  ed9d1a02          VLDR     s2,[sp,#8]            ;425
00011a  eeb00a41          VMOV.F32 s0,s2                 ;425
00011e  f7fffffe          BL       __hardfp_atan2f
000122  eddf0a41          VLDR     s1,|L2.552|
000126  ee200a20          VMUL.F32 s0,s0,s1              ;425
00012a  ee107a10          VMOV     r7,s0                 ;425
00012e  4638              MOV      r0,r7                 ;425
000130  f7fffffe          BL       __aeabi_f2d
000134  ec410b1a          VMOV     d10,r0,r1             ;425
000138  ed9f0b3c          VLDR     d0,|L2.556|
00013c  ec532b10          VMOV     r2,r3,d0              ;425
000140  f7fffffe          BL       __aeabi_ddiv
000144  ec410b19          VMOV     d9,r0,r1              ;425
000148  f7fffffe          BL       __aeabi_d2f
00014c  e000              B        |L2.336|
                  |L2.334|
00014e  e04e              B        |L2.494|
                  |L2.336|
000150  ee080a10          VMOV     s16,r0                ;425
000154  eeb00a48          VMOV.F32 s0,s16                ;425
000158  f7fffffe          BL       __hardfp_roundf
00015c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;425
000160  ee100a10          VMOV     r0,s0                 ;425
000164  b246              SXTB     r6,r0                 ;425
000166  4631              MOV      r1,r6                 ;425
000168  482c              LDR      r0,|L2.540|
00016a  f7fffffe          BL       _ZN6TModel13set_raw_pitchEa ; TModel::set_raw_pitch(signed char)
00016e  ed9d1a01          VLDR     s2,[sp,#4]            ;426
000172  eef00a41          VMOV.F32 s1,s2                 ;426
000176  ed9d1a00          VLDR     s2,[sp,#0]            ;426
00017a  eeb00a41          VMOV.F32 s0,s2                 ;426
00017e  f7fffffe          BL       __hardfp_atan2f
000182  eddf0a29          VLDR     s1,|L2.552|
000186  ee200a20          VMUL.F32 s0,s0,s1              ;426
00018a  ee107a10          VMOV     r7,s0                 ;426
00018e  4638              MOV      r0,r7                 ;426
000190  f7fffffe          BL       __aeabi_f2d
000194  ec410b1a          VMOV     d10,r0,r1             ;426
000198  ed9f0b24          VLDR     d0,|L2.556|
00019c  ec532b10          VMOV     r2,r3,d0              ;426
0001a0  f7fffffe          BL       __aeabi_ddiv
0001a4  ec410b19          VMOV     d9,r0,r1              ;426
0001a8  f7fffffe          BL       __aeabi_d2f
0001ac  ee080a10          VMOV     s16,r0                ;426
0001b0  eeb00a48          VMOV.F32 s0,s16                ;426
0001b4  f7fffffe          BL       __hardfp_roundf
0001b8  eebd0ac0          VCVT.S32.F32 s0,s0                 ;426
0001bc  ee100a10          VMOV     r0,s0                 ;426
0001c0  b246              SXTB     r6,r0                 ;426
0001c2  4631              MOV      r1,r6                 ;426
0001c4  4815              LDR      r0,|L2.540|
0001c6  f7fffffe          BL       _ZN6TModel12set_raw_rollEa ; TModel::set_raw_roll(signed char)
0001ca  4815              LDR      r0,|L2.544|
0001cc  6880              LDR      r0,[r0,#8]            ;428  ; _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage
0001ce  ee000a10          VMOV     s0,r0                 ;428
0001d2  4812              LDR      r0,|L2.540|
0001d4  f7fffffe          BL       _ZN6TModel11set_accel_zEf ; TModel::set_accel_z(float)
0001d8  4d0e              LDR      r5,|L2.532|
0001da  f5056461          ADD      r4,r5,#0xe10          ;448
0001de  2000              MOVS     r0,#0                 ;449
0001e0  aa04              ADD      r2,sp,#0x10           ;449
0001e2  4621              MOV      r1,r4                 ;449
0001e4  9004              STR      r0,[sp,#0x10]         ;449
0001e6  4628              MOV      r0,r5                 ;449
0001e8  f7fffffe          BL       _ZSt4fillIPfjEvT_S1_RKT0_ ; void std::fill<float*, unsigned>(T1, T1, const T2&)
0001ec  e003              B        |L2.502|
                  |L2.494|
0001ee  2100              MOVS     r1,#0                 ;458
0001f0  480a              LDR      r0,|L2.540|
0001f2  f7fffffe          BL       _ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE ; TModel::set_sample_valid_sign(TSettings::TValidSign)
                  |L2.502|
0001f6  2300              MOVS     r3,#0                 ;461
0001f8  461a              MOV      r2,r3                 ;461
0001fa  4619              MOV      r1,r3                 ;461
0001fc  480d              LDR      r0,|L2.564|
0001fe  6800              LDR      r0,[r0,#0]            ;461  ; MemsDevDoneSem
000200  f7fffffe          BL       xQueueGenericSend
000204  bf00              NOP      
000206  e716              B        |L2.54|
;;;463    //\------------------------------------------------------------------------------------------------------------------
                          ENDP

                  |L2.520|
                          DCD      MemsDevRdySem
                  |L2.524|
                          DCD      DevMemsStartSem
                  |L2.528|
                          DCD      _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE3Ctr ; [local to mems_cpp]::mems_process()::Ctr
                  |L2.532|
                          DCD      AccelBuf
                  |L2.536|
                          DCD      Mems
                  |L2.540|
                          DCD      Model
                  |L2.544|
                          DCD      _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage ; [local to mems_cpp]::mems_process()::AccAverage
                  |L2.548|
                          DCD      _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE12AccelAxisSum ; [local to mems_cpp]::mems_process()::AccelAxisSum
                  |L2.552|
000228  43340000          DCFS     0x43340000 ; 180
                  |L2.556|
00022c  54442d18          DCFD     0x400921fb54442d18 ; 3.1415926535897931
000230  400921fb
                  |L2.564|
                          DCD      MemsDevDoneSem

                          AREA ||i._ZN5TMems10chk_sampleERKN9TSettings10TAccelDataEN6TModel11TMemsOrientE||, CODE, READONLY, ALIGN=2

                  _ZN5TMems10chk_sampleERKN9TSettings10TAccelDataEN6TModel11TMemsOrientE PROC ; TMems::chk_sample(const TSettings::TAccelData&, TModel::TMemsOrient)
;;;72     
;;;73     bool TMems::chk_sample(const TModel::TAccelData &Data, TModel::TMemsOrient _ORIENT)
000000  b510              PUSH     {r4,lr}
;;;74     {
000002  4603              MOV      r3,r0
;;;75       return (
000004  6808              LDR      r0,[r1,#0]
000006  ee000a10          VMOV     s0,r0
00000a  eb020042          ADD      r0,r2,r2,LSL #1
00000e  4c2a              LDR      r4,|L3.184|
000010  eb0400c0          ADD      r0,r4,r0,LSL #3
000014  edd00a00          VLDR     s1,[r0,#0]
000018  eeb40ae0          VCMPE.F32 s0,s1
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  db47              BLT      |L3.178|
;;;76               ( Data.X >= AxesHyst[_ORIENT].X.Low )
;;;77               &&         
;;;78               ( Data.X <= AxesHyst[_ORIENT].X.High )
000022  6808              LDR      r0,[r1,#0]
000024  ee000a10          VMOV     s0,r0
000028  eb020042          ADD      r0,r2,r2,LSL #1
00002c  eb0400c0          ADD      r0,r4,r0,LSL #3
000030  edd00a01          VLDR     s1,[r0,#4]
000034  eeb40ae0          VCMPE.F32 s0,s1
000038  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003c  d839              BHI      |L3.178|
;;;79               &&         
;;;80               ( Data.Y >= AxesHyst[_ORIENT].Y.Low )
00003e  6848              LDR      r0,[r1,#4]
000040  ee000a10          VMOV     s0,r0
000044  eb020042          ADD      r0,r2,r2,LSL #1
000048  eb0400c0          ADD      r0,r4,r0,LSL #3
00004c  edd00a02          VLDR     s1,[r0,#8]
000050  eeb40ae0          VCMPE.F32 s0,s1
000054  eef1fa10          VMRS     APSR_nzcv,FPSCR
000058  db2b              BLT      |L3.178|
;;;81               &&         
;;;82               ( Data.Y <= AxesHyst[_ORIENT].Y.High )
00005a  6848              LDR      r0,[r1,#4]
00005c  ee000a10          VMOV     s0,r0
000060  eb020042          ADD      r0,r2,r2,LSL #1
000064  eb0400c0          ADD      r0,r4,r0,LSL #3
000068  edd00a03          VLDR     s1,[r0,#0xc]
00006c  eeb40ae0          VCMPE.F32 s0,s1
000070  eef1fa10          VMRS     APSR_nzcv,FPSCR
000074  d81d              BHI      |L3.178|
;;;83               &&         
;;;84               ( Data.Z >= AxesHyst[_ORIENT].Z.Low )
000076  6888              LDR      r0,[r1,#8]
000078  ee000a10          VMOV     s0,r0
00007c  eb020042          ADD      r0,r2,r2,LSL #1
000080  eb0400c0          ADD      r0,r4,r0,LSL #3
000084  edd00a04          VLDR     s1,[r0,#0x10]
000088  eeb40ae0          VCMPE.F32 s0,s1
00008c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000090  db0f              BLT      |L3.178|
;;;85               &&         
;;;86               ( Data.Z <= AxesHyst[_ORIENT].Z.High )
000092  6888              LDR      r0,[r1,#8]
000094  ee000a10          VMOV     s0,r0
000098  eb020042          ADD      r0,r2,r2,LSL #1
00009c  eb0400c0          ADD      r0,r4,r0,LSL #3
0000a0  edd00a05          VLDR     s1,[r0,#0x14]
0000a4  eeb40ae0          VCMPE.F32 s0,s1
0000a8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000ac  d801              BHI      |L3.178|
0000ae  2001              MOVS     r0,#1                 ;75
                  |L3.176|
;;;87              );
;;;88     }
0000b0  bd10              POP      {r4,pc}
                  |L3.178|
0000b2  2000              MOVS     r0,#0                 ;75
0000b4  e7fc              B        |L3.176|
;;;89     
                          ENDP

0000b6  0000              DCW      0x0000
                  |L3.184|
                          DCD      AxesHyst

                          AREA ||i._ZN5TMems11cnt_averageERA300_KN9TSettings10TAccelDataERS1_||, CODE, READONLY, ALIGN=1

                  _ZN5TMems11cnt_averageERA300_KN9TSettings10TAccelDataERS1_ PROC ; TMems::cnt_average(const TSettings::TAccelData(&)[300], TSettings::TAccelData&)
;;;276    //----- вычисление среднего значения из накопленных данных -----------
;;;277    void TMems::cnt_average( const TMemsAggregate &Aggregate, TModel::TAccelData &Average )
000000  b5fe              PUSH     {r1-r7,lr}
;;;278    {
000002  4606              MOV      r6,r0
;;;279      uint16_t Cnt = 0U;
000004  2000              MOVS     r0,#0
;;;280      
;;;281      for ( auto item : Aggregate )
000006  460c              MOV      r4,r1
000008  4623              MOV      r3,r4
00000a  f5046561          ADD      r5,r4,#0xe10
00000e  e026              B        |L4.94|
                  |L4.16|
000010  681f              LDR      r7,[r3,#0]
000012  9700              STR      r7,[sp,#0]
000014  685f              LDR      r7,[r3,#4]
000016  9701              STR      r7,[sp,#4]
000018  689f              LDR      r7,[r3,#8]
00001a  9702              STR      r7,[sp,#8]
;;;282      {
;;;283        Average.X += item.X;
00001c  6817              LDR      r7,[r2,#0]
00001e  ee007a10          VMOV     s0,r7
000022  eddd0a00          VLDR     s1,[sp,#0]
000026  ee300a20          VADD.F32 s0,s0,s1
00002a  ee107a10          VMOV     r7,s0
00002e  6017              STR      r7,[r2,#0]
;;;284        Average.Y += item.Y;
000030  6857              LDR      r7,[r2,#4]
000032  ee007a10          VMOV     s0,r7
000036  eddd0a01          VLDR     s1,[sp,#4]
00003a  ee300a20          VADD.F32 s0,s0,s1
00003e  ee107a10          VMOV     r7,s0
000042  6057              STR      r7,[r2,#4]
;;;285        Average.Z += item.Z;
000044  6897              LDR      r7,[r2,#8]
000046  ee007a10          VMOV     s0,r7
00004a  eddd0a02          VLDR     s1,[sp,#8]
00004e  ee300a20          VADD.F32 s0,s0,s1
000052  ee107a10          VMOV     r7,s0
000056  6097              STR      r7,[r2,#8]
;;;286        
;;;287        ++Cnt;
000058  1c47              ADDS     r7,r0,#1
00005a  b2b8              UXTH     r0,r7
00005c  330c              ADDS     r3,r3,#0xc
                  |L4.94|
00005e  42ab              CMP      r3,r5
000060  d1d6              BNE      |L4.16|
;;;288      }
;;;289      
;;;290      if ( Cnt != 0U )
000062  b318              CBZ      r0,|L4.172|
;;;291      {
;;;292        Average.X /= Cnt;
000064  6813              LDR      r3,[r2,#0]
000066  ee003a90          VMOV     s1,r3
00006a  ee000a10          VMOV     s0,r0
00006e  eeb81a40          VCVT.F32.U32 s2,s0
000072  ee800a81          VDIV.F32 s0,s1,s2
000076  ee103a10          VMOV     r3,s0
00007a  6013              STR      r3,[r2,#0]
;;;293        Average.Y /= Cnt;
00007c  6853              LDR      r3,[r2,#4]
00007e  ee003a90          VMOV     s1,r3
000082  ee000a10          VMOV     s0,r0
000086  eeb81a40          VCVT.F32.U32 s2,s0
00008a  ee800a81          VDIV.F32 s0,s1,s2
00008e  ee103a10          VMOV     r3,s0
000092  6053              STR      r3,[r2,#4]
;;;294        Average.Z /= Cnt;
000094  6893              LDR      r3,[r2,#8]
000096  ee003a90          VMOV     s1,r3
00009a  ee000a10          VMOV     s0,r0
00009e  eeb81a40          VCVT.F32.U32 s2,s0
0000a2  ee800a81          VDIV.F32 s0,s1,s2
0000a6  ee103a10          VMOV     r3,s0
0000aa  6093              STR      r3,[r2,#8]
                  |L4.172|
;;;295      }
;;;296    }
0000ac  bdfe              POP      {r1-r7,pc}
;;;297    //--------------------------------------------------------------------
                          ENDP


                          AREA ||i._ZN5TMems12acquire_dataERA300_N9TSettings10TAccelDataE||, CODE, READONLY, ALIGN=2

                  _ZN5TMems12acquire_dataERA300_N9TSettings10TAccelDataE PROC ; TMems::acquire_data(TSettings::TAccelData(&)[300])
;;;261    //----- сбор и накопление данных -------------------------------------
;;;262    void TMems::acquire_data( TMemsAggregate &Aggregate )
000000  b570              PUSH     {r4-r6,lr}
;;;263    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;264      uint16_t SampleCtr = 0U;
000006  2500              MOVS     r5,#0
;;;265      TModel::TAccelData Data;
;;;266      
;;;267      while ( SampleCtr < ACCEL_BUF_SIZE )
000008  e01a              B        |L5.64|
                  |L5.10|
;;;268      {
;;;269        xSemaphoreTake(RawDataMems_RdySem, portMAX_DELAY); //waiting external interrupt
00000a  2300              MOVS     r3,#0
00000c  1e5a              SUBS     r2,r3,#1
00000e  4619              MOV      r1,r3
000010  480d              LDR      r0,|L5.72|
000012  6800              LDR      r0,[r0,#0]  ; RawDataMems_RdySem
000014  f7fffffe          BL       xQueueGenericReceive
;;;270          Hw.collect_acc_data();
000018  6820              LDR      r0,[r4,#0]
00001a  f7fffffe          BL       _ZN8MPU_925020TAccGyroMagDriver_HL16collect_acc_dataEv ; MPU_9250::TAccGyroMagDriver_HL::collect_acc_data()
;;;271          AccelBuf[SampleCtr++] = *Hw.get_acc_data(); //сохранение выборок по 3-м осям
00001e  6820              LDR      r0,[r4,#0]
000020  f7fffffe          BL       _ZNK8MPU_925020TAccGyroMagDriver_HL12get_acc_dataEv ; MPU_9250::TAccGyroMagDriver_HL::get_acc_data() const
000024  4629              MOV      r1,r5
000026  1c6a              ADDS     r2,r5,#1
000028  b295              UXTH     r5,r2
00002a  eb010141          ADD      r1,r1,r1,LSL #1
00002e  4a07              LDR      r2,|L5.76|
000030  eb020181          ADD      r1,r2,r1,LSL #2
000034  6802              LDR      r2,[r0,#0]
000036  600a              STR      r2,[r1,#0]
000038  6842              LDR      r2,[r0,#4]
00003a  604a              STR      r2,[r1,#4]
00003c  6880              LDR      r0,[r0,#8]
00003e  6088              STR      r0,[r1,#8]
                  |L5.64|
000040  f5b57f96          CMP      r5,#0x12c             ;267
000044  dbe1              BLT      |L5.10|
;;;272      }
;;;273    }
000046  bd70              POP      {r4-r6,pc}
;;;274    //--------------------------------------------------------------------
                          ENDP

                  |L5.72|
                          DCD      RawDataMems_RdySem
                  |L5.76|
                          DCD      AccelBuf

                          AREA ||i._ZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataE||, CODE, READONLY, ALIGN=2

                  _ZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataE PROC ; TMems::is_valid_data(const TSettings::TAccelData(&)[300])
;;;299    //----- проверка валидности накопленных данных с выборками -----------
;;;300    bool TMems::is_valid_data( const TMemsAggregate &Aggregate ) //возвращает true если все выборки валидные
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;301    {  
000004  ed2d8b02          VPUSH    {d8}
000008  b084              SUB      sp,sp,#0x10
00000a  4680              MOV      r8,r0
00000c  460c              MOV      r4,r1
;;;302      constexpr float dG = 0.3f; 
00000e  ed9f0a67          VLDR     s0,|L6.428|
000012  eeb08a40          VMOV.F32 s16,s0
;;;303      
;;;304      for ( auto item : Aggregate )
000016  4626              MOV      r6,r4
000018  4635              MOV      r5,r6
00001a  f5066761          ADD      r7,r6,#0xe10
00001e  e0bf              B        |L6.416|
                  |L6.32|
000020  6828              LDR      r0,[r5,#0]
000022  9001              STR      r0,[sp,#4]
000024  6868              LDR      r0,[r5,#4]
000026  9002              STR      r0,[sp,#8]
000028  68a8              LDR      r0,[r5,#8]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4860              LDR      r0,|L6.432|
00002e  7800              LDRB     r0,[r0,#0]  ; _ZGV_ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
000030  f0000001          AND      r0,r0,#1
000034  b968              CBNZ     r0,|L6.82|
000036  485e              LDR      r0,|L6.432|
000038  f7fffffe          BL       __cxa_guard_acquire
00003c  b148              CBZ      r0,|L6.82|
;;;305      {
;;;306        static auto Prev = item;
00003e  485d              LDR      r0,|L6.436|
000040  9901              LDR      r1,[sp,#4]
000042  6001              STR      r1,[r0,#0]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
000044  9902              LDR      r1,[sp,#8]
000046  6041              STR      r1,[r0,#4]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
000048  9903              LDR      r1,[sp,#0xc]
00004a  6081              STR      r1,[r0,#8]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
00004c  4858              LDR      r0,|L6.432|
00004e  f7fffffe          BL       __cxa_guard_release
                  |L6.82|
;;;307        
;;;308        if (
000052  ed9d0a01          VLDR     s0,[sp,#4]
000056  eddf0a58          VLDR     s1,|L6.440|
00005a  eeb40ae0          VCMPE.F32 s0,s1
00005e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000062  dc7c              BGT      |L6.350|
;;;309            item.X > VALID_THR
;;;310            ||
;;;311            item.X < -VALID_THR
000064  ed9d0a01          VLDR     s0,[sp,#4]
000068  eddf0a54          VLDR     s1,|L6.444|
00006c  eeb40ae0          VCMPE.F32 s0,s1
000070  eef1fa10          VMRS     APSR_nzcv,FPSCR
000074  d37f              BCC      |L6.374|
;;;312            ||
;;;313            item.Y > VALID_THR
000076  ed9d0a02          VLDR     s0,[sp,#8]
00007a  eddf0a4f          VLDR     s1,|L6.440|
00007e  eeb40ae0          VCMPE.F32 s0,s1
000082  eef1fa10          VMRS     APSR_nzcv,FPSCR
000086  dc76              BGT      |L6.374|
;;;314            ||
;;;315            item.Y < -VALID_THR
000088  ed9d0a02          VLDR     s0,[sp,#8]
00008c  eddf0a4b          VLDR     s1,|L6.444|
000090  eeb40ae0          VCMPE.F32 s0,s1
000094  eef1fa10          VMRS     APSR_nzcv,FPSCR
000098  d36d              BCC      |L6.374|
;;;316            ||
;;;317            item.Z > VALID_THR
00009a  ed9d0a03          VLDR     s0,[sp,#0xc]
00009e  eddf0a46          VLDR     s1,|L6.440|
0000a2  eeb40ae0          VCMPE.F32 s0,s1
0000a6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000aa  dc64              BGT      |L6.374|
;;;318            ||
;;;319            item.Z < -VALID_THR
0000ac  ed9d0a03          VLDR     s0,[sp,#0xc]
0000b0  eddf0a42          VLDR     s1,|L6.444|
0000b4  eeb40ae0          VCMPE.F32 s0,s1
0000b8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000bc  d35b              BCC      |L6.374|
;;;320            ||
;;;321            Prev.X - item.X > dG
0000be  483d              LDR      r0,|L6.436|
0000c0  6800              LDR      r0,[r0,#0]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
0000c2  ee000a10          VMOV     s0,r0
0000c6  eddd0a01          VLDR     s1,[sp,#4]
0000ca  ee300a60          VSUB.F32 s0,s0,s1
0000ce  eddf0a37          VLDR     s1,|L6.428|
0000d2  eeb40ae0          VCMPE.F32 s0,s1
0000d6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000da  dc4c              BGT      |L6.374|
;;;322            ||
;;;323            Prev.X - item.X < -dG
0000dc  4835              LDR      r0,|L6.436|
0000de  6800              LDR      r0,[r0,#0]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
0000e0  ee000a10          VMOV     s0,r0
0000e4  eddd0a01          VLDR     s1,[sp,#4]
0000e8  ee300a60          VSUB.F32 s0,s0,s1
0000ec  eddf0a34          VLDR     s1,|L6.448|
0000f0  eeb40ae0          VCMPE.F32 s0,s1
0000f4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000f8  d33d              BCC      |L6.374|
;;;324            ||
;;;325            Prev.Y - item.Y > dG
0000fa  482e              LDR      r0,|L6.436|
0000fc  6840              LDR      r0,[r0,#4]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
0000fe  ee000a10          VMOV     s0,r0
000102  eddd0a02          VLDR     s1,[sp,#8]
000106  ee300a60          VSUB.F32 s0,s0,s1
00010a  eddf0a28          VLDR     s1,|L6.428|
00010e  eeb40ae0          VCMPE.F32 s0,s1
000112  eef1fa10          VMRS     APSR_nzcv,FPSCR
000116  dc2e              BGT      |L6.374|
;;;326            ||
;;;327            Prev.Y - item.Y < -dG
000118  4826              LDR      r0,|L6.436|
00011a  6840              LDR      r0,[r0,#4]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
00011c  ee000a10          VMOV     s0,r0
000120  eddd0a02          VLDR     s1,[sp,#8]
000124  ee300a60          VSUB.F32 s0,s0,s1
000128  eddf0a25          VLDR     s1,|L6.448|
00012c  eeb40ae0          VCMPE.F32 s0,s1
000130  eef1fa10          VMRS     APSR_nzcv,FPSCR
000134  d31f              BCC      |L6.374|
;;;328            ||
;;;329            Prev.Z - item.Z > dG
000136  481f              LDR      r0,|L6.436|
000138  6880              LDR      r0,[r0,#8]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
00013a  ee000a10          VMOV     s0,r0
00013e  eddd0a03          VLDR     s1,[sp,#0xc]
000142  ee300a60          VSUB.F32 s0,s0,s1
000146  eddf0a19          VLDR     s1,|L6.428|
00014a  eeb40ae0          VCMPE.F32 s0,s1
00014e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000152  dc10              BGT      |L6.374|
;;;330            ||
;;;331            Prev.Z - item.Z < -dG
000154  4817              LDR      r0,|L6.436|
000156  6880              LDR      r0,[r0,#8]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
000158  ee000a10          VMOV     s0,r0
00015c  e000              B        |L6.352|
                  |L6.350|
00015e  e00a              B        |L6.374|
                  |L6.352|
000160  eddd0a03          VLDR     s1,[sp,#0xc]
000164  ee300a60          VSUB.F32 s0,s0,s1
000168  eddf0a15          VLDR     s1,|L6.448|
00016c  eeb40ae0          VCMPE.F32 s0,s1
000170  eef1fa10          VMRS     APSR_nzcv,FPSCR
000174  d20c              BCS      |L6.400|
                  |L6.374|
;;;332           )
;;;333        {
;;;334          Prev = item;
000176  480f              LDR      r0,|L6.436|
000178  9901              LDR      r1,[sp,#4]
00017a  6001              STR      r1,[r0,#0]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
00017c  9902              LDR      r1,[sp,#8]
00017e  6041              STR      r1,[r0,#4]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
000180  9903              LDR      r1,[sp,#0xc]
000182  6081              STR      r1,[r0,#8]  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
;;;335          return false;
000184  2000              MOVS     r0,#0
                  |L6.390|
;;;336        }
;;;337        
;;;338        Prev = item;
;;;339      }
;;;340      
;;;341      return true;
;;;342    }
000186  b004              ADD      sp,sp,#0x10
000188  ecbd8b02          VPOP     {d8}
00018c  e8bd81f0          POP      {r4-r8,pc}
                  |L6.400|
000190  4808              LDR      r0,|L6.436|
000192  9901              LDR      r1,[sp,#4]            ;338
000194  6001              STR      r1,[r0,#0]            ;338  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
000196  9902              LDR      r1,[sp,#8]            ;338
000198  6041              STR      r1,[r0,#4]            ;338  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
00019a  9903              LDR      r1,[sp,#0xc]          ;338
00019c  6081              STR      r1,[r0,#8]            ;338  ; _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
00019e  350c              ADDS     r5,r5,#0xc            ;338
                  |L6.416|
0001a0  42bd              CMP      r5,r7                 ;338
0001a2  f47faf3d          BNE      |L6.32|
0001a6  2001              MOVS     r0,#1                 ;341
0001a8  e7ed              B        |L6.390|
;;;343    //--------------------------------------------------------------------
                          ENDP

0001aa  0000              DCW      0x0000
                  |L6.428|
0001ac  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  |L6.432|
                          DCD      _ZGV_ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
                  |L6.436|
                          DCD      _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev ; TMems::is_valid_data(const TSettings::TAccelData(&)[300])::Prev
                  |L6.440|
0001b8  3fa66666          DCFS     0x3fa66666 ; 1.2999999523162842
                  |L6.444|
0001bc  bfa66666          DCFS     0xbfa66666 ; -1.2999999523162842
                  |L6.448|
0001c0  be99999a          DCFS     0xbe99999a ; -0.30000001192092896

                          AREA ||i._ZN5TMems14chk_mems_stateEv||, CODE, READONLY, ALIGN=2

                  _ZN5TMems14chk_mems_stateEv PROC ; TMems::chk_mems_state()
;;;224    
;;;225    bool TMems::chk_mems_state()
000000  b570              PUSH     {r4-r6,lr}
;;;226    {
000002  4606              MOV      r6,r0
;;;227      TModel::TDevType DevType = Model.get_dev_type();
000004  480d              LDR      r0,|L7.60|
000006  f7fffffe          BL       _ZN6TModel12get_dev_typeEv ; TModel::get_dev_type()
00000a  4604              MOV      r4,r0
;;;228    	TModel::TMainState Err = TModel::TMainState::__ERR;
00000c  2500              MOVS     r5,#0
;;;229    	
;;;230    	if ( xSemaphoreTake( RawDataMems_RdySem, pdMS_TO_TICKS( 100U ) ) == pdFAIL ) //waiting external interrupt
00000e  2300              MOVS     r3,#0
000010  2264              MOVS     r2,#0x64
000012  4619              MOV      r1,r3
000014  480a              LDR      r0,|L7.64|
000016  6800              LDR      r0,[r0,#0]  ; RawDataMems_RdySem
000018  f7fffffe          BL       xQueueGenericReceive
00001c  b958              CBNZ     r0,|L7.54|
;;;231      {
;;;232    		if ( DevType == TModel::TDevType::_BASE )
00001e  b924              CBNZ     r4,|L7.42|
;;;233        {
;;;234      	  Model.set_base_mems( Err );
000020  4629              MOV      r1,r5
000022  4806              LDR      r0,|L7.60|
000024  f7fffffe          BL       _ZN6TModel13set_base_memsEN9TSettings10TMainStateE ; TModel::set_base_mems(TSettings::TMainState)
000028  e003              B        |L7.50|
                  |L7.42|
;;;235      	}
;;;236        else
;;;237        {
;;;238      	  Model.set_hc_mems( Err );
00002a  4629              MOV      r1,r5
00002c  4803              LDR      r0,|L7.60|
00002e  f7fffffe          BL       _ZN6TModel11set_hc_memsEN9TSettings10TMainStateE ; TModel::set_hc_mems(TSettings::TMainState)
                  |L7.50|
;;;239      	}
;;;240    		
;;;241      	return false;
000032  2000              MOVS     r0,#0
                  |L7.52|
;;;242      }
;;;243    	
;;;244    	return true;
;;;245    }
000034  bd70              POP      {r4-r6,pc}
                  |L7.54|
000036  2001              MOVS     r0,#1                 ;244
000038  e7fc              B        |L7.52|
;;;246    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      Model
                  |L7.64|
                          DCD      RawDataMems_RdySem

                          AREA ||i._ZN5TMems8cnt_dampERU8__packedfff||, CODE, READONLY, ALIGN=1

                  _ZN5TMems8cnt_dampERU8__packedfff PROC
;;;345    //----- демпфирование ------------------------------------------------
;;;346    void TMems::cnt_damp( __packed float &damp_axis, float cur_axis, float coeff )
000000  680a              LDR      r2,[r1,#0]
;;;347    {
;;;348      damp_axis = damp_axis + ( cur_axis - damp_axis ) / coeff;
000002  ee012a10          VMOV     s2,r2
000006  ee301a41          VSUB.F32 s2,s0,s2
00000a  eec11a20          VDIV.F32 s3,s2,s1
00000e  ee012a10          VMOV     s2,r2
000012  ee311a81          VADD.F32 s2,s3,s2
000016  ee112a10          VMOV     r2,s2
00001a  600a              STR      r2,[r1,#0]
;;;349    }
00001c  4770              BX       lr
;;;350    //--------------------------------------------------------------------
                          ENDP


                          AREA ||i._ZN5TMems8wait_semEPKN6TModel4TSemES3_PS3_||, CODE, READONLY, ALIGN=1

                  _ZN5TMems8wait_semEPKN6TModel4TSemES3_PS3_ PROC ; TMems::wait_sem(const TModel::TSem*, const TModel::TSem*, const TModel::TSem**)
;;;246    
;;;247    void TMems::wait_sem( const TModel::TSem *endC, const TModel::TSem *begC, const TModel::TSem **cEl )
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;248    {
000004  4682              MOV      r10,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;249      constexpr uint16_t DLY_MS = 5U;
00000c  f04f0905          MOV      r9,#5
;;;250      
;;;251      while (
000010  e002              B        |L9.24|
                  |L9.18|
;;;252              endC == ( *cEl = std::find_if( begC, endC, []( TModel::TSem item ){
;;;253                return ( xSemaphoreTake( *item.Sem, 0U ) ); //pdPASS эквивалентно true
;;;254              } ) )
;;;255            ) //пока не выдан никакой новый калибровочный семафор, задача подвисает в ожидании 
;;;256      {
;;;257        vTaskDelay( pdMS_TO_TICKS( DLY_MS ) );
000012  2005              MOVS     r0,#5
000014  f7fffffe          BL       vTaskDelay
                  |L9.24|
000018  4634              MOV      r4,r6                 ;252
00001a  46a8              MOV      r8,r5                 ;252
00001c  e000              B        |L9.32|
                  |L9.30|
00001e  3408              ADDS     r4,r4,#8              ;252
                  |L9.32|
000020  4544              CMP      r4,r8                 ;252
000022  d00c              BEQ      |L9.62|
000024  e9d40100          LDRD     r0,r1,[r4,#0]         ;252
000028  e9cd0100          STRD     r0,r1,[sp,#0]         ;252
00002c  9900              LDR      r1,[sp,#0]            ;253
00002e  2300              MOVS     r3,#0                 ;253
000030  461a              MOV      r2,r3                 ;253
000032  6808              LDR      r0,[r1,#0]            ;253
000034  4619              MOV      r1,r3                 ;253
000036  f7fffffe          BL       xQueueGenericReceive
00003a  2800              CMP      r0,#0                 ;253
00003c  d0ef              BEQ      |L9.30|
                  |L9.62|
00003e  603c              STR      r4,[r7,#0]            ;252
000040  42ac              CMP      r4,r5                 ;252
000042  d0e6              BEQ      |L9.18|
;;;258      }
;;;259    }
000044  e8bd87fc          POP      {r2-r10,pc}
;;;260    
                          ENDP


                          AREA ||i._ZN5TMems9acc_calibEv||, CODE, READONLY, ALIGN=2

                  _ZN5TMems9acc_calibEv PROC ; TMems::acc_calib()
;;;90     //----- процедура калибровки акселерометра ---------------------------
;;;91     void TMems::acc_calib()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;92     {
000004  f6ad1db4          SUB      sp,sp,#0x9b4
000008  4605              MOV      r5,r0
;;;93     //  constexpr uint16_t DLY_MS         =   5U;
;;;94       constexpr uint16_t ACCEL_BUF_SIZE = 100U;
00000a  2064              MOVS     r0,#0x64
00000c  f8cd09b0          STR      r0,[sp,#0x9b0]
;;;95       uint32_t           SampleCtr      =   0U;
000010  2400              MOVS     r4,#0
;;;96       TModel::TAccelData AccelBuf[ACCEL_BUF_SIZE]; //массив калибровочных данных акселерометра для обработки
;;;97       TModel::TAccelData Data;
;;;98       MTL_acc_cal_t      acc_cal;
;;;99       
;;;100      bool Repeat = false;     //флаг повторной калибровки
000012  2000              MOVS     r0,#0
000014  f8cd04d8          STR      r0,[sp,#0x4d8]
;;;101    
;;;102      auto begC = Model.CalibSem;
000018  4e81              LDR      r6,|L10.544|
;;;103      auto endC = &Model.CalibSem[TModel::TMemsOrient::_MAX];
00001a  f1060730          ADD      r7,r6,#0x30
;;;104    
;;;105      auto cEl = begC;
00001e  f8cd64d4          STR      r6,[sp,#0x4d4]
;;;106      cEl = std::find_if( begC, endC, []( TModel::TSem item ){
000022  46b0              MOV      r8,r6
000024  46b9              MOV      r9,r7
000026  e001              B        |L10.44|
                  |L10.40|
000028  f1080808          ADD      r8,r8,#8
                  |L10.44|
00002c  45c8              CMP      r8,r9
00002e  d00e              BEQ      |L10.78|
000030  e9d81200          LDRD     r1,r2,[r8,#0]
000034  f50d6099          ADD      r0,sp,#0x4c8
000038  c006              STM      r0!,{r1,r2}
;;;107        return ( xSemaphoreTake( *item.Sem, 0U ) ); //pdPASS эквивалентно true
00003a  f8dd14c8          LDR      r1,[sp,#0x4c8]
00003e  2300              MOVS     r3,#0
000040  461a              MOV      r2,r3
000042  6808              LDR      r0,[r1,#0]
000044  4619              MOV      r1,r3
000046  f7fffffe          BL       xQueueGenericReceive
00004a  2800              CMP      r0,#0
00004c  d0ec              BEQ      |L10.40|
                  |L10.78|
00004e  f8cd84d4          STR      r8,[sp,#0x4d4]        ;106
;;;108      } );
;;;109     
;;;110      size_t RtosHeapSize = xPortGetFreeHeapSize();
000052  f7fffffe          BL       xPortGetFreeHeapSize
000056  f8cd04d0          STR      r0,[sp,#0x4d0]
;;;111     
;;;112      if (
00005a  f8dd04d4          LDR      r0,[sp,#0x4d4]
00005e  4287              CMP      r7,r0
000060  d07d              BEQ      |L10.350|
;;;113          endC == cEl
;;;114         )
;;;115      {
;;;116        //калибровочных семафоров выдано не было
;;;117      }
;;;118      else //если какой-либо из калибровочных семафоров был выдан, то защелкиваем задачу на режим калибровки
;;;119      {
;;;120        //для получения достовеного результата калибровки\
;;;121          необходимо за один заход откалибровать\
;;;122          датчик во всех направлениях
;;;123        do
000062  bf00              NOP      
                  |L10.100|
;;;124        {
;;;125          if ( Repeat == true ) //если установлен флаг повторной калибровки
000064  f8dd04d8          LDR      r0,[sp,#0x4d8]
000068  2801              CMP      r0,#1
00006a  d106              BNE      |L10.122|
;;;126          {
;;;127            wait_sem( endC, begC, &cEl );
00006c  f20d43d4          ADD      r3,sp,#0x4d4
000070  4632              MOV      r2,r6
000072  4639              MOV      r1,r7
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       _ZN5TMems8wait_semEPKN6TModel4TSemES3_PS3_ ; TMems::wait_sem(const TModel::TSem*, const TModel::TSem*, const TModel::TSem**)
                  |L10.122|
;;;128          }
;;;129          
;;;130    //      Model.set_calib_position_ctr( TModel::TMemsOrient::_MAX  );
;;;131          Model.set_calib_position_ctr( TModel::TMemsOrient::_RESET );
00007a  2137              MOVS     r1,#0x37
00007c  4868              LDR      r0,|L10.544|
00007e  3830              SUBS     r0,r0,#0x30
000080  f7fffffe          BL       _ZN6TModel22set_calib_position_ctrENS_11TMemsOrientE ; TModel::set_calib_position_ctr(TModel::TMemsOrient)
;;;132        
;;;133          SemaphoreHandle_t *Tmp[ TModel::TMemsOrient::_MAX ] = 
000084  2118              MOVS     r1,#0x18
000086  f20d40b4          ADD      r0,sp,#0x4b4
00008a  f7fffffe          BL       __aeabi_memclr4
;;;134          {
;;;135            nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
;;;136          };
;;;137    
;;;138          auto begT = Tmp;
00008e  f20d4bb4          ADD      r11,sp,#0x4b4
;;;139          auto endT = &Tmp[TModel::TMemsOrient::_MAX];
000092  f20d48cc          ADD      r8,sp,#0x4cc
;;;140    
;;;141          for (;;)
000096  bf00              NOP      
                  |L10.152|
;;;142          {
;;;143            while ( SampleCtr < ACCEL_BUF_SIZE )
000098  e034              B        |L10.260|
                  |L10.154|
;;;144            {
;;;145              if ( !chk_mems_state() ) //ожидание выборки
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       _ZN5TMems14chk_mems_stateEv ; TMems::chk_mems_state()
0000a0  b918              CBNZ     r0,|L10.170|
                  |L10.162|
;;;146    					{
;;;147    					  return;
;;;148    					}
;;;149    
;;;150              Hw.collect_acc_data();
;;;151              Data = *Hw.get_acc_data();
;;;152    
;;;153              //сохранение выборок по 3-м осям
;;;154              AccelBuf[SampleCtr] = Data;
;;;155    
;;;156              if ( !chk_sample( AccelBuf[SampleCtr++], cEl->MemsOrient ) ) //если выборка невалидная
;;;157              {
;;;158                --SampleCtr; //следующая итерация перезапишет невалидную выборку
;;;159              }
;;;160            }
;;;161            SampleCtr = 0U;
;;;162            //набрано ACCEL_BUF_SIZE выборок
;;;163    
;;;164            float _AccelBuf[ACCEL_BUF_SIZE][3];
;;;165            auto beg = reinterpret_cast<float *>(AccelBuf);
;;;166            auto end = reinterpret_cast<float *>(&AccelBuf[ACCEL_BUF_SIZE]);
;;;167            std::copy( beg, end, reinterpret_cast<float *>(_AccelBuf) ); //копия в промежуточный массив
;;;168    
;;;169            MotionTL_CalibratePosition( _AccelBuf, ACCEL_BUF_SIZE, static_cast<MTL_cal_position_t>(cEl->MemsOrient) );
;;;170            std::fill( beg, end, 0U ); //обнуление массива с выборками
;;;171    
;;;172            Model.set_calib_process( TModel::TCalibProcess::__PERFORMED ); //ожидание следующей команды калибровки
;;;173                   
;;;174    //        Model.set_calib_position_ctr( Model.get_calib_position_ctr() - 1U );
;;;175    
;;;176            Tmp[cEl->MemsOrient] = cEl->Sem; //если был выдан тот же семафор что уже был выдан ранее,\
;;;177                                               то произойдет повторная калибровка в этом же направлении
;;;178                                               
;;;179    //        uint8_t UncalibPosCtr = 6U;
;;;180    //        for ( auto item : Tmp )
;;;181    //        {
;;;182    //          if ( item != nullptr )
;;;183    //          {
;;;184    //            --UncalibPosCtr;
;;;185    //          }
;;;186    //        }
;;;187            PosCtr = static_cast<uint8_t>(cEl->MemsOrient);
;;;188            
;;;189            Model.set_calib_position_ctr( cEl->MemsOrient );
;;;190    
;;;191            if ( 
;;;192                endT != std::find_if( begT, endT, []( SemaphoreHandle_t *item ){
;;;193                          return ( item == nullptr ); //pdPASS эквивалентно true
;;;194                        } )
;;;195               ) //если еще есть положения, в которых не было произведено калибровки
;;;196            {
;;;197              wait_sem( endC, begC, &cEl );
;;;198              Model.clr_calib_position_ctr( cEl->MemsOrient ); //сброс счетчика при повторной калибровке, если это необходимо          
;;;199            }
;;;200            else
;;;201            {          
;;;202              if ( MotionTL_GetCalValues( &acc_cal ) != MTL_cal_result_t::CAL_PASS )
;;;203              {
;;;204                Repeat = true; //необходима повторная калибровка
;;;205                Model.set_calib_process( TModel::TCalibProcess::__DENY ); //ожидание следующей команды калибровки
;;;206              }
;;;207              else
;;;208              {
;;;209                Repeat = false; //калибровка окончена успешно
;;;210                Model.set_calib_process( TModel::TCalibProcess::__PERFORMED );
;;;211              }
;;;212              
;;;213              break;
;;;214            }
;;;215          }
;;;216        } 
;;;217    		while ( Repeat );
;;;218    
;;;219        Model.set_accel_calib_sign( TModel::TIsAccCalib::_ACC_CALIBRATED );
;;;220        Model.set_accel_calib_data( *(TModel::TAccCalData *)&acc_cal );
;;;221      }
;;;222    }
0000a2  f60d1db4          ADD      sp,sp,#0x9b4
0000a6  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.170|
0000aa  6828              LDR      r0,[r5,#0]            ;150
0000ac  f7fffffe          BL       _ZN8MPU_925020TAccGyroMagDriver_HL16collect_acc_dataEv ; MPU_9250::TAccGyroMagDriver_HL::collect_acc_data()
0000b0  6828              LDR      r0,[r5,#0]            ;151
0000b2  f7fffffe          BL       _ZNK8MPU_925020TAccGyroMagDriver_HL12get_acc_dataEv ; MPU_9250::TAccGyroMagDriver_HL::get_acc_data() const
0000b6  6801              LDR      r1,[r0,#0]            ;151
0000b8  f8cd14f4          STR      r1,[sp,#0x4f4]        ;151
0000bc  6841              LDR      r1,[r0,#4]            ;151
0000be  f8cd14f8          STR      r1,[sp,#0x4f8]        ;151
0000c2  6880              LDR      r0,[r0,#8]            ;151
0000c4  f8cd04fc          STR      r0,[sp,#0x4fc]        ;151
0000c8  eb040044          ADD      r0,r4,r4,LSL #1       ;154
0000cc  f50d61a0          ADD      r1,sp,#0x500          ;154
0000d0  eb010180          ADD      r1,r1,r0,LSL #2       ;154
0000d4  f20d42f4          ADD      r2,sp,#0x4f4          ;154
0000d8  ca0c              LDM      r2,{r2,r3}            ;154
0000da  f8dd04fc          LDR      r0,[sp,#0x4fc]        ;154
0000de  e9c12300          STRD     r2,r3,[r1,#0]         ;154
0000e2  6088              STR      r0,[r1,#8]            ;154
0000e4  f8dd04d4          LDR      r0,[sp,#0x4d4]        ;156
0000e8  7902              LDRB     r2,[r0,#4]            ;156
0000ea  4620              MOV      r0,r4                 ;156
0000ec  1c64              ADDS     r4,r4,#1              ;156
0000ee  eb000040          ADD      r0,r0,r0,LSL #1       ;156
0000f2  f50d63a0          ADD      r3,sp,#0x500          ;156
0000f6  eb030180          ADD      r1,r3,r0,LSL #2       ;156
0000fa  4628              MOV      r0,r5                 ;156
0000fc  f7fffffe          BL       _ZN5TMems10chk_sampleERKN9TSettings10TAccelDataEN6TModel11TMemsOrientE ; TMems::chk_sample(const TSettings::TAccelData&, TModel::TMemsOrient)
000100  b900              CBNZ     r0,|L10.260|
000102  1e64              SUBS     r4,r4,#1              ;158
                  |L10.260|
000104  2c64              CMP      r4,#0x64              ;143
000106  d3c8              BCC      |L10.154|
000108  2400              MOVS     r4,#0                 ;161
00010a  f50d69a0          ADD      r9,sp,#0x500          ;165
00010e  f50d6a1b          ADD      r10,sp,#0x9b0         ;166
000112  4648              MOV      r0,r9                 ;167
000114  4651              MOV      r1,r10                ;167
000116  466a              MOV      r2,sp                 ;167
000118  e005              B        |L10.294|
                  |L10.282|
00011a  ed900a00          VLDR     s0,[r0,#0]            ;167
00011e  ed820a00          VSTR     s0,[r2,#0]            ;167
000122  1d00              ADDS     r0,r0,#4              ;167
000124  1d12              ADDS     r2,r2,#4              ;167
                  |L10.294|
000126  4288              CMP      r0,r1                 ;167
000128  d1f7              BNE      |L10.282|
00012a  bf00              NOP                            ;167
00012c  f8dd04d4          LDR      r0,[sp,#0x4d4]        ;169
000130  7902              LDRB     r2,[r0,#4]            ;169
000132  2164              MOVS     r1,#0x64              ;169
000134  4668              MOV      r0,sp                 ;169
000136  f7fffffe          BL       MotionTL_CalibratePosition
00013a  2000              MOVS     r0,#0                 ;170
00013c  f50d6296          ADD      r2,sp,#0x4b0          ;170
000140  4651              MOV      r1,r10                ;170
000142  f8cd04b0          STR      r0,[sp,#0x4b0]        ;170
000146  4648              MOV      r0,r9                 ;170
000148  f7fffffe          BL       _ZSt4fillIPfjEvT_S1_RKT0_ ; void std::fill<float*, unsigned>(T1, T1, const T2&)
00014c  215a              MOVS     r1,#0x5a              ;172
00014e  4834              LDR      r0,|L10.544|
000150  3830              SUBS     r0,r0,#0x30           ;172
000152  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
000156  f8dd04d4          LDR      r0,[sp,#0x4d4]        ;176
00015a  6800              LDR      r0,[r0,#0]            ;176
00015c  e000              B        |L10.352|
                  |L10.350|
00015e  e05d              B        |L10.540|
                  |L10.352|
000160  f8dd14d4          LDR      r1,[sp,#0x4d4]        ;176
000164  7909              LDRB     r1,[r1,#4]            ;176
000166  f20d42b4          ADD      r2,sp,#0x4b4          ;176
00016a  f8420021          STR      r0,[r2,r1,LSL #2]     ;176
00016e  f8dd04d4          LDR      r0,[sp,#0x4d4]        ;187
000172  7900              LDRB     r0,[r0,#4]            ;187
000174  492b              LDR      r1,|L10.548|
000176  7008              STRB     r0,[r1,#0]            ;187
000178  f8dd04d4          LDR      r0,[sp,#0x4d4]        ;189
00017c  7901              LDRB     r1,[r0,#4]            ;189
00017e  4828              LDR      r0,|L10.544|
000180  3830              SUBS     r0,r0,#0x30           ;189
000182  f7fffffe          BL       _ZN6TModel22set_calib_position_ctrENS_11TMemsOrientE ; TModel::set_calib_position_ctr(TModel::TMemsOrient)
000186  4658              MOV      r0,r11                ;191
000188  4641              MOV      r1,r8                 ;191
00018a  e000              B        |L10.398|
                  |L10.396|
00018c  1d00              ADDS     r0,r0,#4              ;191
                  |L10.398|
00018e  4288              CMP      r0,r1                 ;191
000190  d006              BEQ      |L10.416|
000192  6802              LDR      r2,[r0,#0]            ;191
000194  b90a              CBNZ     r2,|L10.410|
000196  2301              MOVS     r3,#1                 ;193
000198  e000              B        |L10.412|
                  |L10.410|
00019a  2300              MOVS     r3,#0                 ;193
                  |L10.412|
00019c  2b00              CMP      r3,#0                 ;193
00019e  d0f5              BEQ      |L10.396|
                  |L10.416|
0001a0  4540              CMP      r0,r8                 ;191
0001a2  d00e              BEQ      |L10.450|
0001a4  f20d43d4          ADD      r3,sp,#0x4d4          ;197
0001a8  4632              MOV      r2,r6                 ;197
0001aa  4639              MOV      r1,r7                 ;197
0001ac  4628              MOV      r0,r5                 ;197
0001ae  f7fffffe          BL       _ZN5TMems8wait_semEPKN6TModel4TSemES3_PS3_ ; TMems::wait_sem(const TModel::TSem*, const TModel::TSem*, const TModel::TSem**)
0001b2  f8dd04d4          LDR      r0,[sp,#0x4d4]        ;198
0001b6  7901              LDRB     r1,[r0,#4]            ;198
0001b8  4819              LDR      r0,|L10.544|
0001ba  3830              SUBS     r0,r0,#0x30           ;198
0001bc  f7fffffe          BL       _ZN6TModel22clr_calib_position_ctrENS_11TMemsOrientE ; TModel::clr_calib_position_ctr(TModel::TMemsOrient)
0001c0  e016              B        |L10.496|
                  |L10.450|
0001c2  f20d40dc          ADD      r0,sp,#0x4dc          ;202
0001c6  f7fffffe          BL       MotionTL_GetCalValues
0001ca  b140              CBZ      r0,|L10.478|
0001cc  2001              MOVS     r0,#1                 ;204
0001ce  f8cd04d8          STR      r0,[sp,#0x4d8]        ;204
0001d2  210a              MOVS     r1,#0xa               ;205
0001d4  4812              LDR      r0,|L10.544|
0001d6  3830              SUBS     r0,r0,#0x30           ;205
0001d8  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
0001dc  e007              B        |L10.494|
                  |L10.478|
0001de  2000              MOVS     r0,#0                 ;209
0001e0  f8cd04d8          STR      r0,[sp,#0x4d8]        ;209
0001e4  215a              MOVS     r1,#0x5a              ;210
0001e6  480e              LDR      r0,|L10.544|
0001e8  3830              SUBS     r0,r0,#0x30           ;210
0001ea  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
                  |L10.494|
0001ee  e000              B        |L10.498|
                  |L10.496|
0001f0  e752              B        |L10.152|
                  |L10.498|
0001f2  bf00              NOP                            ;213
0001f4  f8dd04d8          LDR      r0,[sp,#0x4d8]        ;217
0001f8  2800              CMP      r0,#0                 ;217
0001fa  f47faf33          BNE      |L10.100|
0001fe  f20d41cc          ADD      r1,sp,#0x4cc          ;219
000202  f8cd04cc          STR      r0,[sp,#0x4cc]        ;219
000206  4806              LDR      r0,|L10.544|
000208  3830              SUBS     r0,r0,#0x30           ;219
00020a  f7fffffe          BL       _ZN6TModel20set_accel_calib_signERKN9TSettings11TIsAccCalibE ; TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)
00020e  f20d41dc          ADD      r1,sp,#0x4dc          ;220
000212  4803              LDR      r0,|L10.544|
000214  3830              SUBS     r0,r0,#0x30           ;220
000216  f7fffffe          BL       _ZN6TModel20set_accel_calib_dataERKN9TSettings11TAccCalDataE ; TModel::set_accel_calib_data(const TSettings::TAccCalData&)
00021a  bf00              NOP                            ;221
                  |L10.540|
00021c  bf00              NOP      
00021e  e740              B        |L10.162|
;;;223    //--------------------------------------------------------------------
                          ENDP

                  |L10.544|
                          DCD      Model+0x30
                  |L10.548|
                          DCD      PosCtr

                          AREA ||i._ZN5TMemsC1ERN8MPU_925020TAccGyroMagDriver_HLE||, CODE, READONLY, ALIGN=1

                  _ZN5TMemsC2ERN8MPU_925020TAccGyroMagDriver_HLE                  ; Alternate entry point ; TMems::TMems__sub_object(MPU_9250::TAccGyroMagDriver_HL&)
                  _ZN5TMemsC1ERN8MPU_925020TAccGyroMagDriver_HLE PROC ; TMems::TMems(MPU_9250::TAccGyroMagDriver_HL&)
;;;60     
;;;61     TMems::TMems( MPU_9250::TAccGyroMagDriver_HL &_Hw )
;;;62     :
;;;63     Hw( _Hw )
;;;64     {
;;;65     
;;;66     }
;;;67     
000000  6001              STR      r1,[r0,#0]
000002  4770              BX       lr
                          ENDP


                          AREA ||i._ZN5TMemsD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN5TMemsD2Ev                  ; Alternate entry point ; TMems::~TMems__sub_object()
                  _ZN5TMemsD1Ev PROC ; TMems::~TMems()
;;;67     
;;;68     TMems::~TMems()
;;;69     {
;;;70     
;;;71     }
;;;72     
000000  4770              BX       lr
                          ENDP


                          AREA ||i.__sti___8_mems_cpp_Mems||, CODE, READONLY, ALIGN=2

                  __sti___8_mems_cpp_Mems PROC
000000  b510              PUSH     {r4,lr}
000002  4905              LDR      r1,|L13.24|
000004  4805              LDR      r0,|L13.28|
000006  f7fffffe          BL       _ZN5TMemsC1ERN8MPU_925020TAccGyroMagDriver_HLE ; TMems::TMems(MPU_9250::TAccGyroMagDriver_HL&)
00000a  4604              MOV      r4,r0
00000c  4a04              LDR      r2,|L13.32|
00000e  4905              LDR      r1,|L13.36|
000010  f7fffffe          BL       __aeabi_atexit
000014  bd10              POP      {r4,pc}
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      AccMagGyro
                  |L13.28|
                          DCD      Mems
                  |L13.32|
                          DCD      __dso_handle
                  |L13.36|
                          DCD      _ZN5TMemsD1Ev ; TMems::~TMems()

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN5TMems11cnt_averageERA300_KN9TSettings10TAccelDataERS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems11cnt_averageERA300_KN9TSettings10TAccelDataERS1_||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataE||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN5TMems12acquire_dataERA300_N9TSettings10TAccelDataE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems12acquire_dataERA300_N9TSettings10TAccelDataE||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN25_INTERNAL_8_mems_cpp_Mems12mems_processEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN25_INTERNAL_8_mems_cpp_Mems12mems_processEv||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._Z4memsPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z4memsPv||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN5TMemsC1ERN8MPU_925020TAccGyroMagDriver_HLE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMemsC1ERN8MPU_925020TAccGyroMagDriver_HLE||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN5TMemsD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMemsD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN5TMems8wait_semEPKN6TModel4TSemES3_PS3_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems8wait_semEPKN6TModel4TSemES3_PS3_||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN5TMems10chk_sampleERKN9TSettings10TAccelDataEN6TModel11TMemsOrientE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems10chk_sampleERKN9TSettings10TAccelDataEN6TModel11TMemsOrientE||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN5TMems14chk_mems_stateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems14chk_mems_stateEv||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN5TMems9acc_calibEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems9acc_calibEv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN5TMems8cnt_dampERU8__packedfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5TMems8cnt_dampERU8__packedfff||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i.__sti___8_mems_cpp_Mems||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___8_mems_cpp_Mems||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  AccelBuf
                          %        3600
                  _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE10AccAverage ; [local to mems_cpp]::mems_process()::AccAverage
                          %        12
                  _ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev ; TMems::is_valid_data(const TSettings::TAccelData(&)[300])::Prev
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  AxesHyst
000000  3f666666          DCFS     0x3f666666 ; 0.89999997615814209
000004  3f8ccccd          DCFS     0x3f8ccccd ; 1.1000000238418579
000008  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
00000c  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000010  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
000014  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000018  bf8ccccd          DCFS     0xbf8ccccd ; -1.1000000238418579
00001c  bf666666          DCFS     0xbf666666 ; -0.89999997615814209
000020  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
000024  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000028  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
00002c  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000030  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
000034  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000038  3f666666          DCFS     0x3f666666 ; 0.89999997615814209
00003c  3f8ccccd          DCFS     0x3f8ccccd ; 1.1000000238418579
000040  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
000044  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000048  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
00004c  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000050  bf8ccccd          DCFS     0xbf8ccccd ; -1.1000000238418579
000054  bf666666          DCFS     0xbf666666 ; -0.89999997615814209
000058  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
00005c  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000060  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
000064  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000068  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
00006c  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000070  3f666666          DCFS     0x3f666666 ; 0.89999997615814209
000074  3f8ccccd          DCFS     0x3f8ccccd ; 1.1000000238418579
000078  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
00007c  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000080  bdcccccd          DCFS     0xbdcccccd ; -0.10000000149011612
000084  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
000088  bf8ccccd          DCFS     0xbf8ccccd ; -1.1000000238418579
00008c  bf666666          DCFS     0xbf666666 ; -0.89999997615814209

                          AREA ||.data||, DATA, ALIGN=2

                  Mems
                          DCD      0x00000000
                  PosCtr
000004  00                DCB      0x00
                  _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE3Ctr ; [local to mems_cpp]::mems_process()::Ctr
000005  000000            DCB      0x00,0x00,0x00
                  _ZZN25_INTERNAL_8_mems_cpp_Mems12mems_processEvE12AccelAxisSum ; [local to mems_cpp]::mems_process()::AccelAxisSum
000008  00000000          DCFS     0x00000000 ; 0
                  _ZGV_ZZN5TMems13is_valid_dataERA300_KN9TSettings10TAccelDataEE4Prev
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_mems_cpp_Mems

                          AREA ||t._ZSt4fillIPfjEvT_S1_RKT0_||, COMGROUP=_ZSt4fillIPfjEvT_S1_RKT0_, CODE, READONLY, ALIGN=1

                  _ZSt4fillIPfjEvT_S1_RKT0_ PROC ; void std::fill<float*, unsigned>(T1, T1, const T2&)
;;;121    template <class _FwdIter, class _TypeT>
;;;122    inline void fill (_FwdIter __first, _FwdIter __last, const _TypeT& __value)
000000  e006              B        |L89.16|
                  |L89.2|
;;;123    {
;;;124        _RWSTD_ASSERT_RANGE (__first, __last);
;;;125    
;;;126        for (;__first != __last; ++__first)
;;;127            *__first = __value;
000002  ed920a00          VLDR     s0,[r2,#0]
000006  eeb80a40          VCVT.F32.U32 s0,s0
00000a  ed800a00          VSTR     s0,[r0,#0]
00000e  1d00              ADDS     r0,r0,#4              ;126
                  |L89.16|
000010  4288              CMP      r0,r1                 ;126
000012  d1f6              BNE      |L89.2|
;;;128    }
000014  4770              BX       lr
;;;129    
                          ENDP


                          AREA ||area_number.90||, COMGROUP=_ZSt4fillIPfjEvT_S1_RKT0_, LINKORDER=||t._ZSt4fillIPfjEvT_S1_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.90||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt4fillIPfjEvT_S1_RKT0_||
                          DCD      0x00000001

                          AREA ||i._ZSt3powfi||, COMGROUP=_ZSt3powfi, CODE, READONLY, ALIGN=1

                  _ZSt3powfi PROC ; std::pow(float, int)
;;;918        inline float pow(float __x, float __y)      { return powf(__x,__y); }
;;;919        inline float pow(float __x, int __y)     { return powf(__x, (float)__y); }
000000  b510              PUSH     {r4,lr}
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
00000a  4604              MOV      r4,r0
00000c  ee004a10          VMOV     s0,r4
000010  eef80ac0          VCVT.F32.S32 s1,s0
000014  eeb00a48          VMOV.F32 s0,s16
000018  f7fffffe          BL       __hardfp_powf
00001c  ecbd8b02          VPOP     {d8}
000020  bd10              POP      {r4,pc}
;;;920        inline float sin(float __x)   { return sinf(__x); }
                          ENDP


                          AREA ||area_number.97||, COMGROUP=_ZSt3powfi, LINKORDER=||i._ZSt3powfi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.97||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt3powfi||
                          DCD      0x00000001

                          AREA ||i._ZSt4sqrtf||, COMGROUP=_ZSt4sqrtf, CODE, READONLY, ALIGN=1

                  _ZSt4sqrtf PROC ; std::sqrt(float)
;;;921        inline float sinh(float __x)  { return sinhf(__x); }
;;;922        inline float sqrt(float __x)  { return sqrtf(__x); }
000000  b510              PUSH     {r4,lr}
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
00000a  eeb00a48          VMOV.F32 s0,s16
00000e  f7fffffe          BL       __hardfp_sqrtf
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;923        inline float _sqrt(float __x) { return _sqrtf(__x); }
                          ENDP


                          AREA ||area_number.104||, COMGROUP=_ZSt4sqrtf, LINKORDER=||i._ZSt4sqrtf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.104||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZSt4sqrtf||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "Source\\Tasks\\src\\mems.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_mems_cpp_Mems___ZN25_INTERNAL_8_mems_cpp_Mems7__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___8_mems_cpp_Mems___ZN25_INTERNAL_8_mems_cpp_Mems7__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_mems_cpp_Mems___ZN25_INTERNAL_8_mems_cpp_Mems7__REVSHEi|
#line 402
|__asm___8_mems_cpp_Mems___ZN25_INTERNAL_8_mems_cpp_Mems7__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_mems_cpp_Mems___ZN25_INTERNAL_8_mems_cpp_Mems5__RRXEj|
#line 587
|__asm___8_mems_cpp_Mems___ZN25_INTERNAL_8_mems_cpp_Mems5__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
