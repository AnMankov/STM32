; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\main.crf Source\Main\src\main.cpp]
                          THUMB

                          AREA ||i._Z11cfg_sys_clkv||, CODE, READONLY, ALIGN=2

                  _Z11cfg_sys_clkv PROC ; cfg_sys_clk()
;;;517    */
;;;518    void cfg_sys_clk()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;519    {
000004  b098              SUB      sp,sp,#0x60
;;;520      struct TFreqRange
;;;521      {
;;;522        uint8_t Min;
;;;523        uint8_t Max;
;;;524      };
;;;525    
;;;526      constexpr TFreqRange FreqRange[TClkSrc::_MAX][TVcoreRange::_MAX] =
000006  4b8d              LDR      r3,|L1.572|
000008  cb0f              LDM      r3,{r0-r3}
00000a  ac14              ADD      r4,sp,#0x50
00000c  c40f              STM      r4!,{r0-r3}
;;;527      {
;;;528        // Range 1       Range 2
;;;529        { { 26U, 48U }, { 0U, 26U } }, //_HSE
;;;530        { {  0U, 16U }, { 0U, 16U } }, //_HSI16
;;;531        { { 24U, 48U }, { 0U, 24U } }, //_MSI
;;;532        { { 26U, 80U }, { 0U, 26U } }  //_PLL
;;;533      };
;;;534    
;;;535      //After reset, the CPU clock frequency is 4 MHz and 0 wait state (WS)
;;;536      constexpr uint32_t HCLK             = HSE_VALUE / 1000000U; //MHz
00000e  2708              MOVS     r7,#8
;;;537    //  constexpr uint32_t HCLK             = 32; //MHz
;;;538      constexpr TClkSrc::T ClkSrc = TClkSrc::_HSE;
000010  f04f0800          MOV      r8,#0
;;;539    //  constexpr TClkSrc::T ClkSrc = TClkSrc::_PLL;
;;;540      TVcoreRange::T VcoreRange;
;;;541      TLatency::T    Latency;
;;;542    
;;;543      assert( HCLK <= 80U ); //максимально допустимая частота для STM32L431CCT6
;;;544     
;;;545      for ( TVcoreRange::T ctr = TVcoreRange::_MIN; ctr < TVcoreRange::_MAX; ++(uint8_t)ctr )
000014  2000              MOVS     r0,#0
000016  e00e              B        |L1.54|
                  |L1.24|
;;;546      {
;;;547        if (
000018  a914              ADD      r1,sp,#0x50
00001a  f8111010          LDRB     r1,[r1,r0,LSL #1]
00001e  2908              CMP      r1,#8
000020  d807              BHI      |L1.50|
;;;548            HCLK >= FreqRange[ClkSrc][ctr].Min
;;;549            &&
;;;550            HCLK <= FreqRange[ClkSrc][ctr].Max
000022  a914              ADD      r1,sp,#0x50
000024  eb010140          ADD      r1,r1,r0,LSL #1
000028  7849              LDRB     r1,[r1,#1]
00002a  2908              CMP      r1,#8
00002c  d301              BCC      |L1.50|
;;;551           )
;;;552        {
;;;553          VcoreRange = ctr;
00002e  4604              MOV      r4,r0
;;;554          break;
000030  e003              B        |L1.58|
                  |L1.50|
000032  1c41              ADDS     r1,r0,#1              ;545
000034  b2c8              UXTB     r0,r1                 ;545
                  |L1.54|
000036  2802              CMP      r0,#2                 ;545
000038  dbee              BLT      |L1.24|
                  |L1.58|
;;;555        }    
;;;556      }
;;;557      
;;;558      constexpr TFreqRange FreqRangeWs[TVcoreRange::_MAX][TLatency::_MAX] =
00003a  2214              MOVS     r2,#0x14
00003c  497f              LDR      r1,|L1.572|
00003e  3110              ADDS     r1,r1,#0x10
000040  a80f              ADD      r0,sp,#0x3c
000042  f7fffffe          BL       __aeabi_memcpy4
;;;559      {
;;;560        //  _0_WS        _1_WS         _2_WS         _3_WS         _4_WS
;;;561        { { 6U, 16U }, { 12U, 32U }, { 18U, 48U }, { 26U, 64U }, { 26U, 80U } }, //Range 1
;;;562        { { 0U,  6U }, {  0U, 12U }, {  0U, 18U }, {  0U, 26U }, {  0U, 26U } }, //Range 2
;;;563      };
;;;564      
;;;565      for ( TLatency::T ctr = TLatency::_MIN; ctr < TLatency::_MAX; ++(uint8_t)ctr )
000046  2000              MOVS     r0,#0
000048  e015              B        |L1.118|
                  |L1.74|
;;;566      {
;;;567        if (
00004a  eb040184          ADD      r1,r4,r4,LSL #2
00004e  aa0f              ADD      r2,sp,#0x3c
000050  eb020141          ADD      r1,r2,r1,LSL #1
000054  f8111010          LDRB     r1,[r1,r0,LSL #1]
000058  2908              CMP      r1,#8
00005a  d80a              BHI      |L1.114|
;;;568            HCLK >= FreqRangeWs[VcoreRange][ctr].Min
;;;569            &&
;;;570            HCLK <= FreqRangeWs[VcoreRange][ctr].Max
00005c  eb040184          ADD      r1,r4,r4,LSL #2
000060  eb020141          ADD      r1,r2,r1,LSL #1
000064  eb010140          ADD      r1,r1,r0,LSL #1
000068  7849              LDRB     r1,[r1,#1]
00006a  2908              CMP      r1,#8
00006c  d301              BCC      |L1.114|
;;;571           )
;;;572        {
;;;573          Latency = ctr;
00006e  4605              MOV      r5,r0
;;;574          break;
000070  e003              B        |L1.122|
                  |L1.114|
000072  1c41              ADDS     r1,r0,#1              ;565
000074  b2c8              UXTB     r0,r1                 ;565
                  |L1.118|
000076  2805              CMP      r0,#5                 ;565
000078  dbe7              BLT      |L1.74|
                  |L1.122|
;;;575        }
;;;576      }
;;;577    
;;;578      uint32_t LatMask[] =
00007a  2214              MOVS     r2,#0x14
00007c  496f              LDR      r1,|L1.572|
00007e  3124              ADDS     r1,r1,#0x24
000080  a80a              ADD      r0,sp,#0x28
000082  f7fffffe          BL       __aeabi_memcpy4
;;;579      {
;;;580        LL_FLASH_LATENCY_0,
;;;581        LL_FLASH_LATENCY_1,
;;;582        LL_FLASH_LATENCY_2,
;;;583        LL_FLASH_LATENCY_3,
;;;584        LL_FLASH_LATENCY_4,
;;;585      };
;;;586      
;;;587      uint32_t VsMask[] =
000086  496d              LDR      r1,|L1.572|
000088  3138              ADDS     r1,r1,#0x38
00008a  c903              LDM      r1,{r0,r1}
00008c  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;588      {
;;;589        LL_PWR_REGU_VOLTAGE_SCALE1,
;;;590        LL_PWR_REGU_VOLTAGE_SCALE2,
;;;591      };
;;;592        
;;;593      do { LL_FLASH_SetLatency( LatMask[Latency] ); } while ( LL_FLASH_GetLatency() != LatMask[Latency] );
000090  bf00              NOP      
                  |L1.146|
000092  a90a              ADD      r1,sp,#0x28
000094  f8510025          LDR      r0,[r1,r5,LSL #2]
000098  4969              LDR      r1,|L1.576|
00009a  6809              LDR      r1,[r1,#0]
00009c  f0210107          BIC      r1,r1,#7
0000a0  4301              ORRS     r1,r1,r0
0000a2  4a67              LDR      r2,|L1.576|
0000a4  6011              STR      r1,[r2,#0]
0000a6  bf00              NOP      
0000a8  bf00              NOP      
0000aa  4610              MOV      r0,r2
0000ac  6800              LDR      r0,[r0,#0]
0000ae  f0000007          AND      r0,r0,#7
0000b2  a90a              ADD      r1,sp,#0x28
0000b4  f8511025          LDR      r1,[r1,r5,LSL #2]
0000b8  4288              CMP      r0,r1
0000ba  d1ea              BNE      |L1.146|
;;;594      
;;;595      LL_PWR_SetRegulVoltageScaling( VsMask[VcoreRange] );
0000bc  a908              ADD      r1,sp,#0x20
0000be  f8510024          LDR      r0,[r1,r4,LSL #2]
0000c2  4960              LDR      r1,|L1.580|
0000c4  6809              LDR      r1,[r1,#0]
0000c6  f42161c0          BIC      r1,r1,#0x600
0000ca  4301              ORRS     r1,r1,r0
0000cc  4a5d              LDR      r2,|L1.580|
0000ce  6011              STR      r1,[r2,#0]
0000d0  bf00              NOP      
;;;596    
;;;597    
;;;598      //Voltage scaling range selection по умолчанию в Range 1 - до 80МГц
;;;599    
;;;600      LL_RCC_HSE_Enable();
0000d2  bf00              NOP      
0000d4  485c              LDR      r0,|L1.584|
0000d6  6800              LDR      r0,[r0,#0]
0000d8  f4403080          ORR      r0,r0,#0x10000
0000dc  495a              LDR      r1,|L1.584|
0000de  6008              STR      r0,[r1,#0]
0000e0  bf00              NOP      
;;;601      while(LL_RCC_HSE_IsReady() != 1)
0000e2  bf00              NOP      
                  |L1.228|
0000e4  bf00              NOP      
0000e6  4858              LDR      r0,|L1.584|
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f3c04040          UBFX     r0,r0,#17,#1
0000ee  2800              CMP      r0,#0
0000f0  d0f8              BEQ      |L1.228|
;;;602      {
;;;603    
;;;604      }
;;;605    
;;;606      LL_RCC_MSI_Disable();
0000f2  bf00              NOP      
0000f4  4854              LDR      r0,|L1.584|
0000f6  6800              LDR      r0,[r0,#0]
0000f8  f0200001          BIC      r0,r0,#1
0000fc  4952              LDR      r1,|L1.584|
0000fe  6008              STR      r0,[r1,#0]
000100  bf00              NOP      
;;;607      
;;;608      do {} while ( LL_RCC_MSI_IsReady() != 1);
000102  bf00              NOP      
                  |L1.260|
000104  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv ; [local to main_cpp]::LL_RCC_MSI_IsReady()
000108  2801              CMP      r0,#1
00010a  d1fb              BNE      |L1.260|
;;;609      
;;;610      LL_RCC_MSI_EnableRangeSelection();
00010c  bf00              NOP      
00010e  484e              LDR      r0,|L1.584|
000110  6800              LDR      r0,[r0,#0]
000112  f0400008          ORR      r0,r0,#8
000116  494c              LDR      r1,|L1.584|
000118  6008              STR      r0,[r1,#0]
00011a  bf00              NOP      
;;;611      LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_7);
00011c  2070              MOVS     r0,#0x70
00011e  6809              LDR      r1,[r1,#0]
000120  f02101f0          BIC      r1,r1,#0xf0
000124  4301              ORRS     r1,r1,r0
000126  4a48              LDR      r2,|L1.584|
000128  6011              STR      r1,[r2,#0]
00012a  bf00              NOP      
;;;612      LL_RCC_MSI_Enable();
00012c  bf00              NOP      
00012e  4610              MOV      r0,r2
000130  6800              LDR      r0,[r0,#0]
000132  f0400001          ORR      r0,r0,#1
000136  4611              MOV      r1,r2
000138  6008              STR      r0,[r1,#0]
00013a  bf00              NOP      
;;;613      
;;;614      do {} while ( LL_RCC_MSI_IsReady() != 1);
00013c  bf00              NOP      
                  |L1.318|
00013e  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv ; [local to main_cpp]::LL_RCC_MSI_IsReady()
000142  2801              CMP      r0,#1
000144  d1fb              BNE      |L1.318|
;;;615    
;;;616      LL_RCC_HSI_Enable();
000146  bf00              NOP      
000148  483f              LDR      r0,|L1.584|
00014a  6800              LDR      r0,[r0,#0]
00014c  f4407080          ORR      r0,r0,#0x100
000150  493d              LDR      r1,|L1.584|
000152  6008              STR      r0,[r1,#0]
000154  bf00              NOP      
;;;617    
;;;618       /* Wait till HSI is ready */
;;;619      while(LL_RCC_HSI_IsReady() != 1)
000156  bf00              NOP      
                  |L1.344|
000158  bf00              NOP      
00015a  483b              LDR      r0,|L1.584|
00015c  6800              LDR      r0,[r0,#0]
00015e  f3c02080          UBFX     r0,r0,#10,#1
000162  2800              CMP      r0,#0
000164  d0f8              BEQ      |L1.344|
;;;620      {
;;;621    
;;;622      }
;;;623      
;;;624    //  HSITRIM: The default value is 64 when added to the HSICAL value, trim the HSI16 to 16 MHz ± 1 %
;;;625    //  LL_RCC_HSI_SetCalibTrimming(16);
;;;626    
;;;627      if ( ClkSrc == TClkSrc::_PLL )
;;;628      {
;;;629    
;;;630    //#ifndef __DEBUG__
;;;631    //  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_2, LL_RCC_PLL_MUL_12);
;;;632    //#else
;;;633    //  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
;;;634    //#endif
;;;635    
;;;636        LL_RCC_PLL_EnableDomain_SYS();
;;;637        
;;;638        constexpr uint32_t PLLN = 8U; //Main PLL multiplication factor for VCO (8..86)
;;;639        LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, PLLN, LL_RCC_PLLR_DIV_2); //f(PLL_R) = 26МГц
;;;640        
;;;641        LL_RCC_PLL_Enable();
;;;642        
;;;643         /* Wait till PLL is ready */
;;;644        while(LL_RCC_PLL_IsReady() != 1)
;;;645        {
;;;646        
;;;647        }
;;;648      }
;;;649    
;;;650      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
000166  2000              MOVS     r0,#0
000168  4937              LDR      r1,|L1.584|
00016a  6889              LDR      r1,[r1,#8]
00016c  f02101f0          BIC      r1,r1,#0xf0
000170  4301              ORRS     r1,r1,r0
000172  4a35              LDR      r2,|L1.584|
000174  6091              STR      r1,[r2,#8]
000176  bf00              NOP      
;;;651    
;;;652      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
000178  bf00              NOP      
00017a  4611              MOV      r1,r2
00017c  6889              LDR      r1,[r1,#8]
00017e  f42161e0          BIC      r1,r1,#0x700
000182  4301              ORRS     r1,r1,r0
000184  6091              STR      r1,[r2,#8]
000186  bf00              NOP      
;;;653    
;;;654      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
000188  bf00              NOP      
00018a  4611              MOV      r1,r2
00018c  6889              LDR      r1,[r1,#8]
00018e  f4215160          BIC      r1,r1,#0x3800
000192  4301              ORRS     r1,r1,r0
000194  6091              STR      r1,[r2,#8]
000196  bf00              NOP      
;;;655    
;;;656      struct TSrc
;;;657      {
;;;658        uint32_t Src;
;;;659        uint32_t Status;
;;;660      };
;;;661    
;;;662      constexpr TSrc ClkSrcArr[] =
000198  2220              MOVS     r2,#0x20
00019a  4928              LDR      r1,|L1.572|
00019c  3140              ADDS     r1,r1,#0x40
00019e  4668              MOV      r0,sp
0001a0  f7fffffe          BL       __aeabi_memcpy4
;;;663      {
;;;664        { LL_RCC_SYS_CLKSOURCE_HSE, LL_RCC_SYS_CLKSOURCE_STATUS_HSE },
;;;665        { LL_RCC_SYS_CLKSOURCE_HSI, LL_RCC_SYS_CLKSOURCE_STATUS_HSI },
;;;666        { LL_RCC_SYS_CLKSOURCE_MSI, LL_RCC_SYS_CLKSOURCE_STATUS_MSI },
;;;667        { LL_RCC_SYS_CLKSOURCE_PLL, LL_RCC_SYS_CLKSOURCE_STATUS_PLL },
;;;668      };
;;;669      
;;;670      LL_RCC_SetSysClkSource( ClkSrcArr[ClkSrc].Src );
0001a4  2002              MOVS     r0,#2
0001a6  4928              LDR      r1,|L1.584|
0001a8  6889              LDR      r1,[r1,#8]
0001aa  f0210103          BIC      r1,r1,#3
0001ae  4301              ORRS     r1,r1,r0
0001b0  4a25              LDR      r2,|L1.584|
0001b2  6091              STR      r1,[r2,#8]
0001b4  bf00              NOP      
;;;671    
;;;672       /* Wait till System clock is ready */
;;;673       
;;;674      uint32_t SysClkSource = 0U;
0001b6  2600              MOVS     r6,#0
;;;675      while( ( SysClkSource = LL_RCC_GetSysClkSource() ) != ClkSrcArr[ClkSrc].Status )
0001b8  bf00              NOP      
                  |L1.442|
0001ba  bf00              NOP      
0001bc  4822              LDR      r0,|L1.584|
0001be  6880              LDR      r0,[r0,#8]
0001c0  f000000c          AND      r0,r0,#0xc
0001c4  4606              MOV      r6,r0
0001c6  2808              CMP      r0,#8
0001c8  d1f7              BNE      |L1.442|
;;;676      {
;;;677    
;;;678      }
;;;679    
;;;680    #ifndef __DEBUG__
;;;681      LL_Init1msTick(12000000);
0001ca  4820              LDR      r0,|L1.588|
0001cc  f7fffffe          BL       LL_Init1msTick
;;;682    #else
;;;683      LL_Init1msTick(64000000);
;;;684    #endif
;;;685    
;;;686      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
0001d0  2004              MOVS     r0,#4
0001d2  2804              CMP      r0,#4
0001d4  d108              BNE      |L1.488|
0001d6  f04f21e0          MOV      r1,#0xe000e000
0001da  6909              LDR      r1,[r1,#0x10]
0001dc  f0410104          ORR      r1,r1,#4
0001e0  f04f22e0          MOV      r2,#0xe000e000
0001e4  6111              STR      r1,[r2,#0x10]
0001e6  e007              B        |L1.504|
                  |L1.488|
0001e8  f04f21e0          MOV      r1,#0xe000e000
0001ec  6909              LDR      r1,[r1,#0x10]
0001ee  f0210104          BIC      r1,r1,#4
0001f2  f04f22e0          MOV      r2,#0xe000e000
0001f6  6111              STR      r1,[r2,#0x10]
                  |L1.504|
0001f8  bf00              NOP      
;;;687    
;;;688    #ifndef __DEBUG__
;;;689      LL_SetSystemCoreClock(HSE_VALUE);
0001fa  4815              LDR      r0,|L1.592|
0001fc  f7fffffe          BL       LL_SetSystemCoreClock
;;;690    #else
;;;691      LL_SetSystemCoreClock(64000000);
;;;692    #endif
;;;693      
;;;694      LL_RCC_ConfigMCO( LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_1 );
000200  f04f7080          MOV      r0,#0x1000000
000204  2100              MOVS     r1,#0
000206  4a10              LDR      r2,|L1.584|
000208  6892              LDR      r2,[r2,#8]
00020a  f02242fe          BIC      r2,r2,#0x7f000000
00020e  ea400301          ORR      r3,r0,r1
000212  431a              ORRS     r2,r2,r3
000214  4b0c              LDR      r3,|L1.584|
000216  609a              STR      r2,[r3,#8]
000218  bf00              NOP      
;;;695    
;;;696      /* SysTick_IRQn interrupt configuration */
;;;697      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
00021a  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
00021e  4682              MOV      r10,r0
000220  2200              MOVS     r2,#0
000222  4611              MOV      r1,r2
000224  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
000228  4681              MOV      r9,r0
00022a  4649              MOV      r1,r9
00022c  f04f30ff          MOV      r0,#0xffffffff
000230  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;698    }
000234  b018              ADD      sp,sp,#0x60
000236  e8bd87f0          POP      {r4-r10,pc}
;;;699    
                          ENDP

00023a  0000              DCW      0x0000
                  |L1.572|
                          DCD      ||.constdata||
                  |L1.576|
                          DCD      0x40022000
                  |L1.580|
                          DCD      0x40007000
                  |L1.584|
                          DCD      0x40021000
                  |L1.588|
                          DCD      0x00b71b00
                  |L1.592|
                          DCD      0x007a1200

                          AREA ||i._Z11err_handlerv||, CODE, READONLY, ALIGN=1

                  _Z11err_handlerv PROC ; err_handler()
;;;727    
;;;728    void err_handler()
000000  bf00              NOP      
                  |L2.2|
;;;729    {
;;;730      while(1) 
000002  e7fe              B        |L2.2|
;;;731      {
;;;732      
;;;733      }
;;;734    }
;;;735    
                          ENDP


                          AREA ||i._Z29vApplicationStackOverflowHookPPvPa||, CODE, READONLY, ALIGN=2

                  _Z29vApplicationStackOverflowHookPPvPa PROC ; vApplicationStackOverflowHook(void**, signed char*)
;;;720    //extern PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB;
;;;721    void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed portCHAR *pcTaskName )
000000  4a02              LDR      r2,|L3.12|
;;;722    {
;;;723      static uint8_t Ctr;
;;;724      ++Ctr;
000002  7812              LDRB     r2,[r2,#0]  ; _ZZ29vApplicationStackOverflowHookPPvPaE3Ctr
000004  1c52              ADDS     r2,r2,#1
000006  4b01              LDR      r3,|L3.12|
000008  701a              STRB     r2,[r3,#0]
;;;725    } 
00000a  4770              BX       lr
;;;726    
                          ENDP

                  |L3.12|
                          DCD      _ZZ29vApplicationStackOverflowHookPPvPaE3Ctr ; vApplicationStackOverflowHook(void**, signed char*)::Ctr

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv PROC ; [local to main_cpp]::create_tasks()
;;;281    
;;;282    static void create_tasks()
000000  b57c              PUSH     {r2-r6,lr}
;;;283    {
;;;284    //  constexpr uint16_t CODING_SWITCH_TASK_STACK_SIZE_B = 800U;
;;;285    //  constexpr uint16_t CODING_SWITCH_TASK_STACK_SIZE_W = CODING_SWITCH_TASK_STACK_SIZE_B / 4U;
;;;286    //  check_create_task( xTaskCreate(coding_switch,                               //указатель на функцию, реализующую задачу
;;;287    //                     (char *)"CODING_SWITCH",                                 //имя функции - нуль-терминальная строка
;;;288    //							       CODING_SWITCH_TASK_STACK_SIZE_W,                         //глубина стека задачи
;;;289    //							       NULL,                                                    //указатель на произвольный параметр
;;;290    //							       4,                                                       //приоритет задачи (0 - самый низкий)
;;;291    //							       NULL));					 	                                      //указатель для получения дескриптора задачи				  
;;;292    //  RtosHeapSize = xPortGetFreeHeapSize(); //Получение объема свободной памяти кучи, доступной для выделения
;;;293    
;;;294    //  constexpr uint16_t DISCRETE_OUT_TASK_STACK_SIZE_B = 500U;
;;;295    //  constexpr uint16_t DISCRETE_OUT_TASK_STACK_SIZE_W = DISCRETE_OUT_TASK_STACK_SIZE_B / 4U;
;;;296    //  check_create_task( xTaskCreate(discrete_out,                                //указатель на функцию, реализующую задачу
;;;297    //                     (char *)"DISCRETE_OUT",                                  //имя функции - нуль-терминальная строка
;;;298    //							       DISCRETE_OUT_TASK_STACK_SIZE_W,                          //глубина стека задачи
;;;299    //							       NULL,                                                    //указатель на произвольный параметр
;;;300    //							       3,                                                       //приоритет задачи (0 - самый низкий)
;;;301    //							       NULL));	        				 	                              //указатель для получения дескриптора задачи
;;;302    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;303    
;;;304    //  constexpr uint16_t MEMS_TASK_STACK_SIZE_B = 3700U;
;;;305    //  constexpr uint16_t MEMS_TASK_STACK_SIZE_W = MEMS_TASK_STACK_SIZE_B / 4U;
;;;306    //  check_create_task( xTaskCreate(mems,
;;;307    //                     (char *)"MEMS",
;;;308    //							       MEMS_TASK_STACK_SIZE_W,
;;;309    //							       NULL,
;;;310    //							       5,
;;;311    //							       NULL));
;;;312    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;313    
;;;314      constexpr uint16_t LEV_GAUGE_TO_PC_TASK_STACK_SIZE_B = 1000U;
000002  f44f757a          MOV      r5,#0x3e8
;;;315      constexpr uint16_t LEV_GAUGE_TO_PC_TASK_STACK_SIZE_W = LEV_GAUGE_TO_PC_TASK_STACK_SIZE_B / 4U;
000006  26fa              MOVS     r6,#0xfa
;;;316      check_create_task( xTaskCreate(lev_gauge_to_pc,
000008  2000              MOVS     r0,#0
00000a  2104              MOVS     r1,#4
00000c  4603              MOV      r3,r0
00000e  22fa              MOVS     r2,#0xfa
000010  e9cd1000          STRD     r1,r0,[sp,#0]
000014  a105              ADR      r1,|L4.44|
000016  4809              LDR      r0,|L4.60|
000018  f7fffffe          BL       xTaskCreate
00001c  4604              MOV      r4,r0
00001e  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510217check_create_taskEl ; [local to main_cpp]::check_create_task(long)
;;;317                         (char *)"LEV_GAUGE_TO_PC",
;;;318    							       LEV_GAUGE_TO_PC_TASK_STACK_SIZE_W,
;;;319    							       NULL,
;;;320    							       4,
;;;321    							       NULL));
;;;322      RtosHeapSize = xPortGetFreeHeapSize();
000022  f7fffffe          BL       xPortGetFreeHeapSize
000026  4906              LDR      r1,|L4.64|
000028  6008              STR      r0,[r1,#0]  ; RtosHeapSize
;;;323    
;;;324    //  constexpr uint16_t BASE_TO_SENS_TASK_STACK_SIZE_B = 1000U;
;;;325    //  constexpr uint16_t BASE_TO_SENS_TASK_STACK_SIZE_W = BASE_TO_SENS_TASK_STACK_SIZE_B / 4U;
;;;326    //  check_create_task( xTaskCreate(base_to_sens,
;;;327    //                     (char *)"BASE_TO_SENS",
;;;328    //							       BASE_TO_SENS_TASK_STACK_SIZE_W,
;;;329    //							       NULL,
;;;330    //							       4,
;;;331    //							       NULL));
;;;332    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;333    
;;;334    //  constexpr uint16_t SENS_TO_MASTER_TASK_STACK_SIZE_B = 1000U;
;;;335    //  constexpr uint16_t SENS_TO_MASTER_TASK_STACK_SIZE_W = SENS_TO_MASTER_TASK_STACK_SIZE_B / 4U;
;;;336    //  check_create_task( xTaskCreate(sens_to_master,
;;;337    //                     (char *)"SENS_TO_MASTER",
;;;338    //							       SENS_TO_MASTER_TASK_STACK_SIZE_W,
;;;339    //							       NULL,
;;;340    //							       4,
;;;341    //							       NULL));
;;;342    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;343    
;;;344    //  constexpr uint16_t DEV_CTRL_TASK_STACK_SIZE_B   = 800U;
;;;345    //  constexpr uint16_t DEV_CTRL_TASK_STACK_SIZE_W = DEV_CTRL_TASK_STACK_SIZE_B / 4U;
;;;346    //  check_create_task( xTaskCreate(dev_ctrl,
;;;347    //                     (char *)"DEV_CTRL",
;;;348    //							       DEV_CTRL_TASK_STACK_SIZE_W,
;;;349    //							       NULL,
;;;350    //							       4,
;;;351    //							       NULL));
;;;352    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;353    
;;;354    //  constexpr uint16_t LOGGER_CTRL_TASK_STACK_SIZE_B = 1000U;
;;;355    //  constexpr uint16_t LOGGER_CTRL_TASK_STACK_SIZE_W = LOGGER_CTRL_TASK_STACK_SIZE_B / 4U;
;;;356    //  check_create_task( xTaskCreate(logger_ctrl,
;;;357    //                     (char *)"LOGGER_CTRL",
;;;358    //							       LOGGER_CTRL_TASK_STACK_SIZE_W,
;;;359    //							       NULL,
;;;360    //							       4,
;;;361    //							       NULL));
;;;362    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;363    //                   
;;;364    //  constexpr uint16_t LED_TOGGLE_TASK_STACK_SIZE_B = 300U;
;;;365    //  constexpr uint16_t LED_TOGGLE_TASK_STACK_SIZE_W = LED_TOGGLE_TASK_STACK_SIZE_B / 4U;
;;;366    //  check_create_task( 
;;;367    //                    xTaskCreate(
;;;368    //                                vLedCtrl,                   //указатель на функцию, реализующую задачу
;;;369    //                                (char *)"LED_TOGGLE",         //имя функции - нуль-терминальная строка
;;;370    //							                  LED_TOGGLE_TASK_STACK_SIZE_W, //глубина стека задачи
;;;371    //							                  NULL,                         //указатель на произвольный параметр
;;;372    //							                  3,                            //приоритет задачи (0 - самый низкий)
;;;373    //							                  NULL
;;;374    //                               )
;;;375    //                   );	        				 	                      //указатель для получения дескриптора задачи
;;;376    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;377    //                   
;;;378    //  constexpr uint16_t PUSH_BUTTON_TASK_STACK_SIZE_B = 300U;
;;;379    //  constexpr uint16_t PUSH_BUTTON_TASK_STACK_SIZE_W = PUSH_BUTTON_TASK_STACK_SIZE_B / 4U;
;;;380    //  check_create_task( 
;;;381    //                    xTaskCreate(
;;;382    //                                vPushButton,                   //указатель на функцию, реализующую задачу
;;;383    //                                (char *)"PUSH_BUTTON",         //имя функции - нуль-терминальная строка
;;;384    //							                  PUSH_BUTTON_TASK_STACK_SIZE_W, //глубина стека задачи
;;;385    //							                  NULL,                          //указатель на произвольный параметр
;;;386    //							                  3,                             //приоритет задачи (0 - самый низкий)
;;;387    //							                  NULL
;;;388    //                               )
;;;389    //                   );	        				 	                      //указатель для получения дескриптора задачи
;;;390    //  RtosHeapSize = xPortGetFreeHeapSize();
;;;391    }
00002a  bd7c              POP      {r2-r6,pc}
;;;392    
                          ENDP

                  |L4.44|
00002c  4c45565f          DCB      "LEV_GAUGE_TO_PC",0
000030  47415547
000034  455f544f
000038  5f504300
                  |L4.60|
                          DCD      _Z15lev_gauge_to_pcPv ; lev_gauge_to_pc(void*)
                  |L4.64|
                          DCD      RtosHeapSize

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510212init_mx_gpioEv||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_6396510212init_mx_gpioEv PROC ; [local to main_cpp]::init_mx_gpio()
;;;699    
;;;700    static void init_mx_gpio()
000000  b500              PUSH     {lr}
;;;701    {
000002  b087              SUB      sp,sp,#0x1c
;;;702      LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;703    
;;;704      /* GPIO Ports Clock Enable */
;;;705      LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
000004  2001              MOVS     r0,#1
000006  4912              LDR      r1,|L5.80|
000008  6cc9              LDR      r1,[r1,#0x4c]
00000a  4301              ORRS     r1,r1,r0
00000c  4a10              LDR      r2,|L5.80|
00000e  64d1              STR      r1,[r2,#0x4c]
000010  4611              MOV      r1,r2
000012  6cc9              LDR      r1,[r1,#0x4c]
000014  4001              ANDS     r1,r1,r0
000016  9100              STR      r1,[sp,#0]
000018  bf00              NOP      
00001a  bf00              NOP      
;;;706      GPIO_InitStruct.Pin  = LL_GPIO_PIN_0;
00001c  9001              STR      r0,[sp,#4]
;;;707      GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
00001e  2000              MOVS     r0,#0
000020  9002              STR      r0,[sp,#8]
;;;708      GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
000022  9005              STR      r0,[sp,#0x14]
;;;709      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000024  a901              ADD      r1,sp,#4
000026  f04f4090          MOV      r0,#0x48000000
00002a  f7fffffe          BL       LL_GPIO_Init
;;;710    
;;;711      GPIO_InitStruct.Pin        = LL_GPIO_PIN_8;
00002e  f44f7080          MOV      r0,#0x100
000032  9001              STR      r0,[sp,#4]
;;;712      GPIO_InitStruct.Mode       = LL_GPIO_MODE_ALTERNATE;
000034  2002              MOVS     r0,#2
000036  9002              STR      r0,[sp,#8]
;;;713      GPIO_InitStruct.Speed      = LL_GPIO_SPEED_FREQ_LOW;
000038  2000              MOVS     r0,#0
00003a  9003              STR      r0,[sp,#0xc]
;;;714      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
00003c  9004              STR      r0,[sp,#0x10]
;;;715      GPIO_InitStruct.Pull       = LL_GPIO_PULL_NO;
00003e  9005              STR      r0,[sp,#0x14]
;;;716      GPIO_InitStruct.Alternate  = LL_GPIO_AF_0;
000040  9006              STR      r0,[sp,#0x18]
;;;717      LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000042  a901              ADD      r1,sp,#4
000044  f04f4090          MOV      r0,#0x48000000
000048  f7fffffe          BL       LL_GPIO_Init
;;;718    }
00004c  b007              ADD      sp,sp,#0x1c
00004e  bd00              POP      {pc}
;;;719    
                          ENDP

                  |L5.80|
                          DCD      0x40021000

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv||, CODE, READONLY, ALIGN=1

                  _ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv PROC ; [local to main_cpp]::create_timers()
;;;392    
;;;393    static void create_timers()
000000  4770              BX       lr
;;;394    {
;;;395    //  check_create_timer( CodeSwTmr = xTimerCreate(
;;;396    //                                                "CodeSwTmr",
;;;397    //							                                  pdMS_TO_TICKS( TCodingSwitch::SAMPLE_TIME_MS ),
;;;398    //							                                  pdFALSE,      //интервальный таймер
;;;399    //							                                  ( void * ) 0, //идентификатор не нужен, т.к. создаем только один экземпляр таймера
;;;400    //							                                  code_sw_tmr
;;;401    //											                        )
;;;402    //                    );
;;;403    //                    
;;;404    //  check_create_timer( DoUncalibTmr = xTimerCreate(
;;;405    //                                                   "DoUncalibTmr",
;;;406    //							                                     pdMS_TO_TICKS( TDiscreteOut::PULSE_TIME_MS ),
;;;407    //							                                     pdFALSE,      //интервальный таймер
;;;408    //							                                     ( void * ) 0, //идентификатор не нужен, т.к. создаем только один экземпляр таймера
;;;409    //							                                     do_uncalib_tmr
;;;410    //											                           )
;;;411    //                    );
;;;412    ////                    TimerHandle_t MemsTmr;                      //таймер для нужд задачи обработки Mems-датчика
;;;413    ////  check_create_timer( MemsTmr = xTimerCreate(
;;;414    ////                                              "MemsTmr",
;;;415    ////							                                pdMS_TO_TICKS( TMems::ANSWER_WAIT_MS ),
;;;416    ////							                                pdFALSE,      //интервальный таймер
;;;417    ////							                                ( void * ) 0, //идентификатор не нужен, т.к. создаем только один экземпляр таймера
;;;418    ////							                                mems_tmr
;;;419    ////											                      )
;;;420    ////                    );
;;;421    //  
;;;422    //  constexpr uint32_t PD_TIME_MS = 500U;  
;;;423    //  check_create_timer( PdTmr = xTimerCreate(
;;;424    //                                                   "PdTmr",
;;;425    //							                                     pdMS_TO_TICKS( PD_TIME_MS ),
;;;426    //							                                     pdTRUE,      //периодический таймер
;;;427    //							                                     ( void * ) 0, //идентификатор не нужен, т.к. создаем только один экземпляр таймера
;;;428    //							                                     pd_tmr
;;;429    //											                           )
;;;430    //                    );
;;;431    //										
;;;432    //  check_create_timer( 
;;;433    //                     BtnTimer = xTimerCreate(
;;;434    //                                             "BtnTimer",
;;;435    //							                               pdMS_TO_TICKS( 10U ),
;;;436    //							                               pdTRUE,                //периодический таймер
;;;437    //							                               ( void * ) 0,          //идентификатор не нужен, т.к. создаем только один экземпляр таймера
;;;438    //							                               vTimerCallback
;;;439    //											                      )
;;;440    //                    );
;;;441    }
;;;442    
                          ENDP


                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510214create_mutexesEv||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_6396510214create_mutexesEv PROC ; [local to main_cpp]::create_mutexes()
;;;271    
;;;272    static void create_mutexes()
000000  b510              PUSH     {r4,lr}
;;;273    {  
;;;274      MainMut = xSemaphoreCreateMutex();
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       xQueueCreateMutex
000008  4907              LDR      r1,|L7.40|
00000a  6008              STR      r0,[r1,#0]  ; MainMut
;;;275      check_create_mutex(MainMut);
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]  ; MainMut
000010  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv ; [local to main_cpp]::check_create_mutex(void*)
;;;276      
;;;277      SENSMut = xSemaphoreCreateMutex();
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       xQueueCreateMutex
00001a  4904              LDR      r1,|L7.44|
00001c  6008              STR      r0,[r1,#0]  ; SENSMut
;;;278      check_create_mutex(SENSMut);
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]  ; SENSMut
000022  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv ; [local to main_cpp]::check_create_mutex(void*)
;;;279    }
000026  bd10              POP      {r4,pc}
;;;280    
                          ENDP

                  |L7.40|
                          DCD      MainMut
                  |L7.44|
                          DCD      SENSMut

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510214create_semphrsEv||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_6396510214create_semphrsEv PROC ; [local to main_cpp]::create_semphrs()
;;;225    
;;;226    static void create_semphrs()
000000  b510              PUSH     {r4,lr}
;;;227    {
;;;228      check_create_semphr( I2C_RxSem               = xSemaphoreCreateBinary() );
000002  2203              MOVS     r2,#3
000004  2100              MOVS     r1,#0
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       xQueueGenericCreate
00000c  4948              LDR      r1,|L8.304|
00000e  4604              MOV      r4,r0
000010  6008              STR      r0,[r1,#0]  ; I2C_RxSem
000012  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;229      check_create_semphr( I2C_TxSem               = xSemaphoreCreateBinary() );
000016  2203              MOVS     r2,#3
000018  2100              MOVS     r1,#0
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       xQueueGenericCreate
000020  4944              LDR      r1,|L8.308|
000022  4604              MOV      r4,r0
000024  6008              STR      r0,[r1,#0]  ; I2C_TxSem
000026  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;230      check_create_semphr( CodeSwTmr_TrigSem       = xSemaphoreCreateBinary() );
00002a  2203              MOVS     r2,#3
00002c  2100              MOVS     r1,#0
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       xQueueGenericCreate
000034  4940              LDR      r1,|L8.312|
000036  4604              MOV      r4,r0
000038  6008              STR      r0,[r1,#0]  ; CodeSwTmr_TrigSem
00003a  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;231      check_create_semphr( DoUncalibTmr_TrigSem    = xSemaphoreCreateBinary() );
00003e  2203              MOVS     r2,#3
000040  2100              MOVS     r1,#0
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       xQueueGenericCreate
000048  493c              LDR      r1,|L8.316|
00004a  4604              MOV      r4,r0
00004c  6008              STR      r0,[r1,#0]  ; DoUncalibTmr_TrigSem
00004e  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;232                                                   
;;;233      check_create_semphr( RawDataMems_RdySem      = xSemaphoreCreateBinary() );
000052  2203              MOVS     r2,#3
000054  2100              MOVS     r1,#0
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       xQueueGenericCreate
00005c  4938              LDR      r1,|L8.320|
00005e  4604              MOV      r4,r0
000060  6008              STR      r0,[r1,#0]  ; RawDataMems_RdySem
000062  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;234                                                   
;;;235      check_create_semphr( SlaveRtoTrigSem         = xSemaphoreCreateBinary() );
000066  2203              MOVS     r2,#3
000068  2100              MOVS     r1,#0
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       xQueueGenericCreate
000070  4934              LDR      r1,|L8.324|
000072  4604              MOV      r4,r0
000074  6008              STR      r0,[r1,#0]  ; SlaveRtoTrigSem
000076  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;236      check_create_semphr( SlaveCommErrSem         = xSemaphoreCreateBinary() );
00007a  2203              MOVS     r2,#3
00007c  2100              MOVS     r1,#0
00007e  2001              MOVS     r0,#1
000080  f7fffffe          BL       xQueueGenericCreate
000084  4930              LDR      r1,|L8.328|
000086  4604              MOV      r4,r0
000088  6008              STR      r0,[r1,#0]  ; SlaveCommErrSem
00008a  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;237      check_create_semphr( MasterRtoTrigSem        = xSemaphoreCreateBinary() );
00008e  2203              MOVS     r2,#3
000090  2100              MOVS     r1,#0
000092  2001              MOVS     r0,#1
000094  f7fffffe          BL       xQueueGenericCreate
000098  492c              LDR      r1,|L8.332|
00009a  4604              MOV      r4,r0
00009c  6008              STR      r0,[r1,#0]  ; MasterRtoTrigSem
00009e  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;238      check_create_semphr( MasterCommErrSem        = xSemaphoreCreateBinary() );
0000a2  2203              MOVS     r2,#3
0000a4  2100              MOVS     r1,#0
0000a6  2001              MOVS     r0,#1
0000a8  f7fffffe          BL       xQueueGenericCreate
0000ac  4928              LDR      r1,|L8.336|
0000ae  4604              MOV      r4,r0
0000b0  6008              STR      r0,[r1,#0]  ; MasterCommErrSem
0000b2  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;239    //  check_create_semphr( MemsWaitStopSem         = xSemaphoreCreateBinary() );
;;;240      check_create_semphr( PdSem                   = xSemaphoreCreateBinary() );
0000b6  2203              MOVS     r2,#3
0000b8  2100              MOVS     r1,#0
0000ba  2001              MOVS     r0,#1
0000bc  f7fffffe          BL       xQueueGenericCreate
0000c0  4924              LDR      r1,|L8.340|
0000c2  4604              MOV      r4,r0
0000c4  6008              STR      r0,[r1,#0]  ; PdSem
0000c6  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;241                                                   
;;;242    //  check_create_semphr( MemsDevRdySem           = xSemaphoreCreateBinary() );
;;;243    //  check_create_semphr( MemsDevDoneSem          = xSemaphoreCreateBinary() );
;;;244    //  check_create_semphr( DevMemsStartSem         = xSemaphoreCreateBinary() );
;;;245    //  check_create_semphr( DevSensStartSem         = xSemaphoreCreateBinary() );
;;;246    //  check_create_semphr( DevSensResSem           = xSemaphoreCreateBinary() );
;;;247    //  check_create_semphr( SensDevOkSem            = xSemaphoreCreateBinary() );
;;;248    //  check_create_semphr( SensDevResSem           = xSemaphoreCreateBinary() );
;;;249    //  check_create_semphr( SensWrAxisRotateSem     = xSemaphoreCreateBinary() );
;;;250    //  check_create_semphr( SensAxisRotateOkSem     = xSemaphoreCreateBinary() );  
;;;251                                                   
;;;252    //  check_create_semphr( AccCalib_X_UP_Sem       = xSemaphoreCreateBinary() );
;;;253    //  check_create_semphr( AccCalib_X_DOWN_Sem     = xSemaphoreCreateBinary() );
;;;254    //  check_create_semphr( AccCalib_Y_UP_Sem       = xSemaphoreCreateBinary() );
;;;255    //  check_create_semphr( AccCalib_Y_DOWN_Sem     = xSemaphoreCreateBinary() );
;;;256    //  check_create_semphr( AccCalib_Z_UP_Sem       = xSemaphoreCreateBinary() );
;;;257    //  check_create_semphr( AccCalib_Z_DOWN_Sem     = xSemaphoreCreateBinary() );
;;;258      
;;;259    //  check_create_semphr( User_Zeroing_Out_Sem    = xSemaphoreCreateBinary() );
;;;260    //  check_create_semphr( Factory_Zeroing_Out_Sem = xSemaphoreCreateBinary() );
;;;261      
;;;262    //  check_create_semphr( TxSPI1_RdySem           = xSemaphoreCreateBinary() );
;;;263    //  check_create_semphr( RxSPI1_RdySem           = xSemaphoreCreateBinary() );
;;;264      check_create_semphr( WrFlash                 = xSemaphoreCreateBinary() );
0000ca  2203              MOVS     r2,#3
0000cc  2100              MOVS     r1,#0
0000ce  2001              MOVS     r0,#1
0000d0  f7fffffe          BL       xQueueGenericCreate
0000d4  4920              LDR      r1,|L8.344|
0000d6  4604              MOV      r4,r0
0000d8  6008              STR      r0,[r1,#0]  ; WrFlash
0000da  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;265      check_create_semphr( BtnTimer_TrigSem        = xSemaphoreCreateBinary() );
0000de  2203              MOVS     r2,#3
0000e0  2100              MOVS     r1,#0
0000e2  2001              MOVS     r0,#1
0000e4  f7fffffe          BL       xQueueGenericCreate
0000e8  491c              LDR      r1,|L8.348|
0000ea  4604              MOV      r4,r0
0000ec  6008              STR      r0,[r1,#0]  ; BtnTimer_TrigSem
0000ee  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;266      check_create_semphr( LedTimer_TrigSem        = xSemaphoreCreateBinary() );
0000f2  2203              MOVS     r2,#3
0000f4  2100              MOVS     r1,#0
0000f6  2001              MOVS     r0,#1
0000f8  f7fffffe          BL       xQueueGenericCreate
0000fc  4918              LDR      r1,|L8.352|
0000fe  4604              MOV      r4,r0
000100  6008              STR      r0,[r1,#0]  ; LedTimer_TrigSem
000102  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;267      
;;;268      check_create_semphr( Tmr_TrigSem             = xSemaphoreCreateBinary() );
000106  2203              MOVS     r2,#3
000108  2100              MOVS     r1,#0
00010a  2001              MOVS     r0,#1
00010c  f7fffffe          BL       xQueueGenericCreate
000110  4914              LDR      r1,|L8.356|
000112  4604              MOV      r4,r0
000114  6008              STR      r0,[r1,#0]  ; Tmr_TrigSem
000116  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;269      check_create_semphr( DiffExti_TrigSem        = xSemaphoreCreateBinary() );
00011a  2203              MOVS     r2,#3
00011c  2100              MOVS     r1,#0
00011e  2001              MOVS     r0,#1
000120  f7fffffe          BL       xQueueGenericCreate
000124  4910              LDR      r1,|L8.360|
000126  4604              MOV      r4,r0
000128  6008              STR      r0,[r1,#0]  ; DiffExti_TrigSem
00012a  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv ; [local to main_cpp]::check_create_semphr(void*)
;;;270    }
00012e  bd10              POP      {r4,pc}
;;;271    
                          ENDP

                  |L8.304|
                          DCD      I2C_RxSem
                  |L8.308|
                          DCD      I2C_TxSem
                  |L8.312|
                          DCD      CodeSwTmr_TrigSem
                  |L8.316|
                          DCD      DoUncalibTmr_TrigSem
                  |L8.320|
                          DCD      RawDataMems_RdySem
                  |L8.324|
                          DCD      SlaveRtoTrigSem
                  |L8.328|
                          DCD      SlaveCommErrSem
                  |L8.332|
                          DCD      MasterRtoTrigSem
                  |L8.336|
                          DCD      MasterCommErrSem
                  |L8.340|
                          DCD      PdSem
                  |L8.344|
                          DCD      WrFlash
                  |L8.348|
                          DCD      BtnTimer_TrigSem
                  |L8.352|
                          DCD      LedTimer_TrigSem
                  |L8.356|
                          DCD      Tmr_TrigSem
                  |L8.360|
                          DCD      DiffExti_TrigSem

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej PROC ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;1697    */
;;;1698   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1699   {
;;;1700     if ((int32_t)(IRQn) < 0)
000002  2800              CMP      r0,#0
000004  da07              BGE      |L9.22|
;;;1701     {
;;;1702       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e14              LSRS     r4,r2,#24
00000a  4a05              LDR      r2,|L9.32|
00000c  f000030f          AND      r3,r0,#0xf
000010  1f1b              SUBS     r3,r3,#4
000012  54d4              STRB     r4,[r2,r3]
000014  e003              B        |L9.30|
                  |L9.22|
;;;1703     }
;;;1704     else
;;;1705     {
;;;1706       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000016  070a              LSLS     r2,r1,#28
000018  0e13              LSRS     r3,r2,#24
00001a  4a02              LDR      r2,|L9.36|
00001c  5413              STRB     r3,[r2,r0]
                  |L9.30|
;;;1707     }
;;;1708   }
00001e  bd10              POP      {r4,pc}
;;;1709   
                          ENDP

                  |L9.32|
                          DCD      0xe000ed18
                  |L9.36|
                          DCD      0xe000e400

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510217check_create_taskEl||, CODE, READONLY, ALIGN=1

                  _ZN29_INTERNAL_8_main_cpp_6396510217check_create_taskEl PROC ; [local to main_cpp]::check_create_task(long)
;;;459    
;;;460    static void check_create_task(portBASE_TYPE TaskStatus)
000000  4770              BX       lr
;;;461    {
;;;462      if (TaskStatus != pdTRUE)
;;;463      {
;;;464        //недостаточно памяти кучи
;;;465      }
;;;466    }
;;;467    
                          ENDP


                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv PROC ; [local to main_cpp]::LL_RCC_MSI_IsReady()
;;;2426     */
;;;2427   __STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
000000  4802              LDR      r0,|L11.12|
;;;2428   {
;;;2429     return (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY));
000002  6800              LDR      r0,[r0,#0]
000004  f3c00040          UBFX     r0,r0,#1,#1
;;;2430   }
000008  4770              BX       lr
;;;2431   
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      0x40021000

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv||, CODE, READONLY, ALIGN=1

                  _ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv PROC ; [local to main_cpp]::check_create_mutex(void*)
;;;467    
;;;468    static void check_create_mutex(xSemaphoreHandle MutexStatus)
000000  4770              BX       lr
;;;469    {
;;;470      if (MutexStatus == NULL)
;;;471      {
;;;472        //недостаточно памяти кучи
;;;473      }
;;;474    }
;;;475    
                          ENDP


                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_timerEPv||, CODE, READONLY, ALIGN=1

                  _ZN29_INTERNAL_8_main_cpp_6396510218check_create_timerEPv PROC ; [local to main_cpp]::check_create_timer(void*)
;;;483    
;;;484    static void check_create_timer(TimerHandle_t TimerHandle)
000000  4770              BX       lr
;;;485    {
;;;486      if (TimerHandle == NULL)
;;;487      {
;;;488        //недостаточно памяти кучи FreeRTOS для успешного размещения структур данных таймера
;;;489      }
;;;490    }
;;;491    
                          ENDP


                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj||, CODE, READONLY, ALIGN=1

                  _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj PROC ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
;;;1744    */
;;;1745   __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1746   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1747     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
000006  f0030107          AND      r1,r3,#7
;;;1748     uint32_t PreemptPriorityBits;
;;;1749     uint32_t SubPriorityBits;
;;;1750   
;;;1751     PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
00000a  f1c10007          RSB      r0,r1,#7
00000e  2804              CMP      r0,#4
000010  d901              BLS      |L14.22|
000012  2004              MOVS     r0,#4
000014  e001              B        |L14.26|
                  |L14.22|
000016  f1c10007          RSB      r0,r1,#7
                  |L14.26|
00001a  4606              MOV      r6,r0
;;;1752     SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
00001c  1d08              ADDS     r0,r1,#4
00001e  2807              CMP      r0,#7
000020  d201              BCS      |L14.38|
000022  2000              MOVS     r0,#0
000024  e000              B        |L14.40|
                  |L14.38|
000026  1ec8              SUBS     r0,r1,#3
                  |L14.40|
000028  4605              MOV      r5,r0
;;;1753   
;;;1754     return (
00002a  2001              MOVS     r0,#1
00002c  40b0              LSLS     r0,r0,r6
00002e  1e40              SUBS     r0,r0,#1
000030  4020              ANDS     r0,r0,r4
000032  40a8              LSLS     r0,r0,r5
000034  2701              MOVS     r7,#1
000036  40af              LSLS     r7,r7,r5
000038  1e7f              SUBS     r7,r7,#1
00003a  4017              ANDS     r7,r7,r2
00003c  4338              ORRS     r0,r0,r7
;;;1755              ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
;;;1756              ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
;;;1757            );
;;;1758   }
00003e  bdf0              POP      {r4-r7,pc}
;;;1759   
                          ENDP


                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv||, CODE, READONLY, ALIGN=1

                  _ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv PROC ; [local to main_cpp]::check_create_semphr(void*)
;;;475    
;;;476    static void check_create_semphr(xSemaphoreHandle SemphrStatus)
000000  4770              BX       lr
;;;477    {
;;;478      if (SemphrStatus == NULL)
;;;479      {
;;;480        //недостаточно памяти кучи
;;;481      }
;;;482    }
;;;483    
                          ENDP


                          AREA ||i._ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv PROC ; [local to main_cpp]::NVIC_GetPriorityGrouping()
;;;1614    */
;;;1615   __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L16.12|
;;;1616   {
;;;1617     return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;1618   }
000008  4770              BX       lr
;;;1619   
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0xe000ed0c

                          AREA ||i._ZN29_INTERNAL_8_main_cpp_639651027init_llEv||, CODE, READONLY, ALIGN=2

                  _ZN29_INTERNAL_8_main_cpp_639651027init_llEv PROC ; [local to main_cpp]::init_ll()
;;;492    //----- Инициализация -------------------------------------------------------
;;;493    static void init_ll()
000000  b538              PUSH     {r3-r5,lr}
;;;494    {
;;;495      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
000002  2001              MOVS     r0,#1
000004  493a              LDR      r1,|L17.240|
000006  6e09              LDR      r1,[r1,#0x60]
000008  4301              ORRS     r1,r1,r0
00000a  4a39              LDR      r2,|L17.240|
00000c  6611              STR      r1,[r2,#0x60]
00000e  4611              MOV      r1,r2
000010  6e09              LDR      r1,[r1,#0x60]
000012  4001              ANDS     r1,r1,r0
000014  9100              STR      r1,[sp,#0]
000016  bf00              NOP      
000018  bf00              NOP      
;;;496    
;;;497      NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
00001a  2003              MOVS     r0,#3
00001c  4602              MOV      r2,r0
00001e  4b35              LDR      r3,|L17.244|
000020  6819              LDR      r1,[r3,#0]
000022  f64f03ff          MOV      r3,#0xf8ff
000026  4019              ANDS     r1,r1,r3
000028  4b33              LDR      r3,|L17.248|
00002a  430b              ORRS     r3,r3,r1
00002c  ea432102          ORR      r1,r3,r2,LSL #8
000030  4b30              LDR      r3,|L17.244|
000032  6019              STR      r1,[r3,#0]
000034  bf00              NOP      
;;;498    
;;;499      /* System interrupt init*/
;;;500      /* MemoryManagement_IRQn interrupt configuration */
;;;501      NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
000036  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
00003a  4605              MOV      r5,r0
00003c  2200              MOVS     r2,#0
00003e  4611              MOV      r1,r2
000040  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
000044  4604              MOV      r4,r0
000046  4621              MOV      r1,r4
000048  f06f000b          MVN      r0,#0xb
00004c  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;502      /* BusFault_IRQn interrupt configuration */
;;;503      NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
000050  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
000054  4605              MOV      r5,r0
000056  2200              MOVS     r2,#0
000058  4611              MOV      r1,r2
00005a  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
00005e  4604              MOV      r4,r0
000060  4621              MOV      r1,r4
000062  f06f000a          MVN      r0,#0xa
000066  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;504      /* UsageFault_IRQn interrupt configuration */
;;;505      NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
00006a  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
00006e  4605              MOV      r5,r0
000070  2200              MOVS     r2,#0
000072  4611              MOV      r1,r2
000074  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
000078  4604              MOV      r4,r0
00007a  4621              MOV      r1,r4
00007c  f06f0009          MVN      r0,#9
000080  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;506      /* SVCall_IRQn interrupt configuration */
;;;507      NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
000084  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
000088  4605              MOV      r5,r0
00008a  2200              MOVS     r2,#0
00008c  4611              MOV      r1,r2
00008e  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
000092  4604              MOV      r4,r0
000094  4621              MOV      r1,r4
000096  f06f0004          MVN      r0,#4
00009a  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;508      /* DebugMonitor_IRQn interrupt configuration */
;;;509      NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
00009e  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
0000a2  4605              MOV      r5,r0
0000a4  2200              MOVS     r2,#0
0000a6  4611              MOV      r1,r2
0000a8  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
0000ac  4604              MOV      r4,r0
0000ae  4621              MOV      r1,r4
0000b0  f06f0003          MVN      r0,#3
0000b4  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;510      /* PendSV_IRQn interrupt configuration */
;;;511      NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
0000b8  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
0000bc  4605              MOV      r5,r0
0000be  2200              MOVS     r2,#0
0000c0  4611              MOV      r1,r2
0000c2  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
0000c6  4604              MOV      r4,r0
0000c8  4621              MOV      r1,r4
0000ca  f06f0001          MVN      r0,#1
0000ce  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;512      /* SysTick_IRQn interrupt configuration */
;;;513      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
0000d2  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv ; [local to main_cpp]::NVIC_GetPriorityGrouping()
0000d6  4605              MOV      r5,r0
0000d8  2200              MOVS     r2,#0
0000da  4611              MOV      r1,r2
0000dc  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj ; [local to main_cpp]::NVIC_EncodePriority(unsigned, unsigned, unsigned)
0000e0  4604              MOV      r4,r0
0000e2  4621              MOV      r1,r4
0000e4  f04f30ff          MOV      r0,#0xffffffff
0000e8  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej ; [local to main_cpp]::NVIC_SetPriority(IRQn_Type, unsigned)
;;;514    }
0000ec  bd38              POP      {r3-r5,pc}
;;;515    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L17.240|
                          DCD      0x40021000
                  |L17.244|
                          DCD      0xe000ed0c
                  |L17.248|
                          DCD      0x05fa0000

                          AREA ||i.__sti___8_main_cpp_63965102||, CODE, READONLY, ALIGN=2

                  __sti___8_main_cpp_63965102 PROC
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       xPortGetFreeHeapSize
000006  4901              LDR      r1,|L18.12|
000008  6008              STR      r0,[r1,#0]  ; RtosHeapSize
00000a  bd10              POP      {r4,pc}
                          ENDP

                  |L18.12|
                          DCD      RtosHeapSize

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;182    
;;;183    int main(void)
000000  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_639651027init_llEv ; [local to main_cpp]::init_ll()
;;;184    {
;;;185    //  Do.init();
;;;186    
;;;187    //  SetProgNum( __PROG_VERSION );
;;;188    
;;;189      init_ll();
;;;190      cfg_sys_clk();
000004  f7fffffe          BL       _Z11cfg_sys_clkv ; cfg_sys_clk()
;;;191      
;;;192      init_mx_gpio();
000008  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510212init_mx_gpioEv ; [local to main_cpp]::init_mx_gpio()
;;;193    //  DevDeterm.init_tmr();
;;;194    //  DevDeterm.is_dev();
;;;195    
;;;196    //----- Создание семафоров ----------------------------------------------------------------------------------------------------
;;;197      RtosHeapSize = xPortGetFreeHeapSize(); //размер кучи до создания семафоров
00000c  f7fffffe          BL       xPortGetFreeHeapSize
000010  490e              LDR      r1,|L19.76|
000012  6008              STR      r0,[r1,#0]  ; RtosHeapSize
;;;198      create_semphrs();
000014  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510214create_semphrsEv ; [local to main_cpp]::create_semphrs()
;;;199    //-----------------------------------------------------------------------------------------------------------------------------
;;;200    
;;;201    //----- Создание мьютексов ----------------------------------------------------------------------------------------------------
;;;202      RtosHeapSize = xPortGetFreeHeapSize(); //размер кучи до создания мьютексов
000018  f7fffffe          BL       xPortGetFreeHeapSize
00001c  490b              LDR      r1,|L19.76|
00001e  6008              STR      r0,[r1,#0]  ; RtosHeapSize
;;;203      create_mutexes();
000020  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510214create_mutexesEv ; [local to main_cpp]::create_mutexes()
;;;204    //-----------------------------------------------------------------------------------------------------------------------------
;;;205    
;;;206    //----- Создание таймеров ----------------------------------------------------------------------------------------------------- 
;;;207      RtosHeapSize = xPortGetFreeHeapSize(); //размер кучи до создания таймеров
000024  f7fffffe          BL       xPortGetFreeHeapSize
000028  4908              LDR      r1,|L19.76|
00002a  6008              STR      r0,[r1,#0]  ; RtosHeapSize
;;;208      create_timers();
00002c  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv ; [local to main_cpp]::create_timers()
;;;209    //-----------------------------------------------------------------------------------------------------------------------------
;;;210    
;;;211    //----- Создание задач --------------------------------------------------------------------------------------------------------
;;;212      RtosHeapSize = xPortGetFreeHeapSize(); //размер кучи до создания задач
000030  f7fffffe          BL       xPortGetFreeHeapSize
000034  4905              LDR      r1,|L19.76|
000036  6008              STR      r0,[r1,#0]  ; RtosHeapSize
;;;213      create_tasks();
000038  f7fffffe          BL       _ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv ; [local to main_cpp]::create_tasks()
;;;214      RtosHeapSize = xPortGetFreeHeapSize(); //размер кучи после создания задач
00003c  f7fffffe          BL       xPortGetFreeHeapSize
000040  4902              LDR      r1,|L19.76|
000042  6008              STR      r0,[r1,#0]  ; RtosHeapSize
;;;215    //-----------------------------------------------------------------------------------------------------------------------------
;;;216    
;;;217    
;;;218      vTaskStartScheduler(); //запуск планировщика + автоматическое создание задачи бездействие (Idle task)
000044  f7fffffe          BL       vTaskStartScheduler
;;;219    
;;;220      for (;;)
000048  bf00              NOP      
                  |L19.74|
00004a  e7fe              B        |L19.74|
;;;221      {
;;;222    
;;;223      }
;;;224    }
;;;225    
                          ENDP

                  |L19.76|
                          DCD      RtosHeapSize

                          AREA ||i.vApplicationIdleHook||, CODE, READONLY, ALIGN=1

                  vApplicationIdleHook PROC
;;;452    
;;;453    void vApplicationIdleHook( void )
000000  4770              BX       lr
;;;454    {
;;;455    //  RelTwo.on();
;;;456    //  RelTwo.off();
;;;457    }
;;;458    
                          ENDP


                          AREA ||i.vApplicationStackOverflowHook||, CODE, READONLY, ALIGN=2

                  vApplicationStackOverflowHook PROC
;;;720    //extern PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB;
;;;721    void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed portCHAR *pcTaskName )
000000  4a02              LDR      r2,|L21.12|
;;;722    {
;;;723      static uint8_t Ctr;
;;;724      ++Ctr;
000002  6812              LDR      r2,[r2,#0]  ; _ZZ29vApplicationStackOverflowHookE1k
000004  1c52              ADDS     r2,r2,#1
000006  4b01              LDR      r3,|L21.12|
000008  601a              STR      r2,[r3,#0]  ; _ZZ29vApplicationStackOverflowHookE1k
;;;725    } 
00000a  4770              BX       lr
;;;726    
                          ENDP

                  |L21.12|
                          DCD      _ZZ29vApplicationStackOverflowHookE1k ; vApplicationStackOverflowHook::k

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510216NVIC_SetPriorityE9IRQn_Typej||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510219NVIC_EncodePriorityEjjj||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510217check_create_taskEl||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510217check_create_taskEl||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510212create_tasksEv||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510213create_timersEv||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_mutexEPv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510214create_mutexesEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510214create_mutexesEv||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510219check_create_semphrEPv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510214create_semphrsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510214create_semphrsEv||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510212init_mx_gpioEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510212init_mx_gpioEv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._Z11cfg_sys_clkv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11cfg_sys_clkv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_639651027init_llEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_639651027init_llEv||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i.main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.main||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i.vApplicationStackOverflowHook||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.vApplicationStackOverflowHook||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i.vApplicationIdleHook||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.vApplicationIdleHook||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_timerEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510218check_create_timerEPv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z29vApplicationStackOverflowHookPPvPa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z29vApplicationStackOverflowHookPPvPa||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._Z11err_handlerv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11err_handlerv||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i.__sti___8_main_cpp_63965102||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___8_main_cpp_63965102||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510224NVIC_GetPriorityGroupingEv||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN29_INTERNAL_8_main_cpp_6396510218LL_RCC_MSI_IsReadyEv||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  1a30001a          DCB      0x1a,0x30,0x00,0x1a
000004  00100010          DCB      0x00,0x10,0x00,0x10
000008  18300018          DCB      0x18,0x30,0x00,0x18
00000c  1a50001a          DCB      0x1a,0x50,0x00,0x1a
000010  06100c20          DCB      0x06,0x10,0x0c,0x20
000014  12301a40          DCB      0x12,0x30,0x1a,0x40
000018  1a500006          DCB      0x1a,0x50,0x00,0x06
00001c  000c0012          DCB      0x00,0x0c,0x00,0x12
000020  001a001a          DCB      0x00,0x1a,0x00,0x1a
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000003
                          DCD      0x00000004
                          DCD      0x00000200
                          DCD      0x00000400
                          DCD      0x00000002
                          DCD      0x00000008
                          DCD      0x00000001
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000003
                          DCD      0x0000000c

                          AREA ||.data||, DATA, ALIGN=2

                  RtosHeapSize
                          DCD      0x00000000
                  I2C_RxSem
                          DCD      0x00000000
                  I2C_TxSem
                          DCD      0x00000000
                  CodeSwTmr_TrigSem
                          DCD      0x00000000
                  DoUncalibTmr_TrigSem
                          DCD      0x00000000
                  RawDataMems_RdySem
                          DCD      0x00000000
                  SlaveRtoTrigSem
                          DCD      0x00000000
                  SlaveCommErrSem
                          DCD      0x00000000
                  MasterRtoTrigSem
                          DCD      0x00000000
                  MasterCommErrSem
                          DCD      0x00000000
                  PdSem
                          DCD      0x00000000
                  WrFlash
                          DCD      0x00000000
                  BtnTimer_TrigSem
                          DCD      0x00000000
                  LedTimer_TrigSem
                          DCD      0x00000000
                  Tmr_TrigSem
                          DCD      0x00000000
                  DiffExti_TrigSem
                          DCD      0x00000000
                  MainMut
                          DCD      0x00000000
                  SENSMut
                          DCD      0x00000000
                  CodeSwTmr
                          DCD      0x00000000
                  DoUncalibTmr
                          DCD      0x00000000
                  PdTmr
                          DCD      0x00000000
                  BtnTimer
                          DCD      0x00000000
                  _ZZ29vApplicationStackOverflowHookE1k ; vApplicationStackOverflowHook::k
                          DCD      0x00000000
                  _ZZ29vApplicationStackOverflowHookPPvPaE3Ctr ; vApplicationStackOverflowHook(void**, signed char*)::Ctr
00005c  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_main_cpp_63965102

;*** Start embedded assembler ***

#line 1 "Source\\Main\\src\\main.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_63965102___ZN29_INTERNAL_8_main_cpp_639651027__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___8_main_cpp_63965102___ZN29_INTERNAL_8_main_cpp_639651027__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_63965102___ZN29_INTERNAL_8_main_cpp_639651027__REVSHEi|
#line 402
|__asm___8_main_cpp_63965102___ZN29_INTERNAL_8_main_cpp_639651027__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_63965102___ZN29_INTERNAL_8_main_cpp_639651025__RRXEj|
#line 587
|__asm___8_main_cpp_63965102___ZN29_INTERNAL_8_main_cpp_639651025__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
