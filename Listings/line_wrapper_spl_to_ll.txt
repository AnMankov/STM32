; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\line_wrapper_spl_to_ll.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\line_wrapper_spl_to_ll.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\line_wrapper_spl_to_ll.crf Source\Line\src\Line_wrapper_SPL_to_LL.cpp]
                          THUMB

                          AREA ||i.EXTI_ClearFlag||, CODE, READONLY, ALIGN=2

                  EXTI_ClearFlag PROC
;;;26       
;;;27     void EXTI_ClearFlag(uint32_t EXTI_Line)//This parameter can be any combination of EXTI_Linex where x can be (0..20).
000000  4a03              LDR      r2,|L1.16|
;;;28     {   
;;;29       LL_EXTI_ClearFlag_0_31(ExtiLine[EXTI_Line]);
000002  f8521020          LDR      r1,[r2,r0,LSL #2]
000006  4a03              LDR      r2,|L1.20|
000008  6011              STR      r1,[r2,#0]
00000a  bf00              NOP      
;;;30     }
00000c  4770              BX       lr
;;;31     
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      ExtiLine
                  |L1.20|
                          DCD      0x40010414

                          AREA ||i.EXTI_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetFlagStatus PROC
;;;31     
;;;32     FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line) //This parameter can be any combination of EXTI_Linex where x can be (0..20).
000000  4601              MOV      r1,r0
;;;33     {
;;;34       return (FlagStatus)LL_EXTI_ReadFlag_0_31(ExtiLine[EXTI_Line]);
000002  4a04              LDR      r2,|L2.20|
000004  f8520021          LDR      r0,[r2,r1,LSL #2]
000008  4a03              LDR      r2,|L2.24|
00000a  6812              LDR      r2,[r2,#0]
00000c  4002              ANDS     r2,r2,r0
00000e  b2d0              UXTB     r0,r2
;;;35     }
000010  4770              BX       lr
;;;36     
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      ExtiLine
                  |L2.24|
                          DCD      0x40010414

                          AREA ||i.EXTI_Init||, CODE, READONLY, ALIGN=2

                  EXTI_Init PROC
;;;36     
;;;37     void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000000  b53e              PUSH     {r1-r5,lr}
;;;38     {
000002  4604              MOV      r4,r0
;;;39       LL_EXTI_InitTypeDef LL_EXTI_InitStruct;
;;;40       
;;;41       LL_EXTI_InitStruct.Line_0_31   = ExtiLine[EXTI_InitStruct->EXTI_Line]; 
000004  4918              LDR      r1,|L3.104|
000006  6820              LDR      r0,[r4,#0]
000008  f8510020          LDR      r0,[r1,r0,LSL #2]
00000c  9000              STR      r0,[sp,#0]
;;;42       LL_EXTI_InitStruct.LineCommand = EXTI_InitStruct->EXTI_LineCmd;
00000e  79a0              LDRB     r0,[r4,#6]
000010  f88d0008          STRB     r0,[sp,#8]
;;;43       
;;;44       switch (EXTI_InitStruct->EXTI_Mode)
000014  7920              LDRB     r0,[r4,#4]
000016  b110              CBZ      r0,|L3.30|
000018  2804              CMP      r0,#4
00001a  d108              BNE      |L3.46|
00001c  e003              B        |L3.38|
                  |L3.30|
;;;45       {
;;;46         case EXTI_Mode_Interrupt:
;;;47     	      LL_EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
00001e  2000              MOVS     r0,#0
000020  f88d0009          STRB     r0,[sp,#9]
;;;48     	      break;
000024  e004              B        |L3.48|
                  |L3.38|
;;;49         case EXTI_Mode_Event:
;;;50     	      LL_EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
000026  2001              MOVS     r0,#1
000028  f88d0009          STRB     r0,[sp,#9]
;;;51     	      break;
00002c  e000              B        |L3.48|
                  |L3.46|
;;;52         default:
;;;53     	      break;
00002e  bf00              NOP      
                  |L3.48|
000030  bf00              NOP                            ;48
;;;54       }
;;;55       
;;;56       switch (EXTI_InitStruct->EXTI_Trigger)
000032  7960              LDRB     r0,[r4,#5]
000034  2808              CMP      r0,#8
000036  d004              BEQ      |L3.66|
000038  280c              CMP      r0,#0xc
00003a  d006              BEQ      |L3.74|
00003c  2810              CMP      r0,#0x10
00003e  d10c              BNE      |L3.90|
000040  e007              B        |L3.82|
                  |L3.66|
;;;57       {
;;;58         case EXTI_Trigger_Rising:
;;;59     	      LL_EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
000042  2001              MOVS     r0,#1
000044  f88d000a          STRB     r0,[sp,#0xa]
;;;60     	      break;
000048  e008              B        |L3.92|
                  |L3.74|
;;;61         case EXTI_Trigger_Falling:
;;;62     	      LL_EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
00004a  2002              MOVS     r0,#2
00004c  f88d000a          STRB     r0,[sp,#0xa]
;;;63     	      break;
000050  e004              B        |L3.92|
                  |L3.82|
;;;64         case EXTI_Trigger_Rising_Falling:
;;;65     	      LL_EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
000052  2003              MOVS     r0,#3
000054  f88d000a          STRB     r0,[sp,#0xa]
;;;66     	      break;
000058  e000              B        |L3.92|
                  |L3.90|
;;;67         default:
;;;68     	      break;
00005a  bf00              NOP      
                  |L3.92|
00005c  bf00              NOP                            ;60
;;;69       }
;;;70          
;;;71       LL_EXTI_Init(&LL_EXTI_InitStruct);
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       LL_EXTI_Init
;;;72     }
000064  bd3e              POP      {r1-r5,pc}
;;;73     
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      ExtiLine

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;73     
;;;74     void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;75     {
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;76       LL_GPIO_InitTypeDef LL_GPIO_InitStruct;
;;;77       
;;;78       LL_GPIO_InitStruct.Pin  = GPIO_InitStruct->GPIO_Pin;
000008  6820              LDR      r0,[r4,#0]
00000a  9001              STR      r0,[sp,#4]
;;;79       LL_GPIO_InitStruct.Mode = GPIO_InitStruct->GPIO_Mode;  
00000c  7920              LDRB     r0,[r4,#4]
00000e  9002              STR      r0,[sp,#8]
;;;80       
;;;81       switch (GPIO_InitStruct->GPIO_Speed)
000010  7960              LDRB     r0,[r4,#5]
000012  2801              CMP      r0,#1
000014  d004              BEQ      |L4.32|
000016  2802              CMP      r0,#2
000018  d005              BEQ      |L4.38|
00001a  2803              CMP      r0,#3
00001c  d109              BNE      |L4.50|
00001e  e005              B        |L4.44|
                  |L4.32|
;;;82       {
;;;83         case GPIO_Speed_Level_1:
;;;84     	      LL_GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
000020  2000              MOVS     r0,#0
000022  9003              STR      r0,[sp,#0xc]
;;;85     	      break;
000024  e006              B        |L4.52|
                  |L4.38|
;;;86         case GPIO_Speed_Level_2:
;;;87     	      LL_GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
000026  2001              MOVS     r0,#1
000028  9003              STR      r0,[sp,#0xc]
;;;88     	      break;
00002a  e003              B        |L4.52|
                  |L4.44|
;;;89         case GPIO_Speed_Level_3:
;;;90     	      LL_GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
00002c  2002              MOVS     r0,#2
00002e  9003              STR      r0,[sp,#0xc]
;;;91     	      break;
000030  e000              B        |L4.52|
                  |L4.50|
;;;92         default:
;;;93     	      break;        
000032  bf00              NOP      
                  |L4.52|
000034  bf00              NOP                            ;85
;;;94       }  
;;;95       
;;;96       LL_GPIO_InitStruct.OutputType = GPIO_InitStruct->GPIO_OType;
000036  79a0              LDRB     r0,[r4,#6]
000038  9004              STR      r0,[sp,#0x10]
;;;97       LL_GPIO_InitStruct.Pull       = GPIO_InitStruct->GPIO_PuPd;
00003a  79e0              LDRB     r0,[r4,#7]
00003c  9005              STR      r0,[sp,#0x14]
;;;98       LL_GPIO_InitStruct.Alternate  = LL_GPIO_AF_0; //в аналогичной структуре SPL нет установки AF
00003e  2000              MOVS     r0,#0
000040  9006              STR      r0,[sp,#0x18]
;;;99                                                     //AF устанавливается отдельными функциями
;;;100      LL_GPIO_Init(GPIOx, &LL_GPIO_InitStruct);
000042  a901              ADD      r1,sp,#4
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       LL_GPIO_Init
;;;101    }
00004a  b007              ADD      sp,sp,#0x1c
00004c  bd30              POP      {r4,r5,pc}
;;;102    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;102    
;;;103    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b570              PUSH     {r4-r6,lr}
;;;104    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;105      LL_GPIO_ResetOutputPin(GPIOx, (uint32_t)GPIO_Pin);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820722LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
;;;106    }
00000e  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;107    
;;;108    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b570              PUSH     {r4-r6,lr}
;;;109    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;110      switch (BitVal)
000008  b116              CBZ      r6,|L6.16|
00000a  2e01              CMP      r6,#1
00000c  d109              BNE      |L6.34|
00000e  e004              B        |L6.26|
                  |L6.16|
;;;111      {
;;;112        case Bit_RESET:
;;;113    	      LL_GPIO_ResetOutputPin(GPIOx, GPIO_Pin);
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820722LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
;;;114    	      break;
000018  e004              B        |L6.36|
                  |L6.26|
;;;115        case Bit_SET:
;;;116    	      LL_GPIO_SetOutputPin(GPIOx, GPIO_Pin);
00001a  bf00              NOP      
00001c  61ac              STR      r4,[r5,#0x18]
00001e  bf00              NOP      
;;;117    	      break;
000020  e000              B        |L6.36|
                  |L6.34|
;;;118        default:
;;;119    	      break;
000022  bf00              NOP      
                  |L6.36|
000024  bf00              NOP                            ;114
;;;120      }
;;;121    }
000026  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;122    
;;;123    void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b538              PUSH     {r3-r5,lr}
;;;124    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;125      switch (NewState)
000006  b115              CBZ      r5,|L7.14|
000008  2d01              CMP      r5,#1
00000a  d11f              BNE      |L7.76|
00000c  e00c              B        |L7.40|
                  |L7.14|
;;;126      {
;;;127        case DISABLE:
;;;128    	       if (LL_APB1_GRP1_IsEnabledClock(RCC_APB1Periph))
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820727LL_APB1_GRP1_IsEnabledClockEj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_APB1_GRP1_IsEnabledClock(unsigned)
000014  b138              CBZ      r0,|L7.38|
;;;129    			   {
;;;130    			     LL_APB1_GRP1_DisableClock(RCC_APB1Periph);
000016  bf00              NOP      
000018  480e              LDR      r0,|L7.84|
00001a  6d80              LDR      r0,[r0,#0x58]
00001c  43a0              BICS     r0,r0,r4
00001e  490d              LDR      r1,|L7.84|
000020  6588              STR      r0,[r1,#0x58]
000022  bf00              NOP      
000024  bf00              NOP      
                  |L7.38|
;;;131    			   }
;;;132    	       break;
000026  e012              B        |L7.78|
                  |L7.40|
;;;133        case ENABLE:
;;;134    	       if (!LL_APB1_GRP1_IsEnabledClock(RCC_APB1Periph))
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820727LL_APB1_GRP1_IsEnabledClockEj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_APB1_GRP1_IsEnabledClock(unsigned)
00002e  b960              CBNZ     r0,|L7.74|
;;;135    			   {
;;;136    			     LL_APB1_GRP1_EnableClock(RCC_APB1Periph);
000030  bf00              NOP      
000032  4808              LDR      r0,|L7.84|
000034  6d80              LDR      r0,[r0,#0x58]
000036  4320              ORRS     r0,r0,r4
000038  4906              LDR      r1,|L7.84|
00003a  6588              STR      r0,[r1,#0x58]
00003c  4608              MOV      r0,r1
00003e  6d80              LDR      r0,[r0,#0x58]
000040  4020              ANDS     r0,r0,r4
000042  9000              STR      r0,[sp,#0]
000044  bf00              NOP      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L7.74|
;;;137    			   }
;;;138    	       break;
00004a  e000              B        |L7.78|
                  |L7.76|
;;;139        default:
;;;140    	       break;
00004c  bf00              NOP      
                  |L7.78|
00004e  bf00              NOP                            ;132
;;;141      }
;;;142    }
000050  bd38              POP      {r3-r5,pc}
;;;143    
                          ENDP

000052  0000              DCW      0x0000
                  |L7.84|
                          DCD      0x40021000

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;143    
;;;144    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b51f              PUSH     {r0-r4,lr}
;;;145    {
000002  4604              MOV      r4,r0
;;;146      LL_RCC_ClocksTypeDef SystemClocksFreq;
;;;147      LL_RCC_GetSystemClocksFreq(&SystemClocksFreq);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       LL_RCC_GetSystemClocksFreq
;;;148      
;;;149      RCC_Clocks->SYSCLK_Frequency    = SystemClocksFreq.SYSCLK_Frequency;
00000a  9800              LDR      r0,[sp,#0]
00000c  6020              STR      r0,[r4,#0]
;;;150      RCC_Clocks->HCLK_Frequency      = SystemClocksFreq.HCLK_Frequency;
00000e  9801              LDR      r0,[sp,#4]
000010  6060              STR      r0,[r4,#4]
;;;151      RCC_Clocks->PCLK1_Frequency     = SystemClocksFreq.PCLK1_Frequency;
000012  9802              LDR      r0,[sp,#8]
000014  60a0              STR      r0,[r4,#8]
;;;152      RCC_Clocks->PCLK2_Frequency     = SystemClocksFreq.PCLK2_Frequency;
000016  9803              LDR      r0,[sp,#0xc]
000018  60e0              STR      r0,[r4,#0xc]
;;;153    //  RCC_Clocks->ADC12CLK_Frequency  = LL_RCC_GetADCClockFreq(LL_RCC_ADC12_CLKSOURCE);
;;;154    //  RCC_Clocks->ADC34CLK_Frequency  = LL_RCC_GetADCClockFreq(LL_RCC_ADC34_CLKSOURCE);
;;;155      RCC_Clocks->I2C1CLK_Frequency   = LL_RCC_GetI2CClockFreq(LL_RCC_I2C1_CLKSOURCE);
00001a  480a              LDR      r0,|L8.68|
00001c  f7fffffe          BL       LL_RCC_GetI2CClockFreq
000020  61a0              STR      r0,[r4,#0x18]
;;;156      RCC_Clocks->I2C2CLK_Frequency   = LL_RCC_GetI2CClockFreq(LL_RCC_I2C2_CLKSOURCE);
000022  4809              LDR      r0,|L8.72|
000024  f7fffffe          BL       LL_RCC_GetI2CClockFreq
000028  61e0              STR      r0,[r4,#0x1c]
;;;157    #if defined(RCC_CFGR3_I2C3SW)
;;;158      RCC_Clocks->I2C3CLK_Frequency   = LL_RCC_GetI2CClockFreq(LL_RCC_I2C3_CLKSOURCE);
;;;159    #endif
;;;160    //  RCC_Clocks->TIM1CLK_Frequency   = LL_RCC_GetTIMClockFreq(LL_RCC_TIM1_CLKSOURCE);
;;;161    #if defined(HRTIM1)
;;;162      RCC_Clocks->HRTIM1CLK_Frequency = LL_RCC_GetHRTIMClockFreq(LL_RCC_HRTIM1_CLKSOURCE);
;;;163    #endif
;;;164    //  RCC_Clocks->TIM8CLK_Frequency   = LL_RCC_GetTIMClockFreq(LL_RCC_TIM8_CLKSOURCE);
;;;165    #if defined(LL_RCC_TIM2_CLKSOURCE)
;;;166      RCC_Clocks->TIM2CLK_Frequency   = LL_RCC_GetTIMClockFreq(LL_RCC_TIM2_CLKSOURCE);
;;;167    #endif
;;;168      RCC_Clocks->USART1CLK_Frequency = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
00002a  2003              MOVS     r0,#3
00002c  f7fffffe          BL       LL_RCC_GetUSARTClockFreq
000030  63a0              STR      r0,[r4,#0x38]
;;;169      RCC_Clocks->USART2CLK_Frequency = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);;
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       LL_RCC_GetUSARTClockFreq
000038  63e0              STR      r0,[r4,#0x3c]
;;;170      RCC_Clocks->USART3CLK_Frequency = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);;
00003a  2030              MOVS     r0,#0x30
00003c  f7fffffe          BL       LL_RCC_GetUSARTClockFreq
000040  6420              STR      r0,[r4,#0x40]
;;;171    //  RCC_Clocks->UART4CLK_Frequency  = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
;;;172    //  RCC_Clocks->UART5CLK_Frequency  = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
;;;173    #if defined(LL_RCC_TIM15_CLKSOURCE)
;;;174      RCC_Clocks->TIM15CLK_Frequency  = LL_RCC_GetTIMClockFreq(LL_RCC_TIM15_CLKSOURCE);
;;;175    #endif
;;;176    #if defined(LL_RCC_TIM16_CLKSOURCE)
;;;177      RCC_Clocks->TIM16CLK_Frequency  = LL_RCC_GetTIMClockFreq(LL_RCC_TIM16_CLKSOURCE);
;;;178    #endif
;;;179    #if defined(LL_RCC_TIM17_CLKSOURCE)
;;;180      RCC_Clocks->TIM17CLK_Frequency  = LL_RCC_GetTIMClockFreq(LL_RCC_TIM17_CLKSOURCE);
;;;181    #endif
;;;182    #if defined(LL_RCC_TIM20_CLKSOURCE)
;;;183      RCC_Clocks->TIM20CLK_Frequency  = LL_RCC_GetTIMClockFreq(LL_RCC_TIM20_CLKSOURCE);
;;;184    #endif
;;;185    }
000042  bd1f              POP      {r0-r4,pc}
;;;186    
                          ENDP

                  |L8.68|
                          DCD      0x000c0003
                  |L8.72|
                          DCD      0x000e0003

                          AREA ||i.SYSCFG_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  SYSCFG_EXTILineConfig PROC
;;;186    
;;;187    void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
000000  b530              PUSH     {r4,r5,lr}
;;;188    {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;189      constexpr uint32_t ExtiLine[] = 
000008  2240              MOVS     r2,#0x40
00000a  490e              LDR      r1,|L9.68|
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       __aeabi_memcpy4
;;;190      {
;;;191        LL_SYSCFG_EXTI_LINE0, 
;;;192        LL_SYSCFG_EXTI_LINE1, 
;;;193        LL_SYSCFG_EXTI_LINE2, 
;;;194        LL_SYSCFG_EXTI_LINE3, 
;;;195        LL_SYSCFG_EXTI_LINE4, 
;;;196        LL_SYSCFG_EXTI_LINE5, 
;;;197        LL_SYSCFG_EXTI_LINE6, 
;;;198        LL_SYSCFG_EXTI_LINE7, 
;;;199        LL_SYSCFG_EXTI_LINE8, 
;;;200        LL_SYSCFG_EXTI_LINE9, 
;;;201        LL_SYSCFG_EXTI_LINE10,
;;;202        LL_SYSCFG_EXTI_LINE11,
;;;203        LL_SYSCFG_EXTI_LINE12,
;;;204        LL_SYSCFG_EXTI_LINE13,
;;;205        LL_SYSCFG_EXTI_LINE14,
;;;206        LL_SYSCFG_EXTI_LINE15
;;;207      };  
;;;208      LL_SYSCFG_SetEXTISource(EXTI_PortSourceGPIOx, ExtiLine[EXTI_PinSourcex]);
000012  a901              ADD      r1,sp,#4
000014  f8510025          LDR      r0,[r1,r5,LSL #2]
000018  490b              LDR      r1,|L9.72|
00001a  b2c2              UXTB     r2,r0
00001c  f8511022          LDR      r1,[r1,r2,LSL #2]
000020  ea214110          BIC      r1,r1,r0,LSR #16
000024  0c02              LSRS     r2,r0,#16
000026  fa92f2a2          RBIT     r2,r2
00002a  fab2f282          CLZ      r2,r2
00002e  fa04f202          LSL      r2,r4,r2
000032  4311              ORRS     r1,r1,r2
000034  4a04              LDR      r2,|L9.72|
000036  b2c3              UXTB     r3,r0
000038  f8421023          STR      r1,[r2,r3,LSL #2]
00003c  bf00              NOP      
;;;209    }
00003e  b011              ADD      sp,sp,#0x44
000040  bd30              POP      {r4,r5,pc}
;;;210    
                          ENDP

000042  0000              DCW      0x0000
                  |L9.68|
                          DCD      ||.constdata||+0x74
                  |L9.72|
                          DCD      0x40010008

                          AREA ||i.TIM_ClearFlag||, CODE, READONLY, ALIGN=2

                  TIM_ClearFlag PROC
;;;210    
;;;211    void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;212    {
000004  b088              SUB      sp,sp,#0x20
000006  4607              MOV      r7,r0
000008  460d              MOV      r5,r1
;;;213      typedef void (*TClrFunc)(TIM_TypeDef *TIMx);
;;;214      
;;;215      struct TFlagHandler
;;;216      {
;;;217        uint32_t TimFlag;
;;;218    	  TClrFunc ClrFunc;
;;;219      };
;;;220      
;;;221      constexpr TFlagHandler FlagHandler[] = //реализовано только то, что используется в sensline.c
00000a  2218              MOVS     r2,#0x18
00000c  490d              LDR      r1,|L10.68|
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       __aeabi_memcpy4
;;;222      {
;;;223        {TIM_FLAG_CC1 , LL_TIM_ClearFlag_CC1},
;;;224        {TIM_FLAG_CC2 , LL_TIM_ClearFlag_CC2},
;;;225        {TIM_FLAG_CC3 , LL_TIM_ClearFlag_CC3},
;;;226      };
;;;227      
;;;228      for (auto item : FlagHandler)
000014  ae02              ADD      r6,sp,#8
000016  4634              MOV      r4,r6
000018  f1060818          ADD      r8,r6,#0x18
00001c  e00d              B        |L10.58|
                  |L10.30|
00001e  e9d40100          LDRD     r0,r1,[r4,#0]
000022  e9cd0100          STRD     r0,r1,[sp,#0]
;;;229      {
;;;230        if (item.TimFlag == TIM_FLAG)
000026  9800              LDR      r0,[sp,#0]
000028  42a8              CMP      r0,r5
00002a  d105              BNE      |L10.56|
;;;231    	 {
;;;232    	   item.ClrFunc(TIMx);
00002c  4638              MOV      r0,r7
00002e  9901              LDR      r1,[sp,#4]
000030  4788              BLX      r1
                  |L10.50|
;;;233    		return;
;;;234    	 }
;;;235      }
;;;236    }
000032  b008              ADD      sp,sp,#0x20
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L10.56|
000038  3408              ADDS     r4,r4,#8              ;233
                  |L10.58|
00003a  4544              CMP      r4,r8                 ;233
00003c  d1ef              BNE      |L10.30|
00003e  bf00              NOP      
000040  e7f7              B        |L10.50|
;;;237    
                          ENDP

000042  0000              DCW      0x0000
                  |L10.68|
                          DCD      ||.constdata||+0xb4

                          AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=1

                  TIM_Cmd PROC
;;;237    
;;;238    void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;239    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;240      switch (NewState)
000006  b115              CBZ      r5,|L11.14|
000008  2d01              CMP      r5,#1
00000a  d118              BNE      |L11.62|
00000c  e00b              B        |L11.38|
                  |L11.14|
;;;241      {
;;;242        case DISABLE:
;;;243    	       if ( LL_TIM_IsEnabledCounter(TIMx) ) //если счетчик включен
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_IsEnabledCounterEP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_IsEnabledCounter(TIM_TypeDef*)
000014  b130              CBZ      r0,|L11.36|
;;;244             {
;;;245    			     LL_TIM_DisableCounter(TIMx);
000016  bf00              NOP      
000018  6820              LDR      r0,[r4,#0]
00001a  f0200001          BIC      r0,r0,#1
00001e  6020              STR      r0,[r4,#0]
000020  bf00              NOP      
000022  bf00              NOP      
                  |L11.36|
;;;246    			   }			
;;;247    	       break;
000024  e00c              B        |L11.64|
                  |L11.38|
;;;248        case ENABLE:  
;;;249    	       if ( !LL_TIM_IsEnabledCounter(TIMx) ) //если счетчик отключен
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_IsEnabledCounterEP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_IsEnabledCounter(TIM_TypeDef*)
00002c  b930              CBNZ     r0,|L11.60|
;;;250             {
;;;251    			     LL_TIM_EnableCounter(TIMx);
00002e  bf00              NOP      
000030  6820              LDR      r0,[r4,#0]
000032  f0400001          ORR      r0,r0,#1
000036  6020              STR      r0,[r4,#0]
000038  bf00              NOP      
00003a  bf00              NOP      
                  |L11.60|
;;;252    			   }
;;;253    	       break;
00003c  e000              B        |L11.64|
                  |L11.62|
;;;254        default:
;;;255    	       break;
00003e  bf00              NOP      
                  |L11.64|
000040  bf00              NOP                            ;247
;;;256      }
;;;257    }
000042  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP


                          AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=1

                  TIM_DeInit PROC
;;;258    
;;;259    void TIM_DeInit(TIM_TypeDef* TIMx)
000000  b510              PUSH     {r4,lr}
;;;260    {
000002  4604              MOV      r4,r0
;;;261      LL_TIM_DeInit(TIMx);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       LL_TIM_DeInit
;;;262    }
00000a  bd10              POP      {r4,pc}
;;;263    
                          ENDP


                          AREA ||i.TIM_GetCounter||, CODE, READONLY, ALIGN=1

                  TIM_GetCounter PROC
;;;263    
;;;264    uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;265    {
;;;266      return LL_TIM_GetCounter(TIMx);
000002  bf00              NOP      
000004  6a48              LDR      r0,[r1,#0x24]
;;;267    }
000006  4770              BX       lr
;;;268    
                          ENDP


                          AREA ||i.TIM_GetITStatus||, CODE, READONLY, ALIGN=1

                  TIM_GetITStatus PROC
;;;268    
;;;269    ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  4602              MOV      r2,r0
;;;270    {
;;;271      return ( LL_TIM_IsActiveFlag_CC2(TIMx) )  //в sensline.c используется только CC2
000002  bf00              NOP      
000004  6910              LDR      r0,[r2,#0x10]
000006  f3c00080          UBFX     r0,r0,#2,#1
00000a  b130              CBZ      r0,|L14.26|
;;;272             &&
;;;273             ( LL_TIM_IsEnabledIT_CC2(TIMx) )
00000c  bf00              NOP      
00000e  68d0              LDR      r0,[r2,#0xc]
000010  f3c00080          UBFX     r0,r0,#2,#1
000014  b108              CBZ      r0,|L14.26|
;;;274             ? ITStatus::SET  
000016  2001              MOVS     r0,#1
                  |L14.24|
;;;275             : ITStatus::RESET;
;;;276    }
000018  4770              BX       lr
                  |L14.26|
00001a  2000              MOVS     r0,#0                 ;275
00001c  e7fc              B        |L14.24|
;;;277    
                          ENDP


                          AREA ||i.TIM_ITConfig||, CODE, READONLY, ALIGN=2

                  TIM_ITConfig PROC
;;;277    
;;;278    void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;279    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4680              MOV      r8,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;280      typedef void (*THandler)(TIM_TypeDef *);
;;;281    
;;;282      struct TItConfig
;;;283      {
;;;284        uint16_t SplIt;        //константа в библиотеке spl
;;;285        FunctionalState State;
;;;286        THandler Handler;
;;;287      };  
;;;288      
;;;289      TItConfig ItConfig[] =
00000c  2230              MOVS     r2,#0x30
00000e  490f              LDR      r1,|L15.76|
000010  a803              ADD      r0,sp,#0xc
000012  f7fffffe          BL       __aeabi_memcpy4
;;;290      {
;;;291        {
;;;292          TIM_IT_CC1,
;;;293          DISABLE,
;;;294          LL_TIM_DisableIT_CC1,
;;;295        },
;;;296        {
;;;297          TIM_IT_CC1,
;;;298          ENABLE,
;;;299          LL_TIM_EnableIT_CC1
;;;300        },
;;;301        {
;;;302          TIM_IT_CC2,
;;;303          DISABLE,
;;;304          LL_TIM_DisableIT_CC2,
;;;305        },
;;;306        {
;;;307          TIM_IT_CC2,
;;;308          ENABLE,
;;;309          LL_TIM_EnableIT_CC2,
;;;310        },
;;;311        {
;;;312          TIM_IT_CC3,
;;;313          DISABLE,
;;;314          LL_TIM_DisableIT_CC3,
;;;315        },
;;;316        {
;;;317          TIM_IT_CC3,
;;;318          ENABLE,
;;;319          LL_TIM_EnableIT_CC3,
;;;320        },
;;;321      };
;;;322      
;;;323      for (auto item : ItConfig)
000016  af03              ADD      r7,sp,#0xc
000018  463c              MOV      r4,r7
00001a  f1070930          ADD      r9,r7,#0x30
00001e  e00f              B        |L15.64|
                  |L15.32|
000020  e9d40100          LDRD     r0,r1,[r4,#0]
000024  e9cd0101          STRD     r0,r1,[sp,#4]
;;;324      {
;;;325        if (
000028  f8bd0004          LDRH     r0,[sp,#4]
00002c  42a8              CMP      r0,r5
00002e  d106              BNE      |L15.62|
;;;326             ( item.SplIt == TIM_IT )
;;;327             &&
;;;328             ( item.State == NewState )
000030  f89d0006          LDRB     r0,[sp,#6]
000034  42b0              CMP      r0,r6
000036  d102              BNE      |L15.62|
;;;329           )
;;;330        {
;;;331          item.Handler(TIMx);
000038  4640              MOV      r0,r8
00003a  9902              LDR      r1,[sp,#8]
00003c  4788              BLX      r1
                  |L15.62|
00003e  3408              ADDS     r4,r4,#8
                  |L15.64|
000040  454c              CMP      r4,r9
000042  d1ed              BNE      |L15.32|
;;;332        }
;;;333      }
;;;334    }
000044  b00f              ADD      sp,sp,#0x3c
000046  e8bd83f0          POP      {r4-r9,pc}
;;;335    
                          ENDP

00004a  0000              DCW      0x0000
                  |L15.76|
                          DCD      ||.constdata||+0xcc

                          AREA ||i.TIM_InternalClockConfig||, CODE, READONLY, ALIGN=2

                  TIM_InternalClockConfig PROC
;;;335    
;;;336    void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
000000  2100              MOVS     r1,#0
000002  6882              LDR      r2,[r0,#8]
000004  4b02              LDR      r3,|L16.16|
000006  401a              ANDS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  6082              STR      r2,[r0,#8]
00000c  bf00              NOP      
;;;337    {
;;;338      LL_TIM_SetClockSource(TIMx, LL_TIM_CLOCKSOURCE_INTERNAL);
;;;339    }
00000e  4770              BX       lr
;;;340    
                          ENDP

                  |L16.16|
                          DCD      0xfffebff8

                          AREA ||i.TIM_OC1Init||, CODE, READONLY, ALIGN=1

                  TIM_OC1Init PROC
;;;340    
;;;341    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;342    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;343      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_CC_DisableChannel(TIM_TypeDef*, unsigned)
;;;344      LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_FROZEN);  
00000e  2200              MOVS     r2,#0
000010  2101              MOVS     r1,#1
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820717LL_TIM_OC_SetModeEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetMode(TIM_TypeDef*, unsigned, unsigned)
;;;345      
;;;346      constexpr uint32_t LL_TIM_ACTIVEOUTPUT = 0x00;
000018  2600              MOVS     r6,#0
;;;347      LL_TIM_IC_SetActiveInput(TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEOUTPUT);
00001a  2200              MOVS     r2,#0
00001c  2101              MOVS     r1,#1
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
;;;348      
;;;349      LL_TIM_OC_SetPolarity(TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
000024  2200              MOVS     r2,#0
000026  2101              MOVS     r1,#1
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820721LL_TIM_OC_SetPolarityEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)
;;;350      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH1);
00002e  2101              MOVS     r1,#1
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_CC_DisableChannel(TIM_TypeDef*, unsigned)
;;;351      
;;;352      LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->TIM_Pulse);
000036  4628              MOV      r0,r5
000038  68a1              LDR      r1,[r4,#8]
00003a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetCompareCH1(TIM_TypeDef*, unsigned)
;;;353    }
00003e  bd70              POP      {r4-r6,pc}
;;;354    
                          ENDP


                          AREA ||i.TIM_OC2Init||, CODE, READONLY, ALIGN=1

                  TIM_OC2Init PROC
;;;354    
;;;355    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;356    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;357      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2);
000006  2110              MOVS     r1,#0x10
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_CC_DisableChannel(TIM_TypeDef*, unsigned)
;;;358      LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_FROZEN);  
00000e  2200              MOVS     r2,#0
000010  2110              MOVS     r1,#0x10
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820717LL_TIM_OC_SetModeEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetMode(TIM_TypeDef*, unsigned, unsigned)
;;;359      
;;;360      constexpr uint32_t LL_TIM_ACTIVEOUTPUT = 0x00;
000018  2600              MOVS     r6,#0
;;;361      LL_TIM_IC_SetActiveInput(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEOUTPUT);
00001a  2200              MOVS     r2,#0
00001c  2110              MOVS     r1,#0x10
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
;;;362      
;;;363      LL_TIM_OC_SetPolarity(TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
000024  2200              MOVS     r2,#0
000026  2110              MOVS     r1,#0x10
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820721LL_TIM_OC_SetPolarityEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)
;;;364      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH2);
00002e  2110              MOVS     r1,#0x10
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_CC_DisableChannel(TIM_TypeDef*, unsigned)
;;;365      
;;;366      LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->TIM_Pulse);
000036  4628              MOV      r0,r5
000038  68a1              LDR      r1,[r4,#8]
00003a  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetCompareCH1(TIM_TypeDef*, unsigned)
;;;367    }
00003e  bd70              POP      {r4-r6,pc}
;;;368    
                          ENDP


                          AREA ||i.TIM_OC3Init||, CODE, READONLY, ALIGN=1

                  TIM_OC3Init PROC
;;;368    
;;;369    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;370    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;371      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3);
000006  f44f7180          MOV      r1,#0x100
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_CC_DisableChannel(TIM_TypeDef*, unsigned)
;;;372      LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_FROZEN);  
000010  2200              MOVS     r2,#0
000012  f44f7180          MOV      r1,#0x100
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820717LL_TIM_OC_SetModeEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetMode(TIM_TypeDef*, unsigned, unsigned)
;;;373      
;;;374      constexpr uint32_t LL_TIM_ACTIVEOUTPUT = 0x00;
00001c  2600              MOVS     r6,#0
;;;375      LL_TIM_IC_SetActiveInput(TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_ACTIVEOUTPUT);
00001e  2200              MOVS     r2,#0
000020  f44f7180          MOV      r1,#0x100
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
;;;376      
;;;377      LL_TIM_OC_SetPolarity(TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
00002a  2200              MOVS     r2,#0
00002c  f44f7180          MOV      r1,#0x100
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820721LL_TIM_OC_SetPolarityEP11TIM_TypeDefjj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)
;;;378      LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH3);
000036  f44f7180          MOV      r1,#0x100
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_CC_DisableChannel(TIM_TypeDef*, unsigned)
;;;379      
;;;380      LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->TIM_Pulse);
000040  4628              MOV      r0,r5
000042  68a1              LDR      r1,[r4,#8]
000044  f7fffffe          BL       _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetCompareCH1(TIM_TypeDef*, unsigned)
;;;381    }
000048  bd70              POP      {r4-r6,pc}
;;;382    
                          ENDP


                          AREA ||i.TIM_TimeBaseInit||, CODE, READONLY, ALIGN=1

                  TIM_TimeBaseInit PROC
;;;382    
;;;383    void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  2200              MOVS     r2,#0
000002  6803              LDR      r3,[r0,#0]
000004  f0230370          BIC      r3,r3,#0x70
000008  4313              ORRS     r3,r3,r2
00000a  6003              STR      r3,[r0,#0]
00000c  bf00              NOP      
;;;384    {
;;;385      LL_TIM_SetCounterMode(TIMx, LL_TIM_COUNTERMODE_UP);
;;;386      LL_TIM_SetAutoReload(TIMx, TIM_TimeBaseInitStruct->TIM_Period);
00000e  684a              LDR      r2,[r1,#4]
000010  62c2              STR      r2,[r0,#0x2c]
000012  bf00              NOP      
;;;387      LL_TIM_SetPrescaler(TIMx, TIM_TimeBaseInitStruct->TIM_Prescaler);
000014  880a              LDRH     r2,[r1,#0]
000016  6282              STR      r2,[r0,#0x28]
000018  bf00              NOP      
;;;388    }
00001a  4770              BX       lr
;;;389    
                          ENDP


                          AREA ||i.TIM_TimeBaseStructInit||, CODE, READONLY, ALIGN=1

                  TIM_TimeBaseStructInit PROC
;;;389    
;;;390    void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;391    {
;;;392      /* Set the default configuration */
;;;393      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
000004  6041              STR      r1,[r0,#4]
;;;394      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
000006  2100              MOVS     r1,#0
000008  8001              STRH     r1,[r0,#0]
;;;395      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
00000a  8101              STRH     r1,[r0,#8]
;;;396      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
00000c  8041              STRH     r1,[r0,#2]
;;;397      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
00000e  8141              STRH     r1,[r0,#0xa]
;;;398    }
000010  4770              BX       lr
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820717LL_TIM_OC_SetModeEP11TIM_TypeDefjj||, CODE, READONLY, ALIGN=2

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820717LL_TIM_OC_SetModeEP11TIM_TypeDefjj PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetMode(TIM_TypeDef*, unsigned, unsigned)
;;;2104     */
;;;2105   __STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2106   {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;2107     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
000006  2901              CMP      r1,#1
000008  d101              BNE      |L22.14|
00000a  2500              MOVS     r5,#0
00000c  e020              B        |L22.80|
                  |L22.14|
00000e  2904              CMP      r1,#4
000010  d101              BNE      |L22.22|
000012  2501              MOVS     r5,#1
000014  e01c              B        |L22.80|
                  |L22.22|
000016  2910              CMP      r1,#0x10
000018  d101              BNE      |L22.30|
00001a  2502              MOVS     r5,#2
00001c  e018              B        |L22.80|
                  |L22.30|
00001e  2940              CMP      r1,#0x40
000020  d101              BNE      |L22.38|
000022  2503              MOVS     r5,#3
000024  e014              B        |L22.80|
                  |L22.38|
000026  f5b17f80          CMP      r1,#0x100
00002a  d101              BNE      |L22.48|
00002c  2504              MOVS     r5,#4
00002e  e00f              B        |L22.80|
                  |L22.48|
000030  f5b16f80          CMP      r1,#0x400
000034  d101              BNE      |L22.58|
000036  2505              MOVS     r5,#5
000038  e00a              B        |L22.80|
                  |L22.58|
00003a  f5b15f80          CMP      r1,#0x1000
00003e  d101              BNE      |L22.68|
000040  2506              MOVS     r5,#6
000042  e005              B        |L22.80|
                  |L22.68|
000044  f5b13f80          CMP      r1,#0x10000
000048  d101              BNE      |L22.78|
00004a  2507              MOVS     r5,#7
00004c  e000              B        |L22.80|
                  |L22.78|
00004e  2508              MOVS     r5,#8
                  |L22.80|
000050  4628              MOV      r0,r5
;;;2108     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
000052  4d09              LDR      r5,|L22.120|
000054  5c2e              LDRB     r6,[r5,r0]
000056  f1030518          ADD      r5,r3,#0x18
00005a  1972              ADDS     r2,r6,r5
;;;2109     MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
00005c  4e07              LDR      r6,|L22.124|
00005e  5c37              LDRB     r7,[r6,r0]
000060  4e07              LDR      r6,|L22.128|
000062  40be              LSLS     r6,r6,r7
000064  6815              LDR      r5,[r2,#0]
000066  43b5              BICS     r5,r5,r6
000068  4e04              LDR      r6,|L22.124|
00006a  5c36              LDRB     r6,[r6,r0]
00006c  fa04f606          LSL      r6,r4,r6
000070  4335              ORRS     r5,r5,r6
000072  6015              STR      r5,[r2,#0]
;;;2110   }
000074  bdf0              POP      {r4-r7,pc}
;;;2111   
                          ENDP

000076  0000              DCW      0x0000
                  |L22.120|
                          DCD      OFFSET_TAB_CCMRx
                  |L22.124|
                          DCD      SHIFT_TAB_OCxx
                  |L22.128|
                          DCD      0x00010073

                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC1EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC1EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC1(TIM_TypeDef*)
;;;4418     */
;;;4419   __STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
000000  68c1              LDR      r1,[r0,#0xc]
;;;4420   {
;;;4421     SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
000002  f0410102          ORR      r1,r1,#2
000006  60c1              STR      r1,[r0,#0xc]
;;;4422   }
000008  4770              BX       lr
;;;4423   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC2EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC2EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC2(TIM_TypeDef*)
;;;4451     */
;;;4452   __STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
000000  68c1              LDR      r1,[r0,#0xc]
;;;4453   {
;;;4454     SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
000002  f0410104          ORR      r1,r1,#4
000006  60c1              STR      r1,[r0,#0xc]
;;;4455   }
000008  4770              BX       lr
;;;4456   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC3EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC3EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC3(TIM_TypeDef*)
;;;4484     */
;;;4485   __STATIC_INLINE void LL_TIM_EnableIT_CC3(TIM_TypeDef *TIMx)
000000  68c1              LDR      r1,[r0,#0xc]
;;;4486   {
;;;4487     SET_BIT(TIMx->DIER, TIM_DIER_CC3IE);
000002  f0410108          ORR      r1,r1,#8
000006  60c1              STR      r1,[r0,#0xc]
;;;4488   }
000008  4770              BX       lr
;;;4489   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC1EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC1EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC1(TIM_TypeDef*)
;;;4048     */
;;;4049   __STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
000000  f06f0102          MVN      r1,#2
;;;4050   {
;;;4051     WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
000004  6101              STR      r1,[r0,#0x10]
;;;4052   }
000006  4770              BX       lr
;;;4053   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC2EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC2EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC2(TIM_TypeDef*)
;;;4070     */
;;;4071   __STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
000000  f06f0104          MVN      r1,#4
;;;4072   {
;;;4073     WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
000004  6101              STR      r1,[r0,#0x10]
;;;4074   }
000006  4770              BX       lr
;;;4075   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC3EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC3EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC3(TIM_TypeDef*)
;;;4092     */
;;;4093   __STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
000000  f06f0108          MVN      r1,#8
;;;4094   {
;;;4095     WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
000004  6101              STR      r1,[r0,#0x10]
;;;4096   }
000006  4770              BX       lr
;;;4097   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC1EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC1EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC1(TIM_TypeDef*)
;;;4429     */
;;;4430   __STATIC_INLINE void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
000000  68c1              LDR      r1,[r0,#0xc]
;;;4431   {
;;;4432     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
000002  f0210102          BIC      r1,r1,#2
000006  60c1              STR      r1,[r0,#0xc]
;;;4433   }
000008  4770              BX       lr
;;;4434   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC2EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC2EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC2(TIM_TypeDef*)
;;;4462     */
;;;4463   __STATIC_INLINE void LL_TIM_DisableIT_CC2(TIM_TypeDef *TIMx)
000000  68c1              LDR      r1,[r0,#0xc]
;;;4464   {
;;;4465     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC2IE);
000002  f0210104          BIC      r1,r1,#4
000006  60c1              STR      r1,[r0,#0xc]
;;;4466   }
000008  4770              BX       lr
;;;4467   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC3EP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC3EP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC3(TIM_TypeDef*)
;;;4495     */
;;;4496   __STATIC_INLINE void LL_TIM_DisableIT_CC3(TIM_TypeDef *TIMx)
000000  68c1              LDR      r1,[r0,#0xc]
;;;4497   {
;;;4498     CLEAR_BIT(TIMx->DIER, TIM_DIER_CC3IE);
000002  f0210108          BIC      r1,r1,#8
000006  60c1              STR      r1,[r0,#0xc]
;;;4499   }
000008  4770              BX       lr
;;;4500   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820721LL_TIM_OC_SetPolarityEP11TIM_TypeDefjj||, CODE, READONLY, ALIGN=2

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820721LL_TIM_OC_SetPolarityEP11TIM_TypeDefjj PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetPolarity(TIM_TypeDef*, unsigned, unsigned)
;;;2177     */
;;;2178   __STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
000000  b570              PUSH     {r4-r6,lr}
;;;2179   {
;;;2180     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
000002  2901              CMP      r1,#1
000004  d101              BNE      |L32.10|
000006  2400              MOVS     r4,#0
000008  e020              B        |L32.76|
                  |L32.10|
00000a  2904              CMP      r1,#4
00000c  d101              BNE      |L32.18|
00000e  2401              MOVS     r4,#1
000010  e01c              B        |L32.76|
                  |L32.18|
000012  2910              CMP      r1,#0x10
000014  d101              BNE      |L32.26|
000016  2402              MOVS     r4,#2
000018  e018              B        |L32.76|
                  |L32.26|
00001a  2940              CMP      r1,#0x40
00001c  d101              BNE      |L32.34|
00001e  2403              MOVS     r4,#3
000020  e014              B        |L32.76|
                  |L32.34|
000022  f5b17f80          CMP      r1,#0x100
000026  d101              BNE      |L32.44|
000028  2404              MOVS     r4,#4
00002a  e00f              B        |L32.76|
                  |L32.44|
00002c  f5b16f80          CMP      r1,#0x400
000030  d101              BNE      |L32.54|
000032  2405              MOVS     r4,#5
000034  e00a              B        |L32.76|
                  |L32.54|
000036  f5b15f80          CMP      r1,#0x1000
00003a  d101              BNE      |L32.64|
00003c  2406              MOVS     r4,#6
00003e  e005              B        |L32.76|
                  |L32.64|
000040  f5b13f80          CMP      r1,#0x10000
000044  d101              BNE      |L32.74|
000046  2407              MOVS     r4,#7
000048  e000              B        |L32.76|
                  |L32.74|
00004a  2408              MOVS     r4,#8
                  |L32.76|
00004c  4623              MOV      r3,r4
;;;2181     MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
00004e  6a04              LDR      r4,[r0,#0x20]
000050  4d05              LDR      r5,|L32.104|
000052  5cee              LDRB     r6,[r5,r3]
000054  2502              MOVS     r5,#2
000056  40b5              LSLS     r5,r5,r6
000058  43ac              BICS     r4,r4,r5
00005a  4d03              LDR      r5,|L32.104|
00005c  5ced              LDRB     r5,[r5,r3]
00005e  fa02f505          LSL      r5,r2,r5
000062  432c              ORRS     r4,r4,r5
000064  6204              STR      r4,[r0,#0x20]
;;;2182   }
000066  bd70              POP      {r4-r6,pc}
;;;2183   
                          ENDP

                  |L32.104|
                          DCD      SHIFT_TAB_CCxP

                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820722LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820722LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_GPIO_ResetOutputPin(GPIO_TypeDef*, unsigned)
;;;992      */
;;;993    __STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
000000  6281              STR      r1,[r0,#0x28]
;;;994    {
;;;995      WRITE_REG(GPIOx->BRR, PinMask);
;;;996    }
000002  4770              BX       lr
;;;997    
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_IsEnabledCounterEP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_IsEnabledCounterEP11TIM_TypeDef PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_IsEnabledCounter(TIM_TypeDef*)
;;;1476     */
;;;1477   __STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
000000  4601              MOV      r1,r0
;;;1478   {
;;;1479     return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
000002  6808              LDR      r0,[r1,#0]
000004  f0000001          AND      r0,r0,#1
;;;1480   }
000008  4770              BX       lr
;;;1481   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_OC_SetCompareCH1(TIM_TypeDef*, unsigned)
;;;2551     */
;;;2552   __STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
000000  6341              STR      r1,[r0,#0x34]
;;;2553   {
;;;2554     WRITE_REG(TIMx->CCR1, CompareValue);
;;;2555   }
000002  4770              BX       lr
;;;2556   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj||, CODE, READONLY, ALIGN=1

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_CC_DisableChannel(TIM_TypeDef*, unsigned)
;;;1985     */
;;;1986   __STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
000000  6a02              LDR      r2,[r0,#0x20]
;;;1987   {
;;;1988     CLEAR_BIT(TIMx->CCER, Channels);
000002  438a              BICS     r2,r2,r1
000004  6202              STR      r2,[r0,#0x20]
;;;1989   }
000006  4770              BX       lr
;;;1990   
                          ENDP


                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj||, CODE, READONLY, ALIGN=2

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_IC_SetActiveInput(TIM_TypeDef*, unsigned, unsigned)
;;;2815     */
;;;2816   __STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2817   {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;2818     register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
000006  2901              CMP      r1,#1
000008  d101              BNE      |L37.14|
00000a  2500              MOVS     r5,#0
00000c  e020              B        |L37.80|
                  |L37.14|
00000e  2904              CMP      r1,#4
000010  d101              BNE      |L37.22|
000012  2501              MOVS     r5,#1
000014  e01c              B        |L37.80|
                  |L37.22|
000016  2910              CMP      r1,#0x10
000018  d101              BNE      |L37.30|
00001a  2502              MOVS     r5,#2
00001c  e018              B        |L37.80|
                  |L37.30|
00001e  2940              CMP      r1,#0x40
000020  d101              BNE      |L37.38|
000022  2503              MOVS     r5,#3
000024  e014              B        |L37.80|
                  |L37.38|
000026  f5b17f80          CMP      r1,#0x100
00002a  d101              BNE      |L37.48|
00002c  2504              MOVS     r5,#4
00002e  e00f              B        |L37.80|
                  |L37.48|
000030  f5b16f80          CMP      r1,#0x400
000034  d101              BNE      |L37.58|
000036  2505              MOVS     r5,#5
000038  e00a              B        |L37.80|
                  |L37.58|
00003a  f5b15f80          CMP      r1,#0x1000
00003e  d101              BNE      |L37.68|
000040  2506              MOVS     r5,#6
000042  e005              B        |L37.80|
                  |L37.68|
000044  f5b13f80          CMP      r1,#0x10000
000048  d101              BNE      |L37.78|
00004a  2507              MOVS     r5,#7
00004c  e000              B        |L37.80|
                  |L37.78|
00004e  2508              MOVS     r5,#8
                  |L37.80|
000050  4628              MOV      r0,r5
;;;2819     register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
000052  4d09              LDR      r5,|L37.120|
000054  5c2e              LDRB     r6,[r5,r0]
000056  f1030518          ADD      r5,r3,#0x18
00005a  1972              ADDS     r2,r6,r5
;;;2820     MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
00005c  4e07              LDR      r6,|L37.124|
00005e  5c37              LDRB     r7,[r6,r0]
000060  2603              MOVS     r6,#3
000062  40be              LSLS     r6,r6,r7
000064  6815              LDR      r5,[r2,#0]
000066  43b5              BICS     r5,r5,r6
000068  0c26              LSRS     r6,r4,#16
00006a  4f04              LDR      r7,|L37.124|
00006c  5c3f              LDRB     r7,[r7,r0]
00006e  40be              LSLS     r6,r6,r7
000070  4335              ORRS     r5,r5,r6
000072  6015              STR      r5,[r2,#0]
;;;2821   }
000074  bdf0              POP      {r4-r7,pc}
;;;2822   
                          ENDP

000076  0000              DCW      0x0000
                  |L37.120|
                          DCD      OFFSET_TAB_CCMRx
                  |L37.124|
                          DCD      SHIFT_TAB_ICxx

                          AREA ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820727LL_APB1_GRP1_IsEnabledClockEj||, CODE, READONLY, ALIGN=2

                  _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820727LL_APB1_GRP1_IsEnabledClockEj PROC ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_APB1_GRP1_IsEnabledClock(unsigned)
;;;1193   */
;;;1194   __STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
000000  4601              MOV      r1,r0
;;;1195   {
;;;1196     return (READ_BIT(RCC->APB1ENR1, Periphs) == Periphs);
000002  4804              LDR      r0,|L38.20|
000004  6d80              LDR      r0,[r0,#0x58]
000006  4008              ANDS     r0,r0,r1
000008  4288              CMP      r0,r1
00000a  d101              BNE      |L38.16|
00000c  2001              MOVS     r0,#1
                  |L38.14|
;;;1197   }
00000e  4770              BX       lr
                  |L38.16|
000010  2000              MOVS     r0,#0                 ;1196
000012  e7fc              B        |L38.14|
;;;1198   
                          ENDP

                  |L38.20|
                          DCD      0x40021000

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820717LL_TIM_OC_SetModeEP11TIM_TypeDefjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820717LL_TIM_OC_SetModeEP11TIM_TypeDefjj||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820721LL_TIM_OC_SetPolarityEP11TIM_TypeDefjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820721LL_TIM_OC_SetPolarityEP11TIM_TypeDefjj||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_IC_SetActiveInputEP11TIM_TypeDefjj||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i.EXTI_ClearFlag||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.EXTI_ClearFlag||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i.EXTI_GetFlagStatus||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.EXTI_GetFlagStatus||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i.EXTI_Init||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.EXTI_Init||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i.GPIO_Init||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.GPIO_Init||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i.GPIO_ResetBits||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.GPIO_ResetBits||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i.GPIO_WriteBit||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.GPIO_WriteBit||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i.RCC_APB1PeriphClockCmd||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.RCC_APB1PeriphClockCmd||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i.RCC_GetClocksFreq||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.RCC_GetClocksFreq||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i.SYSCFG_EXTILineConfig||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.SYSCFG_EXTILineConfig||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i.TIM_ClearFlag||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_ClearFlag||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i.TIM_Cmd||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_Cmd||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i.TIM_DeInit||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_DeInit||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i.TIM_GetCounter||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_GetCounter||
                          DCD      0x00000001

                          AREA ||area_number.55||, LINKORDER=||i.TIM_GetITStatus||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_GetITStatus||
                          DCD      0x00000001

                          AREA ||area_number.56||, LINKORDER=||i.TIM_ITConfig||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_ITConfig||
                          DCD      0x00000001

                          AREA ||area_number.57||, LINKORDER=||i.TIM_InternalClockConfig||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_InternalClockConfig||
                          DCD      0x00000001

                          AREA ||area_number.58||, LINKORDER=||i.TIM_OC1Init||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_OC1Init||
                          DCD      0x00000001

                          AREA ||area_number.59||, LINKORDER=||i.TIM_OC2Init||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_OC2Init||
                          DCD      0x00000001

                          AREA ||area_number.60||, LINKORDER=||i.TIM_OC3Init||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.60||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_OC3Init||
                          DCD      0x00000001

                          AREA ||area_number.61||, LINKORDER=||i.TIM_TimeBaseInit||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.61||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_TimeBaseInit||
                          DCD      0x00000001

                          AREA ||area_number.62||, LINKORDER=||i.TIM_TimeBaseStructInit||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.62||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM_TimeBaseStructInit||
                          DCD      0x00000001

                          AREA ||area_number.63||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820727LL_APB1_GRP1_IsEnabledClockEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.63||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820727LL_APB1_GRP1_IsEnabledClockEj||
                          DCD      0x00000001

                          AREA ||area_number.64||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_IsEnabledCounterEP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.64||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_IsEnabledCounterEP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.65||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820724LL_TIM_CC_DisableChannelEP11TIM_TypeDefj||
                          DCD      0x00000001

                          AREA ||area_number.66||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820723LL_TIM_OC_SetCompareCH1EP11TIM_TypeDefj||
                          DCD      0x00000001

                          AREA ||area_number.67||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC1EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.67||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC1EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.68||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC2EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.68||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC2EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.69||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC3EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.69||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC3EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.70||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC1EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.70||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC1EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.71||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC1EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.71||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC1EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.72||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC2EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.72||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC2EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.73||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC2EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.73||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC2EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.74||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC3EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.74||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC3EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.75||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC3EP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.75||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC3EP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.76||, LINKORDER=||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820722LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.76||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820722LL_GPIO_ResetOutputPinEP12GPIO_TypeDefj||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  OFFSET_TAB_CCMRx
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  0404043c          DCB      0x04,0x04,0x04,0x3c
000008  3c                DCB      0x3c
                  SHIFT_TAB_OCxx
000009  000008            DCB      0x00,0x00,0x08
00000c  00000008          DCB      0x00,0x00,0x00,0x08
000010  0008              DCB      0x00,0x08
                  SHIFT_TAB_ICxx
000012  0000              DCB      0x00,0x00
000014  08000000          DCB      0x08,0x00,0x00,0x00
000018  080000            DCB      0x08,0x00,0x00
                  SHIFT_TAB_CCxP
00001b  00                DCB      0x00
00001c  02040608          DCB      0x02,0x04,0x06,0x08
000020  0a0c1014          DCB      0x0a,0x0c,0x10,0x14
                  ExtiLine
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000040
                          DCD      0x00000080
                          DCD      0x00000100
                          DCD      0x00000200
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                          DCD      0x00008000
                          DCD      0x00010000
                          DCD      0x00040000
                          DCD      0x00080000
                          DCD      0x00100000
                          DCD      0x000f0000
                          DCD      0x00f00000
                          DCD      0x0f000000
                          DCD      0xf0000000
                          DCD      0x000f0001
                          DCD      0x00f00001
                          DCD      0x0f000001
                          DCD      0xf0000001
                          DCD      0x000f0002
                          DCD      0x00f00002
                          DCD      0x0f000002
                          DCD      0xf0000002
                          DCD      0x000f0003
                          DCD      0x00f00003
                          DCD      0x0f000003
                          DCD      0xf0000003
                          DCD      0x00000002
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC1EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC1(TIM_TypeDef*)
                          DCD      0x00000004
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC2EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC2(TIM_TypeDef*)
                          DCD      0x00000008
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_ClearFlag_CC3EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_ClearFlag_CC3(TIM_TypeDef*)
0000cc  0002              DCW      0x0002
0000ce  0000              DCB      0x00,0x00
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC1EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC1(TIM_TypeDef*)
0000d4  0002              DCW      0x0002
0000d6  0100              DCB      0x01,0x00
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC1EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC1(TIM_TypeDef*)
0000dc  0004              DCW      0x0004
0000de  0000              DCB      0x00,0x00
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC2EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC2(TIM_TypeDef*)
0000e4  0004              DCW      0x0004
0000e6  0100              DCB      0x01,0x00
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC2EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC2(TIM_TypeDef*)
0000ec  0008              DCW      0x0008
0000ee  0000              DCB      0x00,0x00
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820720LL_TIM_DisableIT_CC3EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_DisableIT_CC3(TIM_TypeDef*)
0000f4  0008              DCW      0x0008
0000f6  0100              DCB      0x01,0x00
                          DCD      _ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a2820719LL_TIM_EnableIT_CC3EP11TIM_TypeDef ; [local to Line_wrapper_SPL_to_LL_cpp]::LL_TIM_EnableIT_CC3(TIM_TypeDef*)

;*** Start embedded assembler ***

#line 1 "Source\\Line\\src\\Line_wrapper_SPL_to_LL.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___26_Line_wrapper_SPL_to_LL_cpp_34a28207___ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a282077__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___26_Line_wrapper_SPL_to_LL_cpp_34a28207___ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a282077__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___26_Line_wrapper_SPL_to_LL_cpp_34a28207___ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a282077__REVSHEi|
#line 402
|__asm___26_Line_wrapper_SPL_to_LL_cpp_34a28207___ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a282077__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___26_Line_wrapper_SPL_to_LL_cpp_34a28207___ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a282075__RRXEj|
#line 587
|__asm___26_Line_wrapper_SPL_to_LL_cpp_34a28207___ZN48_INTERNAL_26_Line_wrapper_SPL_to_LL_cpp_34a282075__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
