; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\angles_cnt.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\angles_cnt.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\angles_cnt.crf Source\Main\src\angles_cnt.cpp]
                          THUMB

                          AREA ||i._ZN7TAngles10get_z_signEv||, CODE, READONLY, ALIGN=2

                  _ZN7TAngles10get_z_signEv PROC ; TAngles::get_z_sign()
;;;294    
;;;295    TAngles::TSign TAngles::get_z_sign()
000000  b510              PUSH     {r4,lr}
;;;296    {
000002  4604              MOV      r4,r0
;;;297      return ( Model.get_accel_z() >= 0 ) ? __POZITIVE
000004  4805              LDR      r0,|L1.28|
000006  f7fffffe          BL       _ZN6TModel11get_accel_zEv ; TModel::get_accel_z()
00000a  eeb50ac0          VCMPE.F32 s0,#0.0
00000e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000012  da01              BGE      |L1.24|
;;;298                                          : __NEGATIVE;
000014  2001              MOVS     r0,#1
                  |L1.22|
;;;299    }
000016  bd10              POP      {r4,pc}
                  |L1.24|
000018  2000              MOVS     r0,#0                 ;297
00001a  e7fc              B        |L1.22|
;;;300    //-----------------------------------------------------------
                          ENDP

                  |L1.28|
                          DCD      Model

                          AREA ||i._ZN7TAngles10place_downEss||, CODE, READONLY, ALIGN=2

                  _ZN7TAngles10place_downEss PROC ; TAngles::place_down(short, short)
;;;224    
;;;225    void TAngles::place_down( int16_t Base, int16_t Sens )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;226    {
000004  b093              SUB      sp,sp,#0x4c
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;227      if (
00000c  f1160f3c          CMN      r6,#0x3c
000010  da07              BGE      |L2.34|
;;;228          Base >= BASE_THR.Down.High
;;;229          ||
;;;230          (
;;;231           Base > BASE_THR.Down.Low
000012  f1160f46          CMN      r6,#0x46
000016  dd60              BLE      |L2.218|
;;;232           &&
;;;233           Model.get_base_pos_err() == TModel::TPosErr::_POS_OK
000018  4836              LDR      r0,|L2.244|
00001a  f7fffffe          BL       _ZN6TModel16get_base_pos_errEv ; TModel::get_base_pos_err()
00001e  2801              CMP      r0,#1
000020  d15b              BNE      |L2.218|
                  |L2.34|
;;;234          )      
;;;235         )
;;;236      {
;;;237        //база в четвертом квадранте
;;;238        Model.set_base_pos_err( TModel::TPosErr::_POS_OK );
000022  2101              MOVS     r1,#1
000024  4833              LDR      r0,|L2.244|
000026  f7fffffe          BL       _ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE ; TModel::set_base_pos_err(TSettings::TPosErr)
;;;239    
;;;240        TOpenDetect OpenDetect[] =
00002a  2230              MOVS     r2,#0x30
00002c  4932              LDR      r1,|L2.248|
00002e  a807              ADD      r0,sp,#0x1c
000030  f7fffffe          BL       __aeabi_memcpy4
;;;241        {
;;;242          {   0,  90, &TAngles::q1_neg_cnt }, //__Q_ONE  
;;;243          {  91, 180, &TAngles::q2_neg_cnt }, //__Q_TWO  
;;;244          { 181, 270, &TAngles::q3_neg_cnt }, //__Q_THREE
;;;245          { -90,  -1, &TAngles::q4_neg_cnt }, //__Q_FOUR 
;;;246        };
;;;247        
;;;248        for ( auto item : OpenDetect )
000034  f10d081c          ADD      r8,sp,#0x1c
000038  4644              MOV      r4,r8
00003a  f1080030          ADD      r0,r8,#0x30
00003e  9006              STR      r0,[sp,#0x18]
000040  e047              B        |L2.210|
                  |L2.66|
000042  e8940007          LDM      r4,{r0-r2}
000046  ab03              ADD      r3,sp,#0xc
000048  c307              STM      r3!,{r0-r2}
;;;249        {
;;;250          if (
00004a  f9bd000c          LDRSH    r0,[sp,#0xc]
00004e  42b8              CMP      r0,r7
000050  dc3e              BGT      |L2.208|
;;;251              Sens >= item.Low  //определение квадранта датчика
;;;252              &&
;;;253              Sens <= item.High
000052  f9bd000e          LDRSH    r0,[sp,#0xe]
000056  42b8              CMP      r0,r7
000058  db3a              BLT      |L2.208|
;;;254             )
;;;255          {
;;;256            int16_t CurOpenAngle = ( this->*item.CntFnct )( Base, Sens );
00005a  9805              LDR      r0,[sp,#0x14]
00005c  eb050960          ADD      r9,r5,r0,ASR #1
000060  f89d0014          LDRB     r0,[sp,#0x14]
000064  f0000001          AND      r0,r0,#1
000068  b908              CBNZ     r0,|L2.110|
00006a  9804              LDR      r0,[sp,#0x10]
00006c  e006              B        |L2.124|
                  |L2.110|
00006e  f8d90000          LDR      r0,[r9,#0]
000072  9904              LDR      r1,[sp,#0x10]
000074  eb000a01          ADD      r10,r0,r1
000078  f8da0000          LDR      r0,[r10,#0]
                  |L2.124|
00007c  4683              MOV      r11,r0
00007e  463a              MOV      r2,r7
000080  4631              MOV      r1,r6
000082  4648              MOV      r0,r9
000084  47d8              BLX      r11
000086  9002              STR      r0,[sp,#8]
;;;257            cast_open_angle( &CurOpenAngle );                              //приведение угла открытия к формату: 0..260, -1..-80
000088  a902              ADD      r1,sp,#8
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       _ZN7TAngles15cast_open_angleEPs ; TAngles::cast_open_angle(short*)
;;;258            CurOpenAngle -= Model.get_bias();                              //с учетом смещения из настроек
000090  4818              LDR      r0,|L2.244|
000092  f7fffffe          BL       _ZN6TModel8get_biasEv ; TModel::get_bias()
000096  f8bd1008          LDRH     r1,[sp,#8]
00009a  1a08              SUBS     r0,r1,r0
00009c  b200              SXTH     r0,r0
00009e  9002              STR      r0,[sp,#8]
;;;259            
;;;260            float PrevOpenAngle = Model.get_open_angle();
0000a0  4814              LDR      r0,|L2.244|
0000a2  f7fffffe          BL       _ZN6TModel14get_open_angleEv ; TModel::get_open_angle()
0000a6  ed8d0a01          VSTR     s0,[sp,#4]
;;;261    
;;;262            cnt_damp( PrevOpenAngle, CurOpenAngle, DampCoeff );   //демпфирование угла
0000aa  7828              LDRB     r0,[r5,#0]
0000ac  ee000a90          VMOV     s1,r0
0000b0  eef80a60          VCVT.F32.U32 s1,s1
0000b4  eeb00a60          VMOV.F32 s0,s1
0000b8  f9bd2008          LDRSH    r2,[sp,#8]
0000bc  a901              ADD      r1,sp,#4
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       _ZN7TAngles8cnt_dampERfsf ; TAngles::cnt_damp(float&, short, float)
;;;263            Model.set_open_angle( PrevOpenAngle );
0000c4  ed9d0a01          VLDR     s0,[sp,#4]
0000c8  480a              LDR      r0,|L2.244|
0000ca  f7fffffe          BL       _ZN6TModel14set_open_angleEf ; TModel::set_open_angle(float)
;;;264          }
0000ce  bf00              NOP      
                  |L2.208|
0000d0  340c              ADDS     r4,r4,#0xc
                  |L2.210|
0000d2  9806              LDR      r0,[sp,#0x18]
0000d4  4284              CMP      r4,r0
0000d6  d1b4              BNE      |L2.66|
;;;265        }
;;;266      }
0000d8  e008              B        |L2.236|
                  |L2.218|
;;;267      else
;;;268      {
;;;269        //положение базы недопустимо
;;;270        Model.set_base_pos_err( TModel::TPosErr::_POS_ERR );
0000da  2100              MOVS     r1,#0
0000dc  4805              LDR      r0,|L2.244|
0000de  f7fffffe          BL       _ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE ; TModel::set_base_pos_err(TSettings::TPosErr)
;;;271        Model.set_open_angle( 0 );
0000e2  ed9f0a06          VLDR     s0,|L2.252|
0000e6  4803              LDR      r0,|L2.244|
0000e8  f7fffffe          BL       _ZN6TModel14set_open_angleEf ; TModel::set_open_angle(float)
                  |L2.236|
;;;272        //угол открытия остается в предыдущем состоянии
;;;273      }
;;;274    }
0000ec  b013              ADD      sp,sp,#0x4c
0000ee  e8bd8ff0          POP      {r4-r11,pc}
;;;275    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L2.244|
                          DCD      Model
                  |L2.248|
                          DCD      ||.constdata||+0x2a0
                  |L2.252|
0000fc  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN7TAngles10q1_neg_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q1_neg_cntEa PROC ; TAngles::q1_neg_cnt(signed char)
;;;330    
;;;331    int16_t TAngles::q1_neg_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;332    {
;;;333      return -Angle;
000002  4248              RSBS     r0,r1,#0
;;;334    }
000004  4770              BX       lr
;;;335    
                          ENDP


                          AREA ||i._ZN7TAngles10q1_neg_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q1_neg_cntEss PROC ; TAngles::q1_neg_cnt(short, short)
;;;382    
;;;383    int16_t TAngles::q1_neg_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;384    {
;;;385      return Sens - Base;
000002  1a50              SUBS     r0,r2,r1
000004  b200              SXTH     r0,r0
;;;386    }
000006  4770              BX       lr
;;;387    
                          ENDP


                          AREA ||i._ZN7TAngles10q1_pos_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q1_pos_cntEa PROC ; TAngles::q1_pos_cnt(signed char)
;;;302    //----- Вычисление угла блока -------------------------------
;;;303    int16_t TAngles::q1_pos_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;304    {
;;;305      return Angle;
000002  4608              MOV      r0,r1
;;;306    }
000004  4770              BX       lr
;;;307    
                          ENDP


                          AREA ||i._ZN7TAngles10q1_pos_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q1_pos_cntEss PROC ; TAngles::q1_pos_cnt(short, short)
;;;360    //----- Вычисление угла открытия ----------------------------
;;;361    int16_t TAngles::q1_pos_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;362    {
;;;363      return Sens - Base;
000002  1a50              SUBS     r0,r2,r1
000004  b200              SXTH     r0,r0
;;;364    }
000006  4770              BX       lr
;;;365    
                          ENDP


                          AREA ||i._ZN7TAngles10q2_neg_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q2_neg_cntEa PROC ; TAngles::q2_neg_cnt(signed char)
;;;335    
;;;336    int16_t TAngles::q2_neg_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;337    {
;;;338      return 180 + Angle;
000002  f10100b4          ADD      r0,r1,#0xb4
;;;339    }
000006  4770              BX       lr
;;;340    
                          ENDP


                          AREA ||i._ZN7TAngles10q2_neg_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q2_neg_cntEss PROC ; TAngles::q2_neg_cnt(short, short)
;;;387    
;;;388    int16_t TAngles::q2_neg_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;389    {
;;;390      return Sens - Base;
000002  1a50              SUBS     r0,r2,r1
000004  b200              SXTH     r0,r0
;;;391    }
000006  4770              BX       lr
;;;392    
                          ENDP


                          AREA ||i._ZN7TAngles10q2_pos_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q2_pos_cntEa PROC ; TAngles::q2_pos_cnt(signed char)
;;;307    
;;;308    int16_t TAngles::q2_pos_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;309    {
;;;310      return 180 - Angle;
000002  f1c100b4          RSB      r0,r1,#0xb4
;;;311    }
000006  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i._ZN7TAngles10q2_pos_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q2_pos_cntEss PROC ; TAngles::q2_pos_cnt(short, short)
;;;365    
;;;366    int16_t TAngles::q2_pos_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;367    {
;;;368      return Sens - Base;
000002  1a50              SUBS     r0,r2,r1
000004  b200              SXTH     r0,r0
;;;369    }
000006  4770              BX       lr
;;;370    
                          ENDP


                          AREA ||i._ZN7TAngles10q3_neg_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q3_neg_cntEa PROC ; TAngles::q3_neg_cnt(signed char)
;;;340    
;;;341    int16_t TAngles::q3_neg_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;342    {
;;;343      int16_t Res = 180 + Angle;
000002  f10100b4          ADD      r0,r1,#0xb4
;;;344      
;;;345      if ( Res > CONSTS::MAX_DEV_ANGLE )
000006  f5b07f82          CMP      r0,#0x104
00000a  dd01              BLE      |L11.16|
;;;346      {
;;;347        Res = CONSTS::MAX_DEV_ANGLE;
00000c  f44f7082          MOV      r0,#0x104
                  |L11.16|
;;;348      }
;;;349      
;;;350      return Res;
;;;351    }
000010  4770              BX       lr
;;;352    
                          ENDP


                          AREA ||i._ZN7TAngles10q3_neg_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q3_neg_cntEss PROC ; TAngles::q3_neg_cnt(short, short)
;;;392    
;;;393    int16_t TAngles::q3_neg_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;394    {
;;;395      return Sens - Base;
000002  1a50              SUBS     r0,r2,r1
000004  b200              SXTH     r0,r0
;;;396    }
000006  4770              BX       lr
;;;397    
                          ENDP


                          AREA ||i._ZN7TAngles10q3_pos_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q3_pos_cntEa PROC ; TAngles::q3_pos_cnt(signed char)
;;;312    
;;;313    int16_t TAngles::q3_pos_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;314    {
;;;315      int16_t Res = 180 - Angle;
000002  f1c100b4          RSB      r0,r1,#0xb4
;;;316      
;;;317      if ( Res > CONSTS::MAX_DEV_ANGLE )
000006  f5b07f82          CMP      r0,#0x104
00000a  dd01              BLE      |L13.16|
;;;318      {
;;;319        Res = CONSTS::MAX_DEV_ANGLE;
00000c  f44f7082          MOV      r0,#0x104
                  |L13.16|
;;;320      }
;;;321      
;;;322      return Res;
;;;323    }
000010  4770              BX       lr
;;;324    
                          ENDP


                          AREA ||i._ZN7TAngles10q3_pos_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q3_pos_cntEss PROC ; TAngles::q3_pos_cnt(short, short)
;;;370    
;;;371    int16_t TAngles::q3_pos_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;372    {
;;;373      return Sens - Base;
000002  1a50              SUBS     r0,r2,r1
000004  b200              SXTH     r0,r0
;;;374    }
000006  4770              BX       lr
;;;375    
                          ENDP


                          AREA ||i._ZN7TAngles10q4_neg_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q4_neg_cntEa PROC ; TAngles::q4_neg_cnt(signed char)
;;;352    
;;;353    int16_t TAngles::q4_neg_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;354    {
;;;355      return ( -Angle >= CONSTS::MIN_DEV_ANGLE ) ? -Angle
000002  4248              RSBS     r0,r1,#0
000004  f1100f50          CMN      r0,#0x50
000008  db01              BLT      |L15.14|
00000a  4248              RSBS     r0,r1,#0
                  |L15.12|
;;;356                                                 : CONSTS::MIN_DEV_ANGLE;
;;;357    }
00000c  4770              BX       lr
                  |L15.14|
00000e  f06f004f          MVN      r0,#0x4f              ;356
000012  e7fb              B        |L15.12|
;;;358    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN7TAngles10q4_neg_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q4_neg_cntEss PROC ; TAngles::q4_neg_cnt(short, short)
;;;397    
;;;398    int16_t TAngles::q4_neg_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;399    {
;;;400      return Sens - Base;
000002  1a50              SUBS     r0,r2,r1
000004  b200              SXTH     r0,r0
;;;401    }
000006  4770              BX       lr
;;;402    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN7TAngles10q4_pos_cntEa||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q4_pos_cntEa PROC ; TAngles::q4_pos_cnt(signed char)
;;;324    
;;;325    int16_t TAngles::q4_pos_cnt( int8_t Angle )
000000  4602              MOV      r2,r0
;;;326    {
;;;327      return ( Angle >= CONSTS::MIN_DEV_ANGLE ) ? Angle
000002  f1110f50          CMN      r1,#0x50
000006  db01              BLT      |L17.12|
000008  4608              MOV      r0,r1
                  |L17.10|
;;;328                                                : CONSTS::MIN_DEV_ANGLE;
;;;329    }
00000a  4770              BX       lr
                  |L17.12|
00000c  f06f004f          MVN      r0,#0x4f              ;328
000010  e7fb              B        |L17.10|
;;;330    
                          ENDP


                          AREA ||i._ZN7TAngles10q4_pos_cntEss||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles10q4_pos_cntEss PROC ; TAngles::q4_pos_cnt(short, short)
;;;375    
;;;376    int16_t TAngles::q4_pos_cnt( int16_t Base, int16_t Sens )
000000  4603              MOV      r3,r0
;;;377    {
;;;378      return ( (Sens - Base) >= CONSTS::MIN_DEV_ANGLE ) ? Sens - Base
000002  1a50              SUBS     r0,r2,r1
000004  f1100f50          CMN      r0,#0x50
000008  db01              BLT      |L18.14|
00000a  1a50              SUBS     r0,r2,r1
00000c  e002              B        |L18.20|
                  |L18.14|
;;;379                                                        : 360 + Sens - Base;
00000e  f50270b4          ADD      r0,r2,#0x168
000012  1a40              SUBS     r0,r0,r1
                  |L18.20|
000014  b200              SXTH     r0,r0
;;;380    }
000016  4770              BX       lr
;;;381    
                          ENDP


                          AREA ||i._ZN7TAngles11cnt_processEN9TSettings11TAxisRotateEbN10TMemsMount1TE||, CODE, READONLY, ALIGN=2

                  _ZN7TAngles11cnt_processEN9TSettings11TAxisRotateEbN10TMemsMount1TE PROC ; TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
;;;106    
;;;107    void TAngles::cnt_process( TModel::TAxisRotate AxisRotate, bool IsBiasNeed, TMemsMount::T MemsMount )
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;108    {
000004  b09f              SUB      sp,sp,#0x7c
000006  4607              MOV      r7,r0
000008  460c              MOV      r4,r1
00000a  4690              MOV      r8,r2
;;;109      typedef int8_t (TModel::*TGetRawFnct)();
;;;110    
;;;111      struct THandler
;;;112      {
;;;113        TGetRawFnct get_raw_fnct;
;;;114        TGetRawFnct get_bias_fnct;
;;;115        int8_t      Coeff;
;;;116      };
;;;117      
;;;118      THandler Handler[] =
00000c  2250              MOVS     r2,#0x50
00000e  4952              LDR      r1,|L19.344|
000010  a80b              ADD      r0,sp,#0x2c
000012  f7fffffe          BL       __aeabi_memcpy4
;;;119      {
;;;120        { &TModel::get_raw_roll,  &TModel::get_roll_bias_angle,   1, }, //TModel::TAxisRotate::__0_DEG
;;;121        { &TModel::get_raw_pitch, &TModel::get_pitch_bias_angle,  1, }, //TModel::TAxisRotate::__90_DEG
;;;122        { &TModel::get_raw_roll,  &TModel::get_roll_bias_angle,  -1, }, //TModel::TAxisRotate::__180_DEG
;;;123        { &TModel::get_raw_pitch, &TModel::get_pitch_bias_angle, -1, }, //TModel::TAxisRotate::__270_DEG 
;;;124      };  
;;;125      
;;;126    //  TModel::TAxisRotate AxisRotate = static_cast<TModel::TAxisRotate>(Model.get_axis_rotate());
;;;127      int8_t Bias = 0;
000016  f04f0900          MOV      r9,#0
;;;128      if ( IsBiasNeed == true )
00001a  f1b80f01          CMP      r8,#1
00001e  d12f              BNE      |L19.128|
;;;129      {
;;;130        Bias  = ( Model.*Handler[ AxisRotate ].get_bias_fnct )();
000020  eb040084          ADD      r0,r4,r4,LSL #2
000024  a90b              ADD      r1,sp,#0x2c
000026  eb010080          ADD      r0,r1,r0,LSL #2
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  494b              LDR      r1,|L19.348|
00002e  eb010560          ADD      r5,r1,r0,ASR #1
000032  eb040084          ADD      r0,r4,r4,LSL #2
000036  a90b              ADD      r1,sp,#0x2c
000038  eb010080          ADD      r0,r1,r0,LSL #2
00003c  7b00              LDRB     r0,[r0,#0xc]
00003e  f0000001          AND      r0,r0,#1
000042  b928              CBNZ     r0,|L19.80|
000044  eb040084          ADD      r0,r4,r4,LSL #2
000048  eb010080          ADD      r0,r1,r0,LSL #2
00004c  6880              LDR      r0,[r0,#8]
00004e  e008              B        |L19.98|
                  |L19.80|
000050  eb040184          ADD      r1,r4,r4,LSL #2
000054  aa0b              ADD      r2,sp,#0x2c
000056  eb020181          ADD      r1,r2,r1,LSL #2
00005a  6828              LDR      r0,[r5,#0]
00005c  6889              LDR      r1,[r1,#8]
00005e  1846              ADDS     r6,r0,r1
000060  6830              LDR      r0,[r6,#0]
                  |L19.98|
000062  4682              MOV      r10,r0
000064  4628              MOV      r0,r5
000066  47d0              BLX      r10
000068  4681              MOV      r9,r0
;;;131        Bias *= Handler[ AxisRotate ].Coeff;
00006a  eb040084          ADD      r0,r4,r4,LSL #2
00006e  a90b              ADD      r1,sp,#0x2c
000070  eb010080          ADD      r0,r1,r0,LSL #2
000074  7c00              LDRB     r0,[r0,#0x10]
000076  fb00f009          MUL      r0,r0,r9
00007a  fa4ff980          SXTB     r9,r0
;;;132      }
00007e  bf00              NOP      
                  |L19.128|
;;;133      
;;;134      for ( auto item : ExtRange[ MemsMount ][ AxisRotate ] )
000080  4937              LDR      r1,|L19.352|
000082  9822              LDR      r0,[sp,#0x88]
000084  eb012000          ADD      r0,r1,r0,LSL #8
000088  eb001a84          ADD      r10,r0,r4,LSL #6
00008c  4656              MOV      r6,r10
00008e  f10a0040          ADD      r0,r10,#0x40
000092  900a              STR      r0,[sp,#0x28]
000094  e058              B        |L19.328|
                  |L19.150|
000096  e896000f          LDM      r6,{r0-r3}
00009a  ad06              ADD      r5,sp,#0x18
00009c  c50f              STM      r5!,{r0-r3}
;;;135      {
;;;136        int8_t Angle = ( Model.*Handler[ AxisRotate ].get_raw_fnct )();
00009e  eb040084          ADD      r0,r4,r4,LSL #2
0000a2  a90b              ADD      r1,sp,#0x2c
0000a4  eb010080          ADD      r0,r1,r0,LSL #2
0000a8  6840              LDR      r0,[r0,#4]
0000aa  492c              LDR      r1,|L19.348|
0000ac  eb010060          ADD      r0,r1,r0,ASR #1
0000b0  9005              STR      r0,[sp,#0x14]
0000b2  eb040084          ADD      r0,r4,r4,LSL #2
0000b6  a90b              ADD      r1,sp,#0x2c
0000b8  eb010080          ADD      r0,r1,r0,LSL #2
0000bc  7900              LDRB     r0,[r0,#4]
0000be  f0000001          AND      r0,r0,#1
0000c2  b920              CBNZ     r0,|L19.206|
0000c4  eb040084          ADD      r0,r4,r4,LSL #2
0000c8  f8510020          LDR      r0,[r1,r0,LSL #2]
0000cc  e009              B        |L19.226|
                  |L19.206|
0000ce  9805              LDR      r0,[sp,#0x14]
0000d0  6800              LDR      r0,[r0,#0]
0000d2  eb040184          ADD      r1,r4,r4,LSL #2
0000d6  aa0b              ADD      r2,sp,#0x2c
0000d8  f8521021          LDR      r1,[r2,r1,LSL #2]
0000dc  4408              ADD      r0,r0,r1
0000de  9004              STR      r0,[sp,#0x10]
0000e0  6800              LDR      r0,[r0,#0]
                  |L19.226|
0000e2  9003              STR      r0,[sp,#0xc]
0000e4  9903              LDR      r1,[sp,#0xc]
0000e6  9805              LDR      r0,[sp,#0x14]
0000e8  4788              BLX      r1
0000ea  4605              MOV      r5,r0
;;;137        
;;;138        if ( 
0000ec  f9bd1018          LDRSH    r1,[sp,#0x18]
0000f0  42a9              CMP      r1,r5
0000f2  dc28              BGT      |L19.326|
;;;139            Angle >= item.Low
;;;140            &&
;;;141            Angle <= item.High
0000f4  f9bd001a          LDRSH    r0,[sp,#0x1a]
0000f8  42a8              CMP      r0,r5
0000fa  db24              BLT      |L19.326|
;;;142            &&
;;;143            get_z_sign() == item.ZSign
0000fc  4638              MOV      r0,r7
0000fe  f7fffffe          BL       _ZN7TAngles10get_z_signEv ; TAngles::get_z_sign()
000102  f89d101c          LDRB     r1,[sp,#0x1c]
000106  4288              CMP      r0,r1
000108  d11d              BNE      |L19.326|
;;;144           )
;;;145        {
;;;146          Model.set_my_angle( (this->*item.CntFnct)( Angle ) - Bias );
00010a  9809              LDR      r0,[sp,#0x24]
00010c  eb070b60          ADD      r11,r7,r0,ASR #1
000110  a806              ADD      r0,sp,#0x18
000112  7b00              LDRB     r0,[r0,#0xc]
000114  f0000001          AND      r0,r0,#1
000118  b908              CBNZ     r0,|L19.286|
00011a  9808              LDR      r0,[sp,#0x20]
00011c  e005              B        |L19.298|
                  |L19.286|
00011e  f8db0000          LDR      r0,[r11,#0]
000122  9908              LDR      r1,[sp,#0x20]
000124  4408              ADD      r0,r0,r1
000126  9002              STR      r0,[sp,#8]
000128  6800              LDR      r0,[r0,#0]
                  |L19.298|
00012a  4629              MOV      r1,r5
00012c  9001              STR      r0,[sp,#4]
00012e  4658              MOV      r0,r11
000130  9a01              LDR      r2,[sp,#4]
000132  4790              BLX      r2
000134  eba00009          SUB      r0,r0,r9
000138  b200              SXTH     r0,r0
00013a  4601              MOV      r1,r0
00013c  9000              STR      r0,[sp,#0]
00013e  4807              LDR      r0,|L19.348|
000140  f7fffffe          BL       _ZN6TModel12set_my_angleEs ; TModel::set_my_angle(short)
;;;147    
;;;148          break;
000144  e003              B        |L19.334|
                  |L19.326|
;;;149        }
;;;150      }
000146  3610              ADDS     r6,r6,#0x10
                  |L19.328|
000148  980a              LDR      r0,[sp,#0x28]
00014a  4286              CMP      r6,r0
00014c  d1a3              BNE      |L19.150|
                  |L19.334|
00014e  bf00              NOP                            ;148
;;;151    }
000150  b023              ADD      sp,sp,#0x8c
000152  e8bd8ff0          POP      {r4-r11,pc}
;;;152    
                          ENDP

000156  0000              DCW      0x0000
                  |L19.344|
                          DCD      ||.constdata||+0x220
                  |L19.348|
                          DCD      Model
                  |L19.352|
                          DCD      ExtRange

                          AREA ||i._ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb||, CODE, READONLY, ALIGN=2

                  _ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb PROC ; TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
;;;83     
;;;84     void TAngles::cnt_my_angle( TModel::TDevType Dev, TModel::TAxisRotate AxisRotate, bool IsBiasNeed )
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;85     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;86       typedef void (TAngles::*TFnct)( TModel::TAxisRotate, bool );
;;;87       
;;;88       TFnct Fnct[] =
00000c  4b11              LDR      r3,|L20.84|
00000e  cb0f              LDM      r3,{r0-r3}
000010  e88d000f          STM      sp,{r0-r3}
;;;89       {
;;;90         &TAngles::base,
;;;91         &TAngles::sens,    
;;;92       };
;;;93       
;;;94       (this->*Fnct[ Dev ])( AxisRotate, IsBiasNeed );
000014  4668              MOV      r0,sp
000016  eb0000c4          ADD      r0,r0,r4,LSL #3
00001a  6840              LDR      r0,[r0,#4]
00001c  eb050860          ADD      r8,r5,r0,ASR #1
000020  4668              MOV      r0,sp
000022  eb0000c4          ADD      r0,r0,r4,LSL #3
000026  7900              LDRB     r0,[r0,#4]
000028  f0000001          AND      r0,r0,#1
00002c  b910              CBNZ     r0,|L20.52|
00002e  f85d0034          LDR      r0,[sp,r4,LSL #3]
000032  e007              B        |L20.68|
                  |L20.52|
000034  f85d1034          LDR      r1,[sp,r4,LSL #3]
000038  f8d80000          LDR      r0,[r8,#0]
00003c  eb000901          ADD      r9,r0,r1
000040  f8d90000          LDR      r0,[r9,#0]
                  |L20.68|
000044  4682              MOV      r10,r0
000046  463a              MOV      r2,r7
000048  4631              MOV      r1,r6
00004a  4640              MOV      r0,r8
00004c  47d0              BLX      r10
;;;95     }
00004e  e8bd87ff          POP      {r0-r10,pc}
;;;96     
                          ENDP

000052  0000              DCW      0x0000
                  |L20.84|
                          DCD      ||.constdata||+0x200

                          AREA ||i._ZN7TAngles14cnt_open_angleEv||, CODE, READONLY, ALIGN=2

                  _ZN7TAngles14cnt_open_angleEv PROC ; TAngles::cnt_open_angle()
;;;152    
;;;153    void TAngles::cnt_open_angle()
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;154    {
000004  4605              MOV      r5,r0
;;;155      //определяем тип расположения(движения): в гору или с горы
;;;156      typedef void ( TAngles::*TPlaceFnct )( int16_t, int16_t );
;;;157      TPlaceFnct place_fnct[] =
000006  4b1a              LDR      r3,|L21.112|
000008  cb0f              LDM      r3,{r0-r3}
00000a  e88d000f          STM      sp,{r0-r3}
;;;158      {
;;;159        &TAngles::place_up,
;;;160        &TAngles::place_down,
;;;161      };
;;;162    
;;;163      int16_t Base = Model.get_my_angle();
00000e  4819              LDR      r0,|L21.116|
000010  f7fffffe          BL       _ZN6TModel12get_my_angleEv ; TModel::get_my_angle()
000014  4680              MOV      r8,r0
;;;164      int16_t Sens = Model.get_sens_angle();
000016  4817              LDR      r0,|L21.116|
000018  f7fffffe          BL       _ZN6TModel14get_sens_angleEv ; TModel::get_sens_angle()
00001c  4681              MOV      r9,r0
;;;165      
;;;166      Base = BaseFilter.process( Base );
00001e  4641              MOV      r1,r8
000020  4815              LDR      r0,|L21.120|
000022  f7fffffe          BL       _ZN13TMedianFilter7processEs ; TMedianFilter::process(short)
000026  4680              MOV      r8,r0
;;;167      Sens = SensFilter.process( Sens );  
000028  4649              MOV      r1,r9
00002a  4814              LDR      r0,|L21.124|
00002c  f7fffffe          BL       _ZN13TMedianFilter7processEs ; TMedianFilter::process(short)
000030  4681              MOV      r9,r0
;;;168    
;;;169      TPlaceType::T PlaceType = ( Base >= 0 ) ? TPlaceType::__UP
000032  ea4f74d8          LSR      r4,r8,#31
;;;170                                              : TPlaceType::__DOWN;
;;;171      ( this->*place_fnct[ PlaceType ] )( Base, Sens );
000036  4668              MOV      r0,sp
000038  eb0000c4          ADD      r0,r0,r4,LSL #3
00003c  6840              LDR      r0,[r0,#4]
00003e  eb050660          ADD      r6,r5,r0,ASR #1
000042  4668              MOV      r0,sp
000044  eb0000c4          ADD      r0,r0,r4,LSL #3
000048  7900              LDRB     r0,[r0,#4]
00004a  f0000001          AND      r0,r0,#1
00004e  b910              CBNZ     r0,|L21.86|
000050  f85d0034          LDR      r0,[sp,r4,LSL #3]
000054  e004              B        |L21.96|
                  |L21.86|
000056  f85d1034          LDR      r1,[sp,r4,LSL #3]
00005a  6830              LDR      r0,[r6,#0]
00005c  1847              ADDS     r7,r0,r1
00005e  6838              LDR      r0,[r7,#0]
                  |L21.96|
000060  4682              MOV      r10,r0
000062  464a              MOV      r2,r9
000064  4641              MOV      r1,r8
000066  4630              MOV      r0,r6
000068  47d0              BLX      r10
;;;172    }
00006a  e8bd87ff          POP      {r0-r10,pc}
;;;173    
                          ENDP

00006e  0000              DCW      0x0000
                  |L21.112|
                          DCD      ||.constdata||+0x210
                  |L21.116|
                          DCD      Model
                  |L21.120|
                          DCD      BaseFilter
                  |L21.124|
                          DCD      SensFilter

                          AREA ||i._ZN7TAngles15cast_open_angleEPs||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles15cast_open_angleEPs PROC ; TAngles::cast_open_angle(short*)
;;;280    
;;;281    void TAngles::cast_open_angle( int16_t *Angle )
000000  f9b12000          LDRSH    r2,[r1,#0]
;;;282    {
;;;283      if ( *Angle > CONSTS::MAX_DEV_ANGLE )
000004  f5b27f82          CMP      r2,#0x104
000008  dd03              BLE      |L22.18|
;;;284      {
;;;285        *Angle = CONSTS::MAX_DEV_ANGLE;
00000a  f44f7282          MOV      r2,#0x104
00000e  800a              STRH     r2,[r1,#0]
                  |L22.16|
;;;286        
;;;287        return;
;;;288      }
;;;289      if ( *Angle < CONSTS::MIN_DEV_ANGLE )
;;;290      {
;;;291        *Angle = CONSTS::MIN_DEV_ANGLE;
;;;292      }
;;;293    }
000010  4770              BX       lr
                  |L22.18|
000012  f9b12000          LDRSH    r2,[r1,#0]            ;289
000016  f1120f50          CMN      r2,#0x50              ;289
00001a  da02              BGE      |L22.34|
00001c  f06f024f          MVN      r2,#0x4f              ;291
000020  800a              STRH     r2,[r1,#0]            ;291
                  |L22.34|
000022  bf00              NOP      
000024  e7f4              B        |L22.16|
;;;294    
                          ENDP


                          AREA ||i._ZN7TAngles4baseEN9TSettings11TAxisRotateEb||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles4baseEN9TSettings11TAxisRotateEb PROC ; TAngles::base(TSettings::TAxisRotate, bool)
;;;96     
;;;97     void TAngles::base( TModel::TAxisRotate AxisRotate, bool IsBiasNeed  )
000000  b570              PUSH     {r4-r6,lr}
;;;98     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;99       cnt_process( AxisRotate, IsBiasNeed, TMemsMount::__DOWN );
000008  2301              MOVS     r3,#1
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN7TAngles11cnt_processEN9TSettings11TAxisRotateEbN10TMemsMount1TE ; TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
;;;100    }
000014  bd70              POP      {r4-r6,pc}
;;;101    
                          ENDP


                          AREA ||i._ZN7TAngles4sensEN9TSettings11TAxisRotateEb||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles4sensEN9TSettings11TAxisRotateEb PROC ; TAngles::sens(TSettings::TAxisRotate, bool)
;;;101    
;;;102    void TAngles::sens( TModel::TAxisRotate AxisRotate, bool IsBiasNeed  )
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;104      cnt_process( AxisRotate, IsBiasNeed, TMemsMount::__UP );
000008  2300              MOVS     r3,#0
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN7TAngles11cnt_processEN9TSettings11TAxisRotateEbN10TMemsMount1TE ; TAngles::cnt_process(TSettings::TAxisRotate, bool, TMemsMount::T)
;;;105    }
000014  bd70              POP      {r4-r6,pc}
;;;106    
                          ENDP


                          AREA ||i._ZN7TAngles8cnt_dampERfsf||, CODE, READONLY, ALIGN=1

                  _ZN7TAngles8cnt_dampERfsf PROC ; TAngles::cnt_damp(float&, short, float)
;;;275    
;;;276    void TAngles::cnt_damp( float &prev_angle, int16_t cur_angle, float coeff )
000000  ed911a00          VLDR     s2,[r1,#0]
;;;277    {
;;;278      prev_angle = prev_angle + ( static_cast<float>(cur_angle) - prev_angle ) / coeff;
000004  ee002a90          VMOV     s1,r2
000008  eef80ae0          VCVT.F32.S32 s1,s1
00000c  ee700ac1          VSUB.F32 s1,s1,s2
000010  ee801a80          VDIV.F32 s2,s1,s0
000014  edd10a00          VLDR     s1,[r1,#0]
000018  ee710a20          VADD.F32 s1,s2,s1
00001c  edc10a00          VSTR     s1,[r1,#0]
;;;279    }
000020  4770              BX       lr
;;;280    
                          ENDP


                          AREA ||i._ZN7TAngles8place_upEss||, CODE, READONLY, ALIGN=2

                  _ZN7TAngles8place_upEss PROC ; TAngles::place_up(short, short)
;;;173    
;;;174    void TAngles::place_up( int16_t Base, int16_t Sens )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;175    {
000004  b093              SUB      sp,sp,#0x4c
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;176      if (
00000c  2e3c              CMP      r6,#0x3c
00000e  dd06              BLE      |L26.30|
;;;177          Base <= BASE_THR.Up.Low
;;;178          ||
;;;179          (
;;;180           Base < BASE_THR.Up.High
000010  2e46              CMP      r6,#0x46
000012  da60              BGE      |L26.214|
;;;181           &&
;;;182           Model.get_base_pos_err() == TModel::TPosErr::_POS_OK
000014  4836              LDR      r0,|L26.240|
000016  f7fffffe          BL       _ZN6TModel16get_base_pos_errEv ; TModel::get_base_pos_err()
00001a  2801              CMP      r0,#1
00001c  d15b              BNE      |L26.214|
                  |L26.30|
;;;183          )
;;;184         )
;;;185      {
;;;186        //база в первом квадранте
;;;187        Model.set_base_pos_err( TModel::TPosErr::_POS_OK );
00001e  2101              MOVS     r1,#1
000020  4833              LDR      r0,|L26.240|
000022  f7fffffe          BL       _ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE ; TModel::set_base_pos_err(TSettings::TPosErr)
;;;188            
;;;189        TOpenDetect OpenDetect[] =
000026  2230              MOVS     r2,#0x30
000028  4932              LDR      r1,|L26.244|
00002a  a807              ADD      r0,sp,#0x1c
00002c  f7fffffe          BL       __aeabi_memcpy4
;;;190        {
;;;191          {   0,  90, &TAngles::q1_pos_cnt }, //__Q_ONE  
;;;192          {  91, 180, &TAngles::q2_pos_cnt }, //__Q_TWO  
;;;193          { 181, 270, &TAngles::q3_pos_cnt }, //__Q_THREE
;;;194          { -90,  -1, &TAngles::q4_pos_cnt }, //__Q_FOUR 
;;;195        };
;;;196        
;;;197        for ( auto item : OpenDetect )
000030  f10d081c          ADD      r8,sp,#0x1c
000034  4644              MOV      r4,r8
000036  f1080030          ADD      r0,r8,#0x30
00003a  9006              STR      r0,[sp,#0x18]
00003c  e047              B        |L26.206|
                  |L26.62|
00003e  e8940007          LDM      r4,{r0-r2}
000042  ab03              ADD      r3,sp,#0xc
000044  c307              STM      r3!,{r0-r2}
;;;198        {
;;;199          if (                  //определение квадранта датчика
000046  f9bd000c          LDRSH    r0,[sp,#0xc]
00004a  42b8              CMP      r0,r7
00004c  dc3e              BGT      |L26.204|
;;;200              Sens >= item.Low
;;;201              &&
;;;202              Sens <= item.High
00004e  f9bd000e          LDRSH    r0,[sp,#0xe]
000052  42b8              CMP      r0,r7
000054  db3a              BLT      |L26.204|
;;;203             )
;;;204          {
;;;205            int16_t CurOpenAngle = ( this->*item.CntFnct )( Base, Sens );
000056  9805              LDR      r0,[sp,#0x14]
000058  eb050960          ADD      r9,r5,r0,ASR #1
00005c  f89d0014          LDRB     r0,[sp,#0x14]
000060  f0000001          AND      r0,r0,#1
000064  b908              CBNZ     r0,|L26.106|
000066  9804              LDR      r0,[sp,#0x10]
000068  e006              B        |L26.120|
                  |L26.106|
00006a  f8d90000          LDR      r0,[r9,#0]
00006e  9904              LDR      r1,[sp,#0x10]
000070  eb000a01          ADD      r10,r0,r1
000074  f8da0000          LDR      r0,[r10,#0]
                  |L26.120|
000078  4683              MOV      r11,r0
00007a  463a              MOV      r2,r7
00007c  4631              MOV      r1,r6
00007e  4648              MOV      r0,r9
000080  47d8              BLX      r11
000082  9002              STR      r0,[sp,#8]
;;;206            cast_open_angle( &CurOpenAngle );                              //приведение угла открытия к формату: 0..260, -1..-80
000084  a902              ADD      r1,sp,#8
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       _ZN7TAngles15cast_open_angleEPs ; TAngles::cast_open_angle(short*)
;;;207            CurOpenAngle -= Model.get_bias();                              //с учетом смещения из настроек
00008c  4818              LDR      r0,|L26.240|
00008e  f7fffffe          BL       _ZN6TModel8get_biasEv ; TModel::get_bias()
000092  f8bd1008          LDRH     r1,[sp,#8]
000096  1a08              SUBS     r0,r1,r0
000098  b200              SXTH     r0,r0
00009a  9002              STR      r0,[sp,#8]
;;;208    
;;;209            float PrevOpenAngle = Model.get_open_angle();
00009c  4814              LDR      r0,|L26.240|
00009e  f7fffffe          BL       _ZN6TModel14get_open_angleEv ; TModel::get_open_angle()
0000a2  ed8d0a01          VSTR     s0,[sp,#4]
;;;210    
;;;211            cnt_damp( PrevOpenAngle, CurOpenAngle, DampCoeff );   //демпфирование угла
0000a6  7828              LDRB     r0,[r5,#0]
0000a8  ee000a90          VMOV     s1,r0
0000ac  eef80a60          VCVT.F32.U32 s1,s1
0000b0  eeb00a60          VMOV.F32 s0,s1
0000b4  f9bd2008          LDRSH    r2,[sp,#8]
0000b8  a901              ADD      r1,sp,#4
0000ba  4628              MOV      r0,r5
0000bc  f7fffffe          BL       _ZN7TAngles8cnt_dampERfsf ; TAngles::cnt_damp(float&, short, float)
;;;212            Model.set_open_angle( PrevOpenAngle );
0000c0  ed9d0a01          VLDR     s0,[sp,#4]
0000c4  480a              LDR      r0,|L26.240|
0000c6  f7fffffe          BL       _ZN6TModel14set_open_angleEf ; TModel::set_open_angle(float)
;;;213          }
0000ca  bf00              NOP      
                  |L26.204|
0000cc  340c              ADDS     r4,r4,#0xc
                  |L26.206|
0000ce  9806              LDR      r0,[sp,#0x18]
0000d0  4284              CMP      r4,r0
0000d2  d1b4              BNE      |L26.62|
;;;214        }
;;;215      }
0000d4  e008              B        |L26.232|
                  |L26.214|
;;;216      else
;;;217      {
;;;218        //положение базы недопустимо
;;;219        Model.set_base_pos_err( TModel::TPosErr::_POS_ERR );
0000d6  2100              MOVS     r1,#0
0000d8  4805              LDR      r0,|L26.240|
0000da  f7fffffe          BL       _ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE ; TModel::set_base_pos_err(TSettings::TPosErr)
;;;220        Model.set_open_angle( 0 );
0000de  ed9f0a06          VLDR     s0,|L26.248|
0000e2  4803              LDR      r0,|L26.240|
0000e4  f7fffffe          BL       _ZN6TModel14set_open_angleEf ; TModel::set_open_angle(float)
                  |L26.232|
;;;221        //угол открытия остается в предыдущем состоянии
;;;222      }
;;;223    }
0000e8  b013              ADD      sp,sp,#0x4c
0000ea  e8bd8ff0          POP      {r4-r11,pc}
;;;224    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L26.240|
                          DCD      Model
                  |L26.244|
                          DCD      ||.constdata||+0x270
                  |L26.248|
0000f8  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN7TAnglesC1Ev||, CODE, READONLY, ALIGN=1

                  _ZN7TAnglesC2Ev                  ; Alternate entry point ; TAngles::TAngles__sub_object()
                  _ZN7TAnglesC1Ev PROC ; TAngles::TAngles()
;;;68     
;;;69     TAngles::TAngles()
;;;70     :
;;;71     DampCoeff( CONSTS::DAMP_COEFF ),
;;;72     PrevBaseAngle( 0 )
;;;73     {
;;;74     
;;;75     }
;;;76     
000000  2102              MOVS     r1,#2
000002  7001              STRB     r1,[r0,#0]
000004  2100              MOVS     r1,#0
000006  8041              STRH     r1,[r0,#2]
000008  4770              BX       lr
                          ENDP


                          AREA ||i._ZN7TAnglesD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN7TAnglesD2Ev                  ; Alternate entry point ; TAngles::~TAngles__sub_object()
                  _ZN7TAnglesD1Ev PROC ; TAngles::~TAngles()
;;;76     
;;;77     TAngles::~TAngles()
;;;78     {
;;;79     
;;;80     }
;;;81     
000000  4770              BX       lr
                          ENDP


                          AREA ||i.__sti___14_angles_cnt_cpp_002624b5||, CODE, READONLY, ALIGN=2

                  __sti___14_angles_cnt_cpp_002624b5 PROC
000000  b510              PUSH     {r4,lr}
000002  f06f014f          MVN      r1,#0x4f
000006  480d              LDR      r0,|L29.60|
000008  f7fffffe          BL       _ZN13TMedianFilterC1Es ; TMedianFilter::TMedianFilter(short)
00000c  4604              MOV      r4,r0
00000e  4a0c              LDR      r2,|L29.64|
000010  490c              LDR      r1,|L29.68|
000012  f7fffffe          BL       __aeabi_atexit
000016  f06f014f          MVN      r1,#0x4f
00001a  480b              LDR      r0,|L29.72|
00001c  f7fffffe          BL       _ZN13TMedianFilterC1Es ; TMedianFilter::TMedianFilter(short)
000020  4604              MOV      r4,r0
000022  4a07              LDR      r2,|L29.64|
000024  4907              LDR      r1,|L29.68|
000026  f7fffffe          BL       __aeabi_atexit
00002a  4808              LDR      r0,|L29.76|
00002c  f7fffffe          BL       _ZN7TAnglesC1Ev ; TAngles::TAngles()
000030  4604              MOV      r4,r0
000032  4a03              LDR      r2,|L29.64|
000034  4906              LDR      r1,|L29.80|
000036  f7fffffe          BL       __aeabi_atexit
00003a  bd10              POP      {r4,pc}
                          ENDP

                  |L29.60|
                          DCD      BaseFilter
                  |L29.64|
                          DCD      __dso_handle
                  |L29.68|
                          DCD      _ZN13TMedianFilterD1Ev ; TMedianFilter::~TMedianFilter()
                  |L29.72|
                          DCD      SensFilter
                  |L29.76|
                          DCD      Angles
                  |L29.80|
                          DCD      _ZN7TAnglesD1Ev ; TAngles::~TAngles()

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN7TAnglesC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAnglesC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN7TAnglesD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAnglesD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN7TAngles14cnt_open_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles14cnt_open_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN7TAngles10q1_pos_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q1_pos_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZN7TAngles10q2_pos_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q2_pos_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN7TAngles10q3_pos_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q3_pos_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN7TAngles10q4_pos_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q4_pos_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN7TAngles10q1_neg_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q1_neg_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._ZN7TAngles10q2_neg_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q2_neg_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN7TAngles10q3_neg_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q3_neg_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN7TAngles10q4_neg_cntEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q4_neg_cntEa||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN7TAngles10q1_pos_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q1_pos_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN7TAngles10q2_pos_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q2_pos_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN7TAngles10q3_pos_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q3_pos_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN7TAngles10q4_pos_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q4_pos_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN7TAngles10q1_neg_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q1_neg_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN7TAngles10q2_neg_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q2_neg_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN7TAngles10q3_neg_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q3_neg_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZN7TAngles10q4_neg_cntEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10q4_neg_cntEss||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZN7TAngles10get_z_signEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10get_z_signEv||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZN7TAngles11cnt_processEN9TSettings11TAxisRotateEbN10TMemsMount1TE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles11cnt_processEN9TSettings11TAxisRotateEbN10TMemsMount1TE||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i._ZN7TAngles4baseEN9TSettings11TAxisRotateEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles4baseEN9TSettings11TAxisRotateEb||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i._ZN7TAngles4sensEN9TSettings11TAxisRotateEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles4sensEN9TSettings11TAxisRotateEb||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i._ZN7TAngles8cnt_dampERfsf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles8cnt_dampERfsf||
                          DCD      0x00000001

                          AREA ||area_number.55||, LINKORDER=||i._ZN7TAngles15cast_open_angleEPs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles15cast_open_angleEPs||
                          DCD      0x00000001

                          AREA ||area_number.56||, LINKORDER=||i._ZN7TAngles8place_upEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles8place_upEss||
                          DCD      0x00000001

                          AREA ||area_number.57||, LINKORDER=||i._ZN7TAngles10place_downEss||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7TAngles10place_downEss||
                          DCD      0x00000001

                          AREA ||area_number.58||, LINKORDER=||i.__sti___14_angles_cnt_cpp_002624b5||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___14_angles_cnt_cpp_002624b5||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BaseFilter
                          %        80
                  SensFilter
                          %        80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ExtRange
000000  0000005a          DCW      0x0000,0x005a
000004  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_pos_cntEa ; TAngles::q1_pos_cnt(signed char)
                          DCD      0x00000000
000010  0000005a          DCW      0x0000,0x005a
000014  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_pos_cntEa ; TAngles::q2_pos_cnt(signed char)
                          DCD      0x00000000
000020  ffa60000          DCW      0xffa6,0x0000
000024  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_pos_cntEa ; TAngles::q3_pos_cnt(signed char)
                          DCD      0x00000000
000030  ffa60000          DCW      0xffa6,0x0000
000034  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_pos_cntEa ; TAngles::q4_pos_cnt(signed char)
                          DCD      0x00000000
000040  ffa60000          DCW      0xffa6,0x0000
000044  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_neg_cntEa ; TAngles::q1_neg_cnt(signed char)
                          DCD      0x00000000
000050  ffa60000          DCW      0xffa6,0x0000
000054  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_neg_cntEa ; TAngles::q2_neg_cnt(signed char)
                          DCD      0x00000000
000060  0000005a          DCW      0x0000,0x005a
000064  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_neg_cntEa ; TAngles::q3_neg_cnt(signed char)
                          DCD      0x00000000
000070  0000005a          DCW      0x0000,0x005a
000074  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_neg_cntEa ; TAngles::q4_neg_cnt(signed char)
                          DCD      0x00000000
000080  ffa60000          DCW      0xffa6,0x0000
000084  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_neg_cntEa ; TAngles::q1_neg_cnt(signed char)
                          DCD      0x00000000
000090  ffa60000          DCW      0xffa6,0x0000
000094  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_neg_cntEa ; TAngles::q2_neg_cnt(signed char)
                          DCD      0x00000000
0000a0  0000005a          DCW      0x0000,0x005a
0000a4  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_neg_cntEa ; TAngles::q3_neg_cnt(signed char)
                          DCD      0x00000000
0000b0  0000005a          DCW      0x0000,0x005a
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_neg_cntEa ; TAngles::q4_neg_cnt(signed char)
                          DCD      0x00000000
0000c0  0000005a          DCW      0x0000,0x005a
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_pos_cntEa ; TAngles::q1_pos_cnt(signed char)
                          DCD      0x00000000
0000d0  0000005a          DCW      0x0000,0x005a
0000d4  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_pos_cntEa ; TAngles::q2_pos_cnt(signed char)
                          DCD      0x00000000
0000e0  ffa60000          DCW      0xffa6,0x0000
0000e4  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_pos_cntEa ; TAngles::q3_pos_cnt(signed char)
                          DCD      0x00000000
0000f0  ffa60000          DCW      0xffa6,0x0000
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_pos_cntEa ; TAngles::q4_pos_cnt(signed char)
                          DCD      0x00000000
000100  0000005a          DCW      0x0000,0x005a
000104  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_pos_cntEa ; TAngles::q1_pos_cnt(signed char)
                          DCD      0x00000000
000110  0000005a          DCW      0x0000,0x005a
000114  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_pos_cntEa ; TAngles::q2_pos_cnt(signed char)
                          DCD      0x00000000
000120  ffa60000          DCW      0xffa6,0x0000
000124  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_pos_cntEa ; TAngles::q3_pos_cnt(signed char)
                          DCD      0x00000000
000130  ffa60000          DCW      0xffa6,0x0000
000134  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_pos_cntEa ; TAngles::q4_pos_cnt(signed char)
                          DCD      0x00000000
000140  0000005a          DCW      0x0000,0x005a
000144  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_pos_cntEa ; TAngles::q1_pos_cnt(signed char)
                          DCD      0x00000000
000150  0000005a          DCW      0x0000,0x005a
000154  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_pos_cntEa ; TAngles::q2_pos_cnt(signed char)
                          DCD      0x00000000
000160  ffa60000          DCW      0xffa6,0x0000
000164  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_pos_cntEa ; TAngles::q3_pos_cnt(signed char)
                          DCD      0x00000000
000170  ffa60000          DCW      0xffa6,0x0000
000174  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_pos_cntEa ; TAngles::q4_pos_cnt(signed char)
                          DCD      0x00000000
000180  ffa60000          DCW      0xffa6,0x0000
000184  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_neg_cntEa ; TAngles::q1_neg_cnt(signed char)
                          DCD      0x00000000
000190  ffa60000          DCW      0xffa6,0x0000
000194  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_neg_cntEa ; TAngles::q2_neg_cnt(signed char)
                          DCD      0x00000000
0001a0  0000005a          DCW      0x0000,0x005a
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_neg_cntEa ; TAngles::q3_neg_cnt(signed char)
                          DCD      0x00000000
0001b0  0000005a          DCW      0x0000,0x005a
0001b4  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_neg_cntEa ; TAngles::q4_neg_cnt(signed char)
                          DCD      0x00000000
0001c0  ffa60000          DCW      0xffa6,0x0000
0001c4  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q1_neg_cntEa ; TAngles::q1_neg_cnt(signed char)
                          DCD      0x00000000
0001d0  ffa60000          DCW      0xffa6,0x0000
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q2_neg_cntEa ; TAngles::q2_neg_cnt(signed char)
                          DCD      0x00000000
0001e0  0000005a          DCW      0x0000,0x005a
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q3_neg_cntEa ; TAngles::q3_neg_cnt(signed char)
                          DCD      0x00000000
0001f0  0000005a          DCW      0x0000,0x005a
0001f4  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN7TAngles10q4_neg_cntEa ; TAngles::q4_neg_cnt(signed char)
                          DCD      0x00000000
                          DCD      _ZN7TAngles4baseEN9TSettings11TAxisRotateEb ; TAngles::base(TSettings::TAxisRotate, bool)
                          DCD      0x00000000
                          DCD      _ZN7TAngles4sensEN9TSettings11TAxisRotateEb ; TAngles::sens(TSettings::TAxisRotate, bool)
                          DCD      0x00000000
                          DCD      _ZN7TAngles8place_upEss ; TAngles::place_up(short, short)
                          DCD      0x00000000
                          DCD      _ZN7TAngles10place_downEss ; TAngles::place_down(short, short)
                          DCD      0x00000000
                          DCD      _ZN6TModel12get_raw_rollEv ; TModel::get_raw_roll()
                          DCD      0x00000000
                          DCD      _ZN6TModel19get_roll_bias_angleEv ; TModel::get_roll_bias_angle()
                          DCD      0x00000000
000230  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN6TModel13get_raw_pitchEv ; TModel::get_raw_pitch()
                          DCD      0x00000000
                          DCD      _ZN6TModel20get_pitch_bias_angleEv ; TModel::get_pitch_bias_angle()
                          DCD      0x00000000
000244  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN6TModel12get_raw_rollEv ; TModel::get_raw_roll()
                          DCD      0x00000000
                          DCD      _ZN6TModel19get_roll_bias_angleEv ; TModel::get_roll_bias_angle()
                          DCD      0x00000000
000258  ff000000          DCB      0xff,0x00,0x00,0x00
                          DCD      _ZN6TModel13get_raw_pitchEv ; TModel::get_raw_pitch()
                          DCD      0x00000000
                          DCD      _ZN6TModel20get_pitch_bias_angleEv ; TModel::get_pitch_bias_angle()
                          DCD      0x00000000
00026c  ff000000          DCB      0xff,0x00,0x00,0x00
000270  0000005a          DCW      0x0000,0x005a
                          DCD      _ZN7TAngles10q1_pos_cntEss ; TAngles::q1_pos_cnt(short, short)
                          DCD      0x00000000
00027c  005b00b4          DCW      0x005b,0x00b4
                          DCD      _ZN7TAngles10q2_pos_cntEss ; TAngles::q2_pos_cnt(short, short)
                          DCD      0x00000000
000288  00b5010e          DCW      0x00b5,0x010e
                          DCD      _ZN7TAngles10q3_pos_cntEss ; TAngles::q3_pos_cnt(short, short)
                          DCD      0x00000000
000294  ffa6ffff          DCW      0xffa6,0xffff
                          DCD      _ZN7TAngles10q4_pos_cntEss ; TAngles::q4_pos_cnt(short, short)
                          DCD      0x00000000
0002a0  0000005a          DCW      0x0000,0x005a
                          DCD      _ZN7TAngles10q1_neg_cntEss ; TAngles::q1_neg_cnt(short, short)
                          DCD      0x00000000
0002ac  005b00b4          DCW      0x005b,0x00b4
                          DCD      _ZN7TAngles10q2_neg_cntEss ; TAngles::q2_neg_cnt(short, short)
                          DCD      0x00000000
0002b8  00b5010e          DCW      0x00b5,0x010e
                          DCD      _ZN7TAngles10q3_neg_cntEss ; TAngles::q3_neg_cnt(short, short)
                          DCD      0x00000000
0002c4  ffa6ffff          DCW      0xffa6,0xffff
                          DCD      _ZN7TAngles10q4_neg_cntEss ; TAngles::q4_neg_cnt(short, short)
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=1

                  Angles
                          DCDU     0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___14_angles_cnt_cpp_002624b5
