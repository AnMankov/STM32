; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\dev_determ.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\dev_determ.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\dev_determ.crf Source\Main\src\dev_determ.cpp]
                          THUMB

                          AREA ||i.TIM7_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM7_IRQHandler PROC
;;;151    
;;;152    extern "C" void TIM7_IRQHandler(void)
000000  bf00              NOP      
000002  4807              LDR      r0,|L1.32|
000004  6900              LDR      r0,[r0,#0x10]
000006  f0000001          AND      r0,r0,#1
;;;153    {
;;;154      if ( LL_TIM_IsActiveFlag_UPDATE( TIM7 ) )
00000a  b140              CBZ      r0,|L1.30|
;;;155      {
;;;156        TDevDeterm::TmrTrig = true;
00000c  2001              MOVS     r0,#1
00000e  4905              LDR      r1,|L1.36|
000010  7008              STRB     r0,[r1,#0]
;;;157    
;;;158        LL_TIM_ClearFlag_UPDATE( TIM7 );                                     // Clear the update interrupt flag (UIF)
000012  bf00              NOP      
000014  1ec0              SUBS     r0,r0,#3
000016  4902              LDR      r1,|L1.32|
000018  6108              STR      r0,[r1,#0x10]
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L1.30|
;;;159      }
;;;160    }
00001e  4770              BX       lr
                          ENDP

                  |L1.32|
                          DCD      0x40001400
                  |L1.36|
                          DCD      _ZN10TDevDeterm7TmrTrigE ; TDevDeterm::TmrTrig

                          AREA ||i._ZN10TDevDeterm6is_devEv||, CODE, READONLY, ALIGN=2

                  _ZN10TDevDeterm6is_devEv PROC ; TDevDeterm::is_dev()
;;;82     
;;;83     TModel::TDevType TDevDeterm::is_dev()
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;84     {
000004  4601              MOV      r1,r0
;;;85       //разрешение прерывания по переполнению таймера
;;;86       LL_TIM_EnableIT_UPDATE( Tmr );                                  // Enable update interrupt
000006  6888              LDR      r0,[r1,#8]
000008  68c3              LDR      r3,[r0,#0xc]
00000a  f0430301          ORR      r3,r3,#1
00000e  60c3              STR      r3,[r0,#0xc]
000010  bf00              NOP      
;;;87       LL_TIM_EnableCounter( Tmr );                                    // Enable timer counter
000012  6888              LDR      r0,[r1,#8]
000014  6803              LDR      r3,[r0,#0]
000016  f0430301          ORR      r3,r3,#1
00001a  6003              STR      r3,[r0,#0]
00001c  bf00              NOP      
;;;88     
;;;89       constexpr uint8_t DETECT_TIME = 200U; //время на определение типа устройства [мс]
00001e  26c8              MOVS     r6,#0xc8
;;;90     
;;;91       struct TDev
;;;92       {
;;;93         uint8_t  Ctr;
;;;94         TModel::TDevType DevType;
;;;95         TPull Pull;
;;;96       };
;;;97     
;;;98       TDev Base = { 0U, TModel::_BASE, TPull::_UP   };
000020  4832              LDR      r0,|L2.236|
000022  6800              LDR      r0,[r0,#0]  ; <Data1>
000024  9003              STR      r0,[sp,#0xc]
;;;99       TDev HC   = { 0U, TModel::_HC,   TPull::_DOWN };
000026  4831              LDR      r0,|L2.236|
000028  1d00              ADDS     r0,r0,#4
00002a  6800              LDR      r0,[r0,#0]  ; <Data2>
00002c  9002              STR      r0,[sp,#8]
;;;100    
;;;101      TDev *Dev[] =
00002e  a803              ADD      r0,sp,#0xc
000030  9000              STR      r0,[sp,#0]
000032  a802              ADD      r0,sp,#8
000034  9001              STR      r0,[sp,#4]
;;;102      {
;;;103        &Base, &HC
;;;104      };
;;;105    
;;;106      uint8_t TmrCtr  = 0U;
000036  2200              MOVS     r2,#0
;;;107    
;;;108      constexpr uint8_t PERIOD  = ( 1000U + ( F_TIMER >> 1U ) ) / F_TIMER;     //[мс]
000038  270a              MOVS     r7,#0xa
;;;109      constexpr uint8_t MAX_CTR = ( DETECT_TIME + ( PERIOD >> 1U ) ) / PERIOD; 
00003a  f04f0c14          MOV      r12,#0x14
;;;110    
;;;111      while ( TmrCtr != MAX_CTR )
00003e  e02c              B        |L2.154|
                  |L2.64|
;;;112      {
;;;113        if ( TDevDeterm::TmrTrig == true )
000040  482b              LDR      r0,|L2.240|
000042  7800              LDRB     r0,[r0,#0]  ; _ZN10TDevDeterm7TmrTrigE
000044  2801              CMP      r0,#1
000046  d128              BNE      |L2.154|
;;;114        {
;;;115          TDevDeterm::TmrTrig = false;
000048  2000              MOVS     r0,#0
00004a  4b29              LDR      r3,|L2.240|
00004c  7018              STRB     r0,[r3,#0]
;;;116          ++TmrCtr;
00004e  1c50              ADDS     r0,r2,#1
000050  b2c2              UXTB     r2,r0
;;;117    
;;;118          //БАЗА    => вывод подтянут вверх      
;;;119          //НЕ БАЗА => вывод подтянут вниз
;;;120    //      if ( LL_GPIO_IsInputPinSet( Pin.Gpio, Pin.Nbr ) == 1U )
;;;121    //      {
;;;122    //        ++Base.Ctr;
;;;123    //      }
;;;124    //      else
;;;125    //      {
;;;126    //        ++HC.Ctr;
;;;127    //      }
;;;128          for ( auto &item : Dev )
000052  466d              MOV      r5,sp
000054  4628              MOV      r0,r5
000056  f1050908          ADD      r9,r5,#8
00005a  e01c              B        |L2.150|
                  |L2.92|
00005c  4603              MOV      r3,r0
;;;129          {
;;;130            if ( LL_GPIO_IsInputPinSet( HW.Gpio, HW.Nbr ) == item->Pull )
00005e  f8d1a004          LDR      r10,[r1,#4]
000062  e9da8400          LDRD     r8,r4,[r10,#0]
000066  f8d8a010          LDR      r10,[r8,#0x10]
00006a  ea0a0a04          AND      r10,r10,r4
00006e  45a2              CMP      r10,r4
000070  d102              BNE      |L2.120|
000072  f04f0a01          MOV      r10,#1
000076  e001              B        |L2.124|
                  |L2.120|
000078  f04f0a00          MOV      r10,#0
                  |L2.124|
00007c  681c              LDR      r4,[r3,#0]
00007e  78a4              LDRB     r4,[r4,#2]
000080  45a2              CMP      r10,r4
000082  d107              BNE      |L2.148|
;;;131            {
;;;132              ++item->Ctr;
000084  681c              LDR      r4,[r3,#0]
000086  7824              LDRB     r4,[r4,#0]
000088  1c64              ADDS     r4,r4,#1
00008a  b2e4              UXTB     r4,r4
00008c  f8d38000          LDR      r8,[r3,#0]
000090  f8884000          STRB     r4,[r8,#0]
                  |L2.148|
000094  1d00              ADDS     r0,r0,#4
                  |L2.150|
000096  4548              CMP      r0,r9
000098  d1e0              BNE      |L2.92|
                  |L2.154|
00009a  2a14              CMP      r2,#0x14              ;111
00009c  d1d0              BNE      |L2.64|
;;;133            }
;;;134          }
;;;135        }
;;;136      }
;;;137    
;;;138      DevType = ( Base.Ctr == MAX_CTR )
00009e  f89d000c          LDRB     r0,[sp,#0xc]
0000a2  2814              CMP      r0,#0x14
0000a4  d101              BNE      |L2.170|
;;;139              ? TModel::_BASE
0000a6  2000              MOVS     r0,#0
0000a8  e006              B        |L2.184|
                  |L2.170|
;;;140              :	( HC.Ctr == TmrCtr )
0000aa  f89d0008          LDRB     r0,[sp,#8]
0000ae  4290              CMP      r0,r2
0000b0  d101              BNE      |L2.182|
;;;141    		      ? TModel::_HC
0000b2  2001              MOVS     r0,#1
0000b4  e000              B        |L2.184|
                  |L2.182|
;;;142    		      : TModel::_UNDEFINED;
0000b6  2002              MOVS     r0,#2
                  |L2.184|
0000b8  7008              STRB     r0,[r1,#0]
;;;143    
;;;144      Model.Main.DevType = DevType;
0000ba  780b              LDRB     r3,[r1,#0]
0000bc  480d              LDR      r0,|L2.244|
0000be  f8900094          LDRB     r0,[r0,#0x94]  ; Model
0000c2  f3630001          BFI      r0,r3,#0,#2
0000c6  4b0b              LDR      r3,|L2.244|
0000c8  f8830094          STRB     r0,[r3,#0x94]
;;;145    
;;;146      LL_TIM_DisableIT_UPDATE( Tmr );                                  // Disable update interrupt
0000cc  6888              LDR      r0,[r1,#8]
0000ce  68c3              LDR      r3,[r0,#0xc]
0000d0  f0230301          BIC      r3,r3,#1
0000d4  60c3              STR      r3,[r0,#0xc]
0000d6  bf00              NOP      
;;;147      LL_TIM_DisableCounter( Tmr );
0000d8  6888              LDR      r0,[r1,#8]
0000da  6803              LDR      r3,[r0,#0]
0000dc  f0230301          BIC      r3,r3,#1
0000e0  6003              STR      r3,[r0,#0]
0000e2  bf00              NOP      
;;;148    
;;;149      return DevType;
0000e4  7808              LDRB     r0,[r1,#0]
;;;150    }
0000e6  b004              ADD      sp,sp,#0x10
0000e8  e8bd87f0          POP      {r4-r10,pc}
;;;151    
                          ENDP

                  |L2.236|
                          DCD      ||.constdata||
                  |L2.240|
                          DCD      _ZN10TDevDeterm7TmrTrigE ; TDevDeterm::TmrTrig
                  |L2.244|
                          DCD      Model

                          AREA ||i._ZN10TDevDeterm8init_tmrEv||, CODE, READONLY, ALIGN=2

                  _ZN10TDevDeterm8init_tmrEv PROC ; TDevDeterm::init_tmr()
;;;39     
;;;40     void TDevDeterm::init_tmr()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;41     {
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
;;;42       if ( Tmr == TIM7 )
000008  4954              LDR      r1,|L3.348|
00000a  68a0              LDR      r0,[r4,#8]
00000c  4288              CMP      r0,r1
00000e  d17d              BNE      |L3.268|
;;;43       {
;;;44         LL_TIM_InitTypeDef TIM_InitStruct;
;;;45     
;;;46     //  ----- Включить тактирование таймера ---------------------------------
;;;47         LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_TIM7 ); //F3_RM, Rev 8, c.126: If(APB1 prescaler = 1) x1 else x2 => \
000010  2020              MOVS     r0,#0x20
000012  4953              LDR      r1,|L3.352|
000014  6d89              LDR      r1,[r1,#0x58]
000016  4301              ORRS     r1,r1,r0
000018  4a51              LDR      r2,|L3.352|
00001a  6591              STR      r1,[r2,#0x58]
00001c  4611              MOV      r1,r2
00001e  6d89              LDR      r1,[r1,#0x58]
000020  4001              ANDS     r1,r1,r0
000022  9101              STR      r1,[sp,#4]
000024  bf00              NOP      
000026  bf00              NOP      
;;;48                                                                 => TIM7 тактируется частотой 72МГц
;;;49     
;;;50         LL_RCC_ClocksTypeDef RCC_Clocks;
;;;51         LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
000028  a804              ADD      r0,sp,#0x10
00002a  f7fffffe          BL       LL_RCC_GetSystemClocksFreq
;;;52     //    RCC_Clocks.PCLK1_Frequency
;;;53     
;;;54         constexpr uint32_t F_CNT             = 2000U; //частота работы счетчика таймера
00002e  f44f66fa          MOV      r6,#0x7d0
;;;55         constexpr uint32_t F_TIMER           = 100U;  //частота работы таймера
000032  2764              MOVS     r7,#0x64
;;;56         uint16_t PRESCALER_VALUE             = (RCC_Clocks.PCLK1_Frequency + (F_CNT / 2U)) / F_CNT - 1U;
000034  9806              LDR      r0,[sp,#0x18]
000036  f500707a          ADD      r0,r0,#0x3e8
00003a  4631              MOV      r1,r6
00003c  fbb0f0f1          UDIV     r0,r0,r1
000040  1e40              SUBS     r0,r0,#1
000042  b285              UXTH     r5,r0
;;;57         constexpr uint32_t AUTORELOAD_VALUE  = (F_CNT + (F_TIMER / 2U)) / F_TIMER - 1U;
000044  2013              MOVS     r0,#0x13
000046  9003              STR      r0,[sp,#0xc]
;;;58         constexpr uint32_t START_TIMER_VALUE = 0x00;
000048  2000              MOVS     r0,#0
00004a  9002              STR      r0,[sp,#8]
;;;59     
;;;60     //  ----- Инициализация таймера -----------------------------------------
;;;61         TIM_InitStruct.Prescaler     = PRESCALER_VALUE;
00004c  f8ad5020          STRH     r5,[sp,#0x20]
;;;62         TIM_InitStruct.CounterMode   = LL_TIM_COUNTERMODE_UP;
000050  9009              STR      r0,[sp,#0x24]
;;;63         TIM_InitStruct.Autoreload    = AUTORELOAD_VALUE;
000052  2013              MOVS     r0,#0x13
000054  900a              STR      r0,[sp,#0x28]
;;;64         TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
000056  2000              MOVS     r0,#0
000058  900b              STR      r0,[sp,#0x2c]
;;;65     //    TIM_InitStruct.RepetitionCounter = ;
;;;66     
;;;67         LL_TIM_Init(Tmr, &TIM_InitStruct);                            // Configure the TIMx time base unit
00005a  a908              ADD      r1,sp,#0x20
00005c  68a0              LDR      r0,[r4,#8]
00005e  f7fffffe          BL       LL_TIM_Init
;;;68         LL_TIM_ClearFlag_UPDATE(Tmr);
000062  68a0              LDR      r0,[r4,#8]
000064  f7fffffe          BL       _ZN36_INTERNAL_14_dev_determ_cpp_339485bd23LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef ; [local to dev_determ_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
;;;69     
;;;70     //    LL_TIM_DisableUpdateEvent(MAIN_TIMER);                        // Enable update event generation 
;;;71         LL_TIM_SetUpdateSource(Tmr, LL_TIM_UPDATESOURCE_COUNTER);     // Set update event source  
000068  2104              MOVS     r1,#4
00006a  68a0              LDR      r0,[r4,#8]
00006c  6802              LDR      r2,[r0,#0]
00006e  f0220204          BIC      r2,r2,#4
000072  430a              ORRS     r2,r2,r1
000074  6002              STR      r2,[r0,#0]
000076  bf00              NOP      
;;;72         LL_TIM_SetOnePulseMode(Tmr, LL_TIM_ONEPULSEMODE_REPETITIVE);  // Set one pulse mode
000078  2100              MOVS     r1,#0
00007a  68a0              LDR      r0,[r4,#8]
00007c  6802              LDR      r2,[r0,#0]
00007e  f0220208          BIC      r2,r2,#8
000082  430a              ORRS     r2,r2,r1
000084  6002              STR      r2,[r0,#0]
000086  bf00              NOP      
;;;73         LL_TIM_SetCounterMode(Tmr, LL_TIM_COUNTERMODE_UP);            // Set the timer counter counting mode
000088  68a0              LDR      r0,[r4,#8]
00008a  6802              LDR      r2,[r0,#0]
00008c  f0220270          BIC      r2,r2,#0x70
000090  430a              ORRS     r2,r2,r1
000092  6002              STR      r2,[r0,#0]
000094  bf00              NOP      
;;;74         LL_TIM_DisableARRPreload(Tmr);                                // Enable auto-reload (ARR) preload
000096  68a0              LDR      r0,[r4,#8]
000098  6801              LDR      r1,[r0,#0]
00009a  f0210180          BIC      r1,r1,#0x80
00009e  6001              STR      r1,[r0,#0]
0000a0  bf00              NOP      
;;;75         LL_TIM_SetCounter(Tmr, START_TIMER_VALUE);                    // Set the counter value
0000a2  2100              MOVS     r1,#0
0000a4  68a0              LDR      r0,[r4,#8]
0000a6  6241              STR      r1,[r0,#0x24]
0000a8  bf00              NOP      
;;;76     
;;;77         //настройка NVIC
;;;78         NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));  // 5 - максимальный уровень приоритета для прерывания из которого можно вызывать API функции FreeRTOS 
0000aa  2137              MOVS     r1,#0x37
0000ac  4b2d              LDR      r3,|L3.356|
0000ae  681b              LDR      r3,[r3,#0]
0000b0  f3c32002          UBFX     r0,r3,#8,#3
0000b4  f04f0c05          MOV      r12,#5
0000b8  f04f0800          MOV      r8,#0
0000bc  4603              MOV      r3,r0
0000be  f1c30b07          RSB      r11,r3,#7
0000c2  f1bb0f04          CMP      r11,#4
0000c6  d902              BLS      |L3.206|
0000c8  f04f0b04          MOV      r11,#4
0000cc  e001              B        |L3.210|
                  |L3.206|
0000ce  f1c30b07          RSB      r11,r3,#7
                  |L3.210|
0000d2  46da              MOV      r10,r11
0000d4  f1030b04          ADD      r11,r3,#4
0000d8  f1bb0f07          CMP      r11,#7
0000dc  d202              BCS      |L3.228|
0000de  f04f0b00          MOV      r11,#0
0000e2  e001              B        |L3.232|
                  |L3.228|
0000e4  f1a30b03          SUB      r11,r3,#3
                  |L3.232|
0000e8  46d9              MOV      r9,r11
0000ea  f04f0b01          MOV      r11,#1
0000ee  fa0bfb0a          LSL      r11,r11,r10
0000f2  f1ab0b01          SUB      r11,r11,#1
0000f6  ea0b0b0c          AND      r11,r11,r12
0000fa  fa0bfb09          LSL      r11,r11,r9
0000fe  f04f0e01          MOV      lr,#1
000102  fa0efe09          LSL      lr,lr,r9
000106  f1ae0e01          SUB      lr,lr,#1
00010a  e000              B        |L3.270|
                  |L3.268|
00010c  e023              B        |L3.342|
                  |L3.270|
00010e  ea0e0e08          AND      lr,lr,r8
000112  ea4b020e          ORR      r2,r11,lr
000116  bf00              NOP      
000118  2900              CMP      r1,#0
00011a  da0a              BGE      |L3.306|
00011c  0710              LSLS     r0,r2,#28
00011e  ea4f6c10          LSR      r12,r0,#24
000122  4810              LDR      r0,|L3.356|
000124  300c              ADDS     r0,r0,#0xc
000126  f001030f          AND      r3,r1,#0xf
00012a  1f1b              SUBS     r3,r3,#4
00012c  f800c003          STRB     r12,[r0,r3]
000130  e003              B        |L3.314|
                  |L3.306|
000132  0710              LSLS     r0,r2,#28
000134  0e03              LSRS     r3,r0,#24
000136  480c              LDR      r0,|L3.360|
000138  5443              STRB     r3,[r0,r1]
                  |L3.314|
00013a  bf00              NOP      
;;;79         NVIC_EnableIRQ(TIM7_IRQn);
00013c  2037              MOVS     r0,#0x37
00013e  f000021f          AND      r2,r0,#0x1f
000142  2101              MOVS     r1,#1
000144  4091              LSLS     r1,r1,r2
000146  0942              LSRS     r2,r0,#5
000148  0092              LSLS     r2,r2,#2
00014a  f10222e0          ADD      r2,r2,#0xe000e000
00014e  f8c21100          STR      r1,[r2,#0x100]
000152  bf00              NOP      
;;;80       }
000154  bf00              NOP      
                  |L3.342|
;;;81     }
000156  b00d              ADD      sp,sp,#0x34
000158  e8bd8ff0          POP      {r4-r11,pc}
;;;82     
                          ENDP

                  |L3.348|
                          DCD      0x40001400
                  |L3.352|
                          DCD      0x40021000
                  |L3.356|
                          DCD      0xe000ed0c
                  |L3.360|
                          DCD      0xe000e400

                          AREA ||i._ZN10TDevDetermC1ERK4TPinP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN10TDevDetermC2ERK4TPinP11TIM_TypeDef                  ; Alternate entry point ; TDevDeterm::TDevDeterm__sub_object(const TPin&, TIM_TypeDef*)
                  _ZN10TDevDetermC1ERK4TPinP11TIM_TypeDef PROC ; TDevDeterm::TDevDeterm(const TPin&, TIM_TypeDef*)
;;;12     
;;;13     TDevDeterm::TDevDeterm(
;;;14                            const TPin &_HW,
;;;15                            TIM_TypeDef *_Tmr
;;;16                           )
;;;17     :
;;;18     DevType( TModel::_BASE ),
;;;19     HW( _HW ),
;;;20     Tmr( _Tmr )
;;;21     {
;;;22       HW.en_clk( HW.ClkPortMask ); //включение тактирования порта, к которому подключен вывод определения типа устройства
;;;23     
;;;24       //инициализация вывода
;;;25       LL_GPIO_InitTypeDef GPIO_InitStruct;
;;;26     
;;;27       GPIO_InitStruct.Pin        = HW.Nbr;
;;;28       GPIO_InitStruct.Mode       = LL_GPIO_MODE_INPUT;
;;;29       GPIO_InitStruct.Speed      = LL_GPIO_SPEED_FREQ_LOW;
;;;30       GPIO_InitStruct.Pull       = LL_GPIO_PULL_UP;
;;;31     
;;;32       LL_GPIO_Init( HW.Gpio, &GPIO_InitStruct );
;;;33     }
;;;34     
000000  b570              PUSH     {r4-r6,lr}
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  2000              MOVS     r0,#0
00000c  7020              STRB     r0,[r4,#0]
00000e  6065              STR      r5,[r4,#4]
000010  60a6              STR      r6,[r4,#8]
000012  6862              LDR      r2,[r4,#4]
000014  e9d20102          LDRD     r0,r1,[r2,#8]
000018  4788              BLX      r1
00001a  6860              LDR      r0,[r4,#4]
00001c  6840              LDR      r0,[r0,#4]
00001e  9000              STR      r0,[sp,#0]
000020  2000              MOVS     r0,#0
000022  9001              STR      r0,[sp,#4]
000024  9002              STR      r0,[sp,#8]
000026  2001              MOVS     r0,#1
000028  9004              STR      r0,[sp,#0x10]
00002a  6861              LDR      r1,[r4,#4]
00002c  6808              LDR      r0,[r1,#0]
00002e  4669              MOV      r1,sp
000030  f7fffffe          BL       LL_GPIO_Init
000034  4620              MOV      r0,r4
000036  b006              ADD      sp,sp,#0x18
000038  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i._ZN10TDevDetermD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN10TDevDetermD2Ev                  ; Alternate entry point ; TDevDeterm::~TDevDeterm__sub_object()
                  _ZN10TDevDetermD1Ev PROC ; TDevDeterm::~TDevDeterm()
;;;34     
;;;35     TDevDeterm::~TDevDeterm()
;;;36     {
;;;37     
;;;38     }
;;;39     
000000  4770              BX       lr
                          ENDP


                          AREA ||i._ZN36_INTERNAL_14_dev_determ_cpp_339485bd23LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN36_INTERNAL_14_dev_determ_cpp_339485bd23LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef PROC ; [local to dev_determ_cpp]::LL_TIM_ClearFlag_UPDATE(TIM_TypeDef*)
;;;4026     */
;;;4027   __STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
000000  f06f0101          MVN      r1,#1
;;;4028   {
;;;4029     WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
000004  6101              STR      r1,[r0,#0x10]
;;;4030   }
000006  4770              BX       lr
;;;4031   
                          ENDP


                          AREA ||i.__sti___14_dev_determ_cpp_339485bd||, CODE, READONLY, ALIGN=2

                  __sti___14_dev_determ_cpp_339485bd PROC
000000  b510              PUSH     {r4,lr}
000002  4a05              LDR      r2,|L7.24|
000004  4905              LDR      r1,|L7.28|
000006  4806              LDR      r0,|L7.32|
000008  f7fffffe          BL       _ZN10TDevDetermC1ERK4TPinP11TIM_TypeDef ; TDevDeterm::TDevDeterm(const TPin&, TIM_TypeDef*)
00000c  4604              MOV      r4,r0
00000e  4a05              LDR      r2,|L7.36|
000010  4905              LDR      r1,|L7.40|
000012  f7fffffe          BL       __aeabi_atexit
000016  bd10              POP      {r4,pc}
                          ENDP

                  |L7.24|
                          DCD      0x40001400
                  |L7.28|
                          DCD      DevDetect_HW
                  |L7.32|
                          DCD      DevDeterm
                  |L7.36|
                          DCD      __dso_handle
                  |L7.40|
                          DCD      _ZN10TDevDetermD1Ev ; TDevDeterm::~TDevDeterm()

                          AREA ||.ARM.exidx||, LINKORDER=||i.TIM7_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.TIM7_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN10TDevDetermC1ERK4TPinP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TDevDetermC1ERK4TPinP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN10TDevDetermD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TDevDetermD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN10TDevDeterm8init_tmrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TDevDeterm8init_tmrEv||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN10TDevDeterm6is_devEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TDevDeterm6is_devEv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i.__sti___14_dev_determ_cpp_339485bd||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___14_dev_determ_cpp_339485bd||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN36_INTERNAL_14_dev_determ_cpp_339485bd23LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN36_INTERNAL_14_dev_determ_cpp_339485bd23LL_TIM_ClearFlag_UPDATEEP11TIM_TypeDef||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  DevDeterm
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00000100          DCB      0x00,0x00,0x01,0x00
000004  000100            DCB      0x00,0x01,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  _ZN10TDevDeterm7TmrTrigE ; TDevDeterm::TmrTrig
000000  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___14_dev_determ_cpp_339485bd

;*** Start embedded assembler ***

#line 1 "Source\\Main\\src\\dev_determ.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_dev_determ_cpp_339485bd___ZN36_INTERNAL_14_dev_determ_cpp_339485bd7__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___14_dev_determ_cpp_339485bd___ZN36_INTERNAL_14_dev_determ_cpp_339485bd7__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_dev_determ_cpp_339485bd___ZN36_INTERNAL_14_dev_determ_cpp_339485bd7__REVSHEi|
#line 402
|__asm___14_dev_determ_cpp_339485bd___ZN36_INTERNAL_14_dev_determ_cpp_339485bd7__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_dev_determ_cpp_339485bd___ZN36_INTERNAL_14_dev_determ_cpp_339485bd5__RRXEj|
#line 587
|__asm___14_dev_determ_cpp_339485bd___ZN36_INTERNAL_14_dev_determ_cpp_339485bd5__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
