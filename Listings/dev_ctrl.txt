; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\dev_ctrl.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\dev_ctrl.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\dev_ctrl.crf Source\Tasks\src\dev_ctrl.cpp]
                          THUMB

                          AREA ||i._Z8dev_ctrlPv||, CODE, READONLY, ALIGN=2

                  _Z8dev_ctrlPv PROC ; dev_ctrl(void*)
;;;32     //----- Задача RTOS --------------------------------------------------
;;;33     void dev_ctrl( void *Params ) //управление устройством
000000  b51c              PUSH     {r2-r4,lr}
;;;34     {
;;;35     
;;;36       typedef void (*TFnct)();
;;;37       
;;;38       TFnct Fnct[] =
000002  4908              LDR      r1,|L1.36|
000004  c903              LDM      r1,{r0,r1}
000006  e9cd0100          STRD     r0,r1,[sp,#0]
;;;39       {
;;;40         base_ctrl,
;;;41         hc_ctrl
;;;42       };
;;;43       
;;;44       TModel::TDevType DevType = Model.get_dev_type();  
00000a  4807              LDR      r0,|L1.40|
00000c  f7fffffe          BL       _ZN6TModel12get_dev_typeEv ; TModel::get_dev_type()
000010  4604              MOV      r4,r0
;;;45       
;;;46       for ( ;; )
000012  bf00              NOP      
                  |L1.20|
;;;47       {  
;;;48         factory_calib( DevType );   //для Базы и для Датчика
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl13factory_calibEN9TSettings8TDevTypeE ; [local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType)
;;;49         Fnct[ DevType ]();
00001a  f85d0024          LDR      r0,[sp,r4,LSL #2]
00001e  4780              BLX      r0
000020  e7f8              B        |L1.20|
;;;50       }
;;;51       
;;;52     }
;;;53     //--------------------------------------------------------------------
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      ||.constdata||
                  |L1.40|
                          DCD      Model

                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEs||, CODE, READONLY, ALIGN=2

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEs PROC ; [local to dev_ctrl_cpp]::user_calib(short)
;;;70     
;;;71     static void user_calib( int16_t OpenAngle )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;72     {
000004  4604              MOV      r4,r0
;;;73       static bool CalibProcess = false;
;;;74       static uint8_t CalibCtr  = 0U; 
;;;75       constexpr uint8_t MAX_SAMPLE_CTR = 20U; //из расчета появления новой валидной выборки каждые 300мс
000006  f04f0914          MOV      r9,#0x14
;;;76       static int16_t OpenAngles[ MAX_SAMPLE_CTR ]  = {};
;;;77       
;;;78       
;;;79       if ( 
00000a  4825              LDR      r0,|L2.160|
00000c  7800              LDRB     r0,[r0,#0]  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE12CalibProcess
00000e  b958              CBNZ     r0,|L2.40|
;;;80           CalibProcess == false
;;;81           &&
;;;82           xSemaphoreTake( User_Zeroing_Out_Sem, 0U ) == pdFAIL 
000010  2300              MOVS     r3,#0
000012  461a              MOV      r2,r3
000014  4619              MOV      r1,r3
000016  4823              LDR      r0,|L2.164|
000018  6800              LDR      r0,[r0,#0]  ; User_Zeroing_Out_Sem
00001a  f7fffffe          BL       xQueueGenericReceive
00001e  b918              CBNZ     r0,|L2.40|
;;;83          )
;;;84       {
;;;85         Angles.DampCoeff = CONSTS::DAMP_COEFF;
000020  2002              MOVS     r0,#2
000022  4921              LDR      r1,|L2.168|
000024  7008              STRB     r0,[r1,#0]
000026  e038              B        |L2.154|
                  |L2.40|
;;;86       }
;;;87       else
;;;88       {
;;;89         Angles.DampCoeff = 1U;
000028  2001              MOVS     r0,#1
00002a  491f              LDR      r1,|L2.168|
00002c  7008              STRB     r0,[r1,#0]
;;;90         Model.set_bias( 0U );    
00002e  2100              MOVS     r1,#0
000030  481e              LDR      r0,|L2.172|
000032  f7fffffe          BL       _ZN6TModel8set_biasEa ; TModel::set_bias(signed char)
;;;91         CalibProcess = true;
000036  2001              MOVS     r0,#1
000038  4919              LDR      r1,|L2.160|
00003a  7008              STRB     r0,[r1,#0]
;;;92         
;;;93         OpenAngles[ CalibCtr ] = OpenAngle;
00003c  481c              LDR      r0,|L2.176|
00003e  491d              LDR      r1,|L2.180|
000040  7809              LDRB     r1,[r1,#0]  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE8CalibCtr
000042  f8204011          STRH     r4,[r0,r1,LSL #1]
;;;94         if ( ++CalibCtr < MAX_SAMPLE_CTR )
000046  481b              LDR      r0,|L2.180|
000048  7800              LDRB     r0,[r0,#0]  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE8CalibCtr
00004a  1c40              ADDS     r0,r0,#1
00004c  b2c0              UXTB     r0,r0
00004e  4919              LDR      r1,|L2.180|
000050  7008              STRB     r0,[r1,#0]
000052  2814              CMP      r0,#0x14
000054  db21              BLT      |L2.154|
;;;95         {
;;;96           //продолжение заполнения массива
;;;97         }
;;;98         else
;;;99         {
;;;100          OpenAngles[ 0U ] = OpenAngles [ 1U ];
000056  4816              LDR      r0,|L2.176|
000058  8840              LDRH     r0,[r0,#2]  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE10OpenAngles
00005a  4915              LDR      r1,|L2.176|
00005c  8008              STRH     r0,[r1,#0]
;;;101          CalibCtr = 0U;      
00005e  2000              MOVS     r0,#0
000060  4914              LDR      r1,|L2.180|
000062  7008              STRB     r0,[r1,#0]
;;;102          CalibProcess = false;
000064  490e              LDR      r1,|L2.160|
000066  7008              STRB     r0,[r1,#0]
;;;103          
;;;104          int16_t *Beg = &OpenAngles[ 0U ];
000068  4d11              LDR      r5,|L2.176|
;;;105          int16_t *End = &OpenAngles[ MAX_SAMPLE_CTR ];
00006a  f1050628          ADD      r6,r5,#0x28
;;;106          
;;;107          TModel::TCalibProcess CalibProcess = TModel::TCalibProcess::__DENY;
00006e  270a              MOVS     r7,#0xa
;;;108          
;;;109          CalibProcess = ( Model.set_bias( cnt_average( Beg, End, MAX_SAMPLE_CTR ) ) == false )
000070  2214              MOVS     r2,#0x14
000072  4631              MOV      r1,r6
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h ; [local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)
00007a  fa4ff880          SXTB     r8,r0
00007e  4641              MOV      r1,r8
000080  480a              LDR      r0,|L2.172|
000082  f7fffffe          BL       _ZN6TModel8set_biasEa ; TModel::set_bias(signed char)
000086  b908              CBNZ     r0,|L2.140|
;;;110                       ? TModel::TCalibProcess::__DENY
000088  200a              MOVS     r0,#0xa
00008a  e000              B        |L2.142|
                  |L2.140|
;;;111                       : TModel::TCalibProcess::__PERFORMED;
00008c  205a              MOVS     r0,#0x5a
                  |L2.142|
00008e  4607              MOV      r7,r0
;;;112          
;;;113          Model.set_calib_process( CalibProcess );   
000090  4639              MOV      r1,r7
000092  4806              LDR      r0,|L2.172|
000094  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
;;;114        }
000098  bf00              NOP      
                  |L2.154|
;;;115      }
;;;116    }
00009a  e8bd87f0          POP      {r4-r10,pc}
;;;117    
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
                          DCD      _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE12CalibProcess ; [local to dev_ctrl_cpp]::user_calib(short)::CalibProcess
                  |L2.164|
                          DCD      User_Zeroing_Out_Sem
                  |L2.168|
                          DCD      Angles
                  |L2.172|
                          DCD      Model
                  |L2.176|
                          DCD      _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE10OpenAngles ; [local to dev_ctrl_cpp]::user_calib(short)::OpenAngles
                  |L2.180|
                          DCD      _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE8CalibCtr ; [local to dev_ctrl_cpp]::user_calib(short)::CalibCtr

                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h||, CODE, READONLY, ALIGN=1

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h PROC ; [local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)
;;;179    
;;;180    static int16_t cnt_average( int16_t *Beg, int16_t *End, uint8_t MAX_SAMPLE_CTR )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;181    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;182      int16_t Res =  
000008  4621              MOV      r1,r4
00000a  462e              MOV      r6,r5
00000c  2300              MOVS     r3,#0
00000e  e00a              B        |L3.38|
                  |L3.16|
000010  b21f              SXTH     r7,r3
000012  f9b1c000          LDRSH    r12,[r1,#0]
;;;183      std::accumulate( Beg, End, 0U, []( int16_t Res, int16_t Item ){
;;;184        return Res += Item;
000016  eb07080c          ADD      r8,r7,r12
00001a  fa0ff888          SXTH     r8,r8
00001e  4647              MOV      r7,r8
000020  463b              MOV      r3,r7
000022  1c8f              ADDS     r7,r1,#2
000024  4639              MOV      r1,r7
                  |L3.38|
000026  42b1              CMP      r1,r6
000028  d1f2              BNE      |L3.16|
00002a  b218              SXTH     r0,r3                 ;182
;;;185      } );
;;;186        
;;;187      Res = ( Res >= 0 )
00002c  2800              CMP      r0,#0
00002e  db07              BLT      |L3.64|
;;;188          ? ( Res + MAX_SAMPLE_CTR / 2 ) / MAX_SAMPLE_CTR
000030  4613              MOV      r3,r2
000032  eb0276d3          ADD      r6,r2,r3,LSR #31
000036  eb000666          ADD      r6,r0,r6,ASR #1
00003a  fb96f6f2          SDIV     r6,r6,r2
00003e  e006              B        |L3.78|
                  |L3.64|
;;;189          : ( Res - MAX_SAMPLE_CTR / 2 ) / MAX_SAMPLE_CTR;  
000040  4611              MOV      r1,r2
000042  eb0276d1          ADD      r6,r2,r1,LSR #31
000046  eba00666          SUB      r6,r0,r6,ASR #1
00004a  fb96f6f2          SDIV     r6,r6,r2
                  |L3.78|
00004e  b230              SXTH     r0,r6
;;;190      
;;;191      return Res;
;;;192    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;193    
                          ENDP


                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl13factory_calibEN9TSettings8TDevTypeE||, CODE, READONLY, ALIGN=2

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl13factory_calibEN9TSettings8TDevTypeE PROC ; [local to dev_ctrl_cpp]::factory_calib(TSettings::TDevType)
;;;55     //----- Вспомогательные функции задачи RTOS -------------------------------------------------------------------------
;;;56     static void factory_calib( TModel::TDevType DevType )
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58       //при первом включении необходимо защелкнуть задачу на калибровку по углу
;;;59       TickType_t xTicksToWait = 0U;
000004  2500              MOVS     r5,#0
;;;60       
;;;61       xTicksToWait = ( Model.get_accel_calib_sign() == TModel::TIsAccCalib::_ACC_UNCALIBRATED )
000006  480b              LDR      r0,|L4.52|
000008  f7fffffe          BL       _ZN6TModel20get_accel_calib_signEv ; TModel::get_accel_calib_sign()
00000c  28ff              CMP      r0,#0xff
00000e  d101              BNE      |L4.20|
;;;62                    ? portMAX_DELAY //задача защелкивается на ожидании семафора заводской калибровки
000010  1e68              SUBS     r0,r5,#1
000012  e000              B        |L4.22|
                  |L4.20|
;;;63                    : 0U;
000014  2000              MOVS     r0,#0
                  |L4.22|
000016  4605              MOV      r5,r0
;;;64                    
;;;65       if ( xSemaphoreTake( Factory_Zeroing_Out_Sem, xTicksToWait ) == pdPASS )
000018  2300              MOVS     r3,#0
00001a  462a              MOV      r2,r5
00001c  4619              MOV      r1,r3
00001e  4806              LDR      r0,|L4.56|
000020  6800              LDR      r0,[r0,#0]  ; Factory_Zeroing_Out_Sem
000022  f7fffffe          BL       xQueueGenericReceive
000026  2801              CMP      r0,#1
000028  d102              BNE      |L4.48|
;;;66       {
;;;67         process_factory_calib( DevType );
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeE ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
                  |L4.48|
;;;68       }
;;;69     }
000030  bd70              POP      {r4-r6,pc}
;;;70     
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      Model
                  |L4.56|
                          DCD      Factory_Zeroing_Out_Sem

                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl14sens_dev_stageEPKPvj||, CODE, READONLY, ALIGN=2

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl14sens_dev_stageEPKPvj PROC ; [local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned)
;;;348    
;;;349    static bool sens_dev_stage( const SemaphoreHandle_t *Sem, uint32_t Waiting )
000000  b570              PUSH     {r4-r6,lr}
;;;350    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;351      if ( 
000006  f44f707a          MOV      r0,#0x3e8
00000a  4368              MULS     r0,r5,r0
00000c  f44f717a          MOV      r1,#0x3e8
000010  fbb0f6f1          UDIV     r6,r0,r1
000014  2300              MOVS     r3,#0
000016  4632              MOV      r2,r6
000018  4619              MOV      r1,r3
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       xQueueGenericReceive
000020  b988              CBNZ     r0,|L5.70|
;;;352          xSemaphoreTake( *Sem, pdMS_TO_TICKS( Waiting ) )                                          
;;;353          == 
;;;354          pdFAIL
;;;355         )
;;;356      {
;;;357        if ( ++DevCtrl.SensDevCtr.Val >= DevCtrl.SensDevCtr.Max )
000022  480d              LDR      r0,|L5.88|
000024  7800              LDRB     r0,[r0,#0]  ; DevCtrl
000026  1c40              ADDS     r0,r0,#1
000028  b2c0              UXTB     r0,r0
00002a  490b              LDR      r1,|L5.88|
00002c  7008              STRB     r0,[r1,#0]
00002e  7849              LDRB     r1,[r1,#1]  ; DevCtrl
000030  4288              CMP      r0,r1
000032  db06              BLT      |L5.66|
;;;358        {
;;;359          DevCtrl.SensDevCtr.Val = 0U;
000034  2000              MOVS     r0,#0
000036  4908              LDR      r1,|L5.88|
000038  7008              STRB     r0,[r1,#0]
;;;360          Model.set_connect( TModel::TConnect::_NOT );
00003a  2100              MOVS     r1,#0
00003c  4807              LDR      r0,|L5.92|
00003e  f7fffffe          BL       _ZN6TModel11set_connectEN9TSettings8TConnectE ; TModel::set_connect(TSettings::TConnect)
                  |L5.66|
;;;361        }    
;;;362        return false;
000042  2000              MOVS     r0,#0
                  |L5.68|
;;;363      }
;;;364      else
;;;365      {
;;;366        DevCtrl.SensDevCtr.Val = 0U;
;;;367        Model.set_connect( TModel::TConnect::_YES );
;;;368        
;;;369        return true;
;;;370      }
;;;371    }
000044  bd70              POP      {r4-r6,pc}
                  |L5.70|
000046  2000              MOVS     r0,#0                 ;366
000048  4903              LDR      r1,|L5.88|
00004a  7008              STRB     r0,[r1,#0]            ;366
00004c  2101              MOVS     r1,#1                 ;367
00004e  4803              LDR      r0,|L5.92|
000050  f7fffffe          BL       _ZN6TModel11set_connectEN9TSettings8TConnectE ; TModel::set_connect(TSettings::TConnect)
000054  2001              MOVS     r0,#1                 ;369
000056  e7f5              B        |L5.68|
;;;372    
                          ENDP

                  |L5.88|
                          DCD      DevCtrl
                  |L5.92|
                          DCD      Model

                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl15open_angle_ctrlEPh||, CODE, READONLY, ALIGN=2

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl15open_angle_ctrlEPh PROC ; [local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
;;;261    
;;;262    static void open_angle_ctrl( uint8_t *pGoodCtr )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;263    {
000004  ed2d8b02          VPUSH    {d8}
000008  b093              SUB      sp,sp,#0x4c
;;;264      TModel::TAxisRotate AxisRotate = static_cast<TModel::TAxisRotate>(Model.get_axis_rotate());  
00000a  483d              LDR      r0,|L6.256|
00000c  f7fffffe          BL       _ZN6TModel15get_axis_rotateEv ; TModel::get_axis_rotate()
000010  4683              MOV      r11,r0
;;;265      Angles.cnt_my_angle( TModel::TDevType::_BASE, AxisRotate, true ); //преобразовать угол базы в формат ( 0..260, -1..-80 ) (угол датчика уже приходит преобразованным)
000012  2301              MOVS     r3,#1
000014  465a              MOV      r2,r11
000016  2100              MOVS     r1,#0
000018  483a              LDR      r0,|L6.260|
00001a  f7fffffe          BL       _ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb ; TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
;;;266      
;;;267    //  if ( ++*pGoodCtr > 3U )
;;;268    //  {
;;;269    //    *pGoodCtr = 3U;
;;;270        
;;;271        Angles.cnt_open_angle();                        //вычислить результирующий угол
00001e  4839              LDR      r0,|L6.260|
000020  f7fffffe          BL       _ZN7TAngles14cnt_open_angleEv ; TAngles::cnt_open_angle()
;;;272    
;;;273        int16_t OpenAngle = roundf( Model.get_open_angle() );     //обновленный угол
000024  4836              LDR      r0,|L6.256|
000026  f7fffffe          BL       _ZN6TModel14get_open_angleEv ; TModel::get_open_angle()
00002a  eeb08a40          VMOV.F32 s16,s0
00002e  f7fffffe          BL       __hardfp_roundf
000032  eebd0ac0          VCVT.S32.F32 s0,s0
000036  ee100a10          VMOV     r0,s0
00003a  b204              SXTH     r4,r0
;;;274    
;;;275        user_calib( OpenAngle );                        //пользовательская калибровка \
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEs ; [local to dev_ctrl_cpp]::user_calib(short)
;;;276                                                          проводится только для Базы - обнуление результирующего угла с сохранением \
;;;277                                                          смещения в настройки (их можно поменять вручную)
;;;278        if (
000042  f1140f0f          CMN      r4,#0xf
000046  db06              BLT      |L6.86|
;;;279            OpenAngle < CONSTS::THR_ERR_OPEN_ANGLE
;;;280            ||
;;;281            (
;;;282             OpenAngle <= CONSTS::THR_ERR_OPEN_ANGLE + CONSTS::HYST_ERR_OPEN_ANGLE
000048  f1140f0a          CMN      r4,#0xa
00004c  dc08              BGT      |L6.96|
;;;283             &&
;;;284             Model.get_hc_pos_err() == TModel::TPosErr::_POS_ERR
00004e  482c              LDR      r0,|L6.256|
000050  f7fffffe          BL       _ZN6TModel14get_hc_pos_errEv ; TModel::get_hc_pos_err()
000054  b920              CBNZ     r0,|L6.96|
                  |L6.86|
;;;285            )
;;;286           )
;;;287        {
;;;288          Model.set_hc_pos_err( TModel::TPosErr::_POS_ERR );
000056  2100              MOVS     r1,#0
000058  4829              LDR      r0,|L6.256|
00005a  f7fffffe          BL       _ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE ; TModel::set_hc_pos_err(TSettings::TPosErr)
00005e  e04a              B        |L6.246|
                  |L6.96|
;;;289          //состояние крышки остается прежним, значение угла обновлено
;;;290        }
;;;291        else
;;;292        {
;;;293          Model.set_hc_pos_err( TModel::TPosErr::_POS_OK );
000060  2101              MOVS     r1,#1
000062  4827              LDR      r0,|L6.256|
000064  f7fffffe          BL       _ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE ; TModel::set_hc_pos_err(TSettings::TPosErr)
;;;294          
;;;295          //определить новое состояние
;;;296          uint8_t THR  = Model.get_thr();
000068  4825              LDR      r0,|L6.256|
00006a  f7fffffe          BL       _ZN6TModel7get_thrEv ; TModel::get_thr()
00006e  4680              MOV      r8,r0
;;;297          uint8_t HYST = Model.get_hyst();
000070  4823              LDR      r0,|L6.256|
000072  f7fffffe          BL       _ZN6TModel8get_hystEv ; TModel::get_hyst()
000076  4682              MOV      r10,r0
;;;298          
;;;299          TModel::THC NewState;
;;;300    
;;;301          if (
000078  4544              CMP      r4,r8
00007a  dc08              BGT      |L6.142|
;;;302              OpenAngle > THR
;;;303              ||
;;;304              (
;;;305               OpenAngle >= THR - HYST
00007c  eba8000a          SUB      r0,r8,r10
000080  42a0              CMP      r0,r4
000082  dc06              BGT      |L6.146|
;;;306               &&
;;;307               Model.get_hc_state() == TModel::THC::_OPENED
000084  481e              LDR      r0,|L6.256|
000086  f7fffffe          BL       _ZN6TModel12get_hc_stateEv ; TModel::get_hc_state()
00008a  2801              CMP      r0,#1
00008c  d101              BNE      |L6.146|
                  |L6.142|
;;;308              )
;;;309             )
;;;310          {
;;;311            NewState = TModel::THC::_OPENED;
00008e  2501              MOVS     r5,#1
000090  e000              B        |L6.148|
                  |L6.146|
;;;312          }
;;;313          else
;;;314          {
;;;315            NewState = TModel::THC::_CLOSED;
000092  2500              MOVS     r5,#0
                  |L6.148|
;;;316          }
;;;317          
;;;318    //      static uint16_t ErrOpenAngleCtr = 0U;
;;;319    //      if ( 
;;;320    //          OpenAngle > 7
;;;321    //          ||
;;;322    //          OpenAngle < -7
;;;323    //         )
;;;324    //      {
;;;325    //        ErrOpenAngleCtr++;
;;;326    //      }
;;;327          
;;;328          Model.set_hc_state( NewState );
000094  4629              MOV      r1,r5
000096  481a              LDR      r0,|L6.256|
000098  f7fffffe          BL       _ZN6TModel12set_hc_stateEN9TSettings3THCE ; TModel::set_hc_state(TSettings::THC)
;;;329          
;;;330          typedef void (TDiscreteOut::*TFnct)();
;;;331          
;;;332          TFnct Out[ TContact::_N_MAX ][ TModel::THC::_HC_MAX ] =
00009c  2220              MOVS     r2,#0x20
00009e  491a              LDR      r1,|L6.264|
0000a0  a809              ADD      r0,sp,#0x24
0000a2  f7fffffe          BL       __aeabi_memcpy4
;;;333          {
;;;334            {
;;;335             &TDiscreteOut::open,   //[_N_OPENED][_CLOSED],
;;;336             &TDiscreteOut::closed, //[_N_OPENED][_OPENED],
;;;337            },
;;;338            {
;;;339             &TDiscreteOut::closed, //[_N_CLOSED][_CLOSED],
;;;340             &TDiscreteOut::open,   //[_N_CLOSED][_OPENED],
;;;341            },
;;;342          };
;;;343          
;;;344          ( Do.*Out[ Model.get_d_o_sets() ][ NewState ] )();      
0000a6  4816              LDR      r0,|L6.256|
0000a8  f7fffffe          BL       _ZN6TModel12get_d_o_setsEv ; TModel::get_d_o_sets()
0000ac  a909              ADD      r1,sp,#0x24
0000ae  eb011000          ADD      r0,r1,r0,LSL #4
0000b2  eb0001c5          ADD      r1,r0,r5,LSL #3
0000b6  c903              LDM      r1,{r0,r1}
0000b8  e9cd0111          STRD     r0,r1,[sp,#0x44]
0000bc  e9cd0101          STRD     r0,r1,[sp,#4]
0000c0  4608              MOV      r0,r1
0000c2  4912              LDR      r1,|L6.268|
0000c4  eb010660          ADD      r6,r1,r0,ASR #1
0000c8  e9dd0111          LDRD     r0,r1,[sp,#0x44]
0000cc  e9cd0103          STRD     r0,r1,[sp,#0xc]
0000d0  f0010001          AND      r0,r1,#1
0000d4  b920              CBNZ     r0,|L6.224|
0000d6  e9dd0111          LDRD     r0,r1,[sp,#0x44]
0000da  e9cd0105          STRD     r0,r1,[sp,#0x14]
0000de  e006              B        |L6.238|
                  |L6.224|
0000e0  e9dd0111          LDRD     r0,r1,[sp,#0x44]
0000e4  e9cd0107          STRD     r0,r1,[sp,#0x1c]
0000e8  6831              LDR      r1,[r6,#0]
0000ea  1847              ADDS     r7,r0,r1
0000ec  6838              LDR      r0,[r7,#0]
                  |L6.238|
0000ee  4681              MOV      r9,r0
0000f0  4630              MOV      r0,r6
0000f2  47c8              BLX      r9
;;;345        }
0000f4  bf00              NOP      
                  |L6.246|
;;;346    //  }
;;;347    }
0000f6  b013              ADD      sp,sp,#0x4c
0000f8  ecbd8b02          VPOP     {d8}
0000fc  e8bd8ff0          POP      {r4-r11,pc}
;;;348    
                          ENDP

                  |L6.256|
                          DCD      Model
                  |L6.260|
                          DCD      Angles
                  |L6.264|
                          DCD      ||.constdata||+0x8
                  |L6.268|
                          DCD      ||Do||

                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeE||, CODE, READONLY, ALIGN=2

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeE PROC ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)
;;;117    
;;;118    static void process_factory_calib( TModel::TDevType DevType )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;119    {
000004  4604              MOV      r4,r0
;;;120      //допустимая коррекция углов при заводской калибровке ±5°
;;;121      constexpr uint8_t MAX_SAMPLE_CTR = 10U; //из расчета появления новой выборки каждые 300мс
000006  f04f0b0a          MOV      r11,#0xa
;;;122      static uint32_t SampleCtr = 0U;
;;;123      SampleCtr = 0U;
00000a  2000              MOVS     r0,#0
00000c  493d              LDR      r1,|L7.260|
00000e  6008              STR      r0,[r1,#0]  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr
;;;124      
;;;125      static int16_t RollAngles[ MAX_SAMPLE_CTR ]   = {};
;;;126      static int16_t PitchAngles[ MAX_SAMPLE_CTR ]  = {};
;;;127      
;;;128      int16_t *BegR = nullptr;
000010  2500              MOVS     r5,#0
;;;129      int16_t *EndR = nullptr;  
000012  2600              MOVS     r6,#0
;;;130      int16_t *BegP = nullptr;
000014  2700              MOVS     r7,#0
;;;131      int16_t *EndP = nullptr;
000016  4680              MOV      r8,r0
;;;132      
;;;133      do
000018  bf00              NOP      
                  |L7.26|
;;;134      {
;;;135        SampleCtr = 0U;
00001a  2000              MOVS     r0,#0
00001c  4939              LDR      r1,|L7.260|
00001e  6008              STR      r0,[r1,#0]  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr
;;;136        
;;;137        do
000020  bf00              NOP      
                  |L7.34|
;;;138        {
;;;139          xSemaphoreGive( DevMemsStartSem ); //выдать семафор запуска измерений своего МЭМС
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  4619              MOV      r1,r3
000028  4837              LDR      r0,|L7.264|
00002a  6800              LDR      r0,[r0,#0]  ; DevMemsStartSem
00002c  f7fffffe          BL       xQueueGenericSend
;;;140          if ( 
000030  2300              MOVS     r3,#0
000032  f44f72fa          MOV      r2,#0x1f4
000036  4619              MOV      r1,r3
000038  4834              LDR      r0,|L7.268|
00003a  6800              LDR      r0,[r0,#0]  ; MemsDevDoneSem
00003c  f7fffffe          BL       xQueueGenericReceive
000040  b948              CBNZ     r0,|L7.86|
;;;141              xSemaphoreTake( MemsDevDoneSem, pdMS_TO_TICKS( TDevCtrl::__WAITING_MEMS_DEV_DONE_MS ) )                                          
;;;142              == 
;;;143              pdFAIL
;;;144             )
;;;145          {
;;;146            Model.set_base_mems( TModel::TMainState::__ERR );
000042  2100              MOVS     r1,#0
000044  4832              LDR      r0,|L7.272|
000046  f7fffffe          BL       _ZN6TModel13set_base_memsEN9TSettings10TMainStateE ; TModel::set_base_mems(TSettings::TMainState)
;;;147            Model.set_calib_process( TModel::TCalibProcess::__DENY );
00004a  210a              MOVS     r1,#0xa
00004c  4830              LDR      r0,|L7.272|
00004e  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
                  |L7.82|
;;;148            
;;;149            return;
;;;150          }
;;;151          else
;;;152          {
;;;153            Model.set_base_mems( TModel::TMainState::__OK );
;;;154                  
;;;155            Angles.cnt_my_angle( DevType, TModel::TAxisRotate::__0_DEG, false );  //для высчитывания roll
;;;156            int16_t __0_DEG = Model.get_my_angle();
;;;157            
;;;158            Angles.cnt_my_angle( DevType, TModel::TAxisRotate::__90_DEG, false ); //для высчитывания pitch
;;;159            int16_t __90_DEG = Model.get_my_angle();
;;;160            
;;;161            RollAngles[ SampleCtr ]    = __0_DEG;
;;;162            PitchAngles[ SampleCtr++ ] = __90_DEG;       
;;;163          }    
;;;164        } while ( SampleCtr < MAX_SAMPLE_CTR );
;;;165        
;;;166        BegR = &RollAngles[ 0U ];
;;;167        EndR = &RollAngles[ MAX_SAMPLE_CTR ];
;;;168    
;;;169        BegP = &PitchAngles[ 0U ];
;;;170        EndP = &PitchAngles[ MAX_SAMPLE_CTR ];
;;;171      } while (
;;;172               Model.set_roll_bias_angle( cnt_average( BegR, EndR, MAX_SAMPLE_CTR ) ) == false
;;;173               ||
;;;174               Model.set_pitch_bias_angle( cnt_average( BegP, EndP, MAX_SAMPLE_CTR ) ) == false
;;;175              );
;;;176      Model.set_accel_calib_sign( TModel::TIsAccCalib::_ACC_CALIBRATED );
;;;177      Model.set_calib_process( TModel::TCalibProcess::__PERFORMED );
;;;178    }
000052  e8bd8ff8          POP      {r3-r11,pc}
                  |L7.86|
000056  2101              MOVS     r1,#1                 ;153
000058  482d              LDR      r0,|L7.272|
00005a  f7fffffe          BL       _ZN6TModel13set_base_memsEN9TSettings10TMainStateE ; TModel::set_base_mems(TSettings::TMainState)
00005e  2300              MOVS     r3,#0                 ;155
000060  461a              MOV      r2,r3                 ;155
000062  4621              MOV      r1,r4                 ;155
000064  482b              LDR      r0,|L7.276|
000066  f7fffffe          BL       _ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb ; TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
00006a  4829              LDR      r0,|L7.272|
00006c  f7fffffe          BL       _ZN6TModel12get_my_angleEv ; TModel::get_my_angle()
000070  4681              MOV      r9,r0                 ;156
000072  2300              MOVS     r3,#0                 ;158
000074  2201              MOVS     r2,#1                 ;158
000076  4621              MOV      r1,r4                 ;158
000078  4826              LDR      r0,|L7.276|
00007a  f7fffffe          BL       _ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb ; TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
00007e  4824              LDR      r0,|L7.272|
000080  f7fffffe          BL       _ZN6TModel12get_my_angleEv ; TModel::get_my_angle()
000084  4682              MOV      r10,r0                ;159
000086  4824              LDR      r0,|L7.280|
000088  491e              LDR      r1,|L7.260|
00008a  6809              LDR      r1,[r1,#0]            ;161  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr
00008c  f8209011          STRH     r9,[r0,r1,LSL #1]     ;161
000090  481c              LDR      r0,|L7.260|
000092  6801              LDR      r1,[r0,#0]            ;162  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr
000094  6800              LDR      r0,[r0,#0]            ;162  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr
000096  1c40              ADDS     r0,r0,#1              ;162
000098  4a1a              LDR      r2,|L7.260|
00009a  6010              STR      r0,[r2,#0]            ;162  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr
00009c  481f              LDR      r0,|L7.284|
00009e  f820a011          STRH     r10,[r0,r1,LSL #1]    ;162
0000a2  bf00              NOP                            ;163
0000a4  4610              MOV      r0,r2                 ;164
0000a6  6800              LDR      r0,[r0,#0]            ;164  ; _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr
0000a8  280a              CMP      r0,#0xa               ;164
0000aa  d3ba              BCC      |L7.34|
0000ac  4d1a              LDR      r5,|L7.280|
0000ae  f1050614          ADD      r6,r5,#0x14           ;167
0000b2  4f1a              LDR      r7,|L7.284|
0000b4  f1070814          ADD      r8,r7,#0x14           ;170
0000b8  220a              MOVS     r2,#0xa               ;172
0000ba  4631              MOV      r1,r6                 ;172
0000bc  4628              MOV      r0,r5                 ;172
0000be  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h ; [local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)
0000c2  fa4ff980          SXTB     r9,r0                 ;172
0000c6  4649              MOV      r1,r9                 ;172
0000c8  4811              LDR      r0,|L7.272|
0000ca  f7fffffe          BL       _ZN6TModel19set_roll_bias_angleEa ; TModel::set_roll_bias_angle(signed char)
0000ce  2800              CMP      r0,#0                 ;172
0000d0  d0a3              BEQ      |L7.26|
0000d2  220a              MOVS     r2,#0xa               ;174
0000d4  4641              MOV      r1,r8                 ;174
0000d6  4638              MOV      r0,r7                 ;174
0000d8  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h ; [local to dev_ctrl_cpp]::cnt_average(short*, short*, unsigned char)
0000dc  fa4ff980          SXTB     r9,r0                 ;174
0000e0  4649              MOV      r1,r9                 ;174
0000e2  480b              LDR      r0,|L7.272|
0000e4  f7fffffe          BL       _ZN6TModel20set_pitch_bias_angleEa ; TModel::set_pitch_bias_angle(signed char)
0000e8  2800              CMP      r0,#0                 ;174
0000ea  d096              BEQ      |L7.26|
0000ec  2000              MOVS     r0,#0                 ;176
0000ee  4669              MOV      r1,sp                 ;176
0000f0  9000              STR      r0,[sp,#0]            ;176
0000f2  4807              LDR      r0,|L7.272|
0000f4  f7fffffe          BL       _ZN6TModel20set_accel_calib_signERKN9TSettings11TIsAccCalibE ; TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)
0000f8  215a              MOVS     r1,#0x5a              ;177
0000fa  4805              LDR      r0,|L7.272|
0000fc  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
000100  bf00              NOP      
000102  e7a6              B        |L7.82|
;;;179    
                          ENDP

                  |L7.260|
                          DCD      _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)::SampleCtr
                  |L7.264|
                          DCD      DevMemsStartSem
                  |L7.268|
                          DCD      MemsDevDoneSem
                  |L7.272|
                          DCD      Model
                  |L7.276|
                          DCD      Angles
                  |L7.280|
                          DCD      _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE10RollAngles ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)::RollAngles
                  |L7.284|
                          DCD      _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE11PitchAngles ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)::PitchAngles

                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7hc_ctrlEv||, CODE, READONLY, ALIGN=2

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7hc_ctrlEv PROC ; [local to dev_ctrl_cpp]::hc_ctrl()
;;;372    
;;;373    static void hc_ctrl()
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;374    {
000004  b093              SUB      sp,sp,#0x4c
;;;375    //  do {} while ( Model.get_hc_acc_calib() == TModel::TCalib::__UNCALIBRATED  ); //зависание в ожидании калибровки датчика
;;;376      if ( 
000006  4854              LDR      r0,|L8.344|
000008  f7fffffe          BL       _ZN6TModel18get_start_meas_cmdEv ; TModel::get_start_meas_cmd()
00000c  2801              CMP      r0,#1
00000e  d004              BEQ      |L8.26|
;;;377          Model.get_start_meas_cmd() == TModel::TMeas::__START_MEAS //если получена команда на запуск измерений...
;;;378          ||                                                        //...или...
;;;379          Model.get_interconn() == TInterconn::__OTHER_MASTER       //...крышка взаимодействует не с базой
000010  4851              LDR      r0,|L8.344|
000012  f7fffffe          BL       _ZN6TModel13get_interconnEv ; TModel::get_interconn()
000016  2801              CMP      r0,#1
000018  d17e              BNE      |L8.280|
                  |L8.26|
;;;380         )
;;;381      {
;;;382        Model.set_start_meas_cmd( TModel::TMeas::__STOP_MEAS ); //сброс флага до прихода следующего запроса
00001a  2100              MOVS     r1,#0
00001c  484e              LDR      r0,|L8.344|
00001e  f7fffffe          BL       _ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE ; TModel::set_start_meas_cmd(TSettings::TMeas)
;;;383        
;;;384    //    Do.closed();
;;;385        xSemaphoreGive( DevMemsStartSem ); //выдать семафор запуска измерений своего МЭМС
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  4619              MOV      r1,r3
000028  484c              LDR      r0,|L8.348|
00002a  6800              LDR      r0,[r0,#0]  ; DevMemsStartSem
00002c  f7fffffe          BL       xQueueGenericSend
;;;386      
;;;387        
;;;388        if ( 
000030  2300              MOVS     r3,#0
000032  f44f72fa          MOV      r2,#0x1f4
000036  4619              MOV      r1,r3
000038  4849              LDR      r0,|L8.352|
00003a  6800              LDR      r0,[r0,#0]  ; MemsDevDoneSem
00003c  f7fffffe          BL       xQueueGenericReceive
000040  b950              CBNZ     r0,|L8.88|
;;;389            xSemaphoreTake( MemsDevDoneSem, pdMS_TO_TICKS( TDevCtrl::__WAITING_MEMS_DEV_DONE_MS ) )                                          
;;;390            ==
;;;391            pdFAIL
;;;392           )
;;;393        {
;;;394          Model.set_hc_mems( TModel::TMainState::__ERR );               //ошибка МЭМС
000042  2100              MOVS     r1,#0
000044  4844              LDR      r0,|L8.344|
000046  f7fffffe          BL       _ZN6TModel11set_hc_memsEN9TSettings10TMainStateE ; TModel::set_hc_mems(TSettings::TMainState)
;;;395          Model.set_sample_valid_sign( TModel::TValidSign::__INVALID ); //текущее окно выборок невалидно (даже если МЭМС установил окно валидным, \
00004a  2100              MOVS     r1,#0
00004c  4842              LDR      r0,|L8.344|
00004e  f7fffffe          BL       _ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE ; TModel::set_sample_valid_sign(TSettings::TValidSign)
                  |L8.82|
;;;396                                                                          но по каким-то причинам не успел отдать семафор)
;;;397          return;
;;;398        }
;;;399        else
;;;400        {
;;;401          //валидность текущего окна выборок определяется в МЭМС
;;;402          if ( Model.get_sample_valid_sign() == TModel::TValidSign::__INVALID )
;;;403          {
;;;404            //сохраняются предыдущие значения
;;;405          }
;;;406          else
;;;407          {
;;;408            TModel::TAxisRotate AxisRotate = static_cast<TModel::TAxisRotate>(Model.get_axis_rotate());
;;;409            Model.set_hc_mems( TModel::TMainState::__OK);
;;;410            Angles.cnt_my_angle( TModel::TDevType::_HC, AxisRotate, true ); //преобразовать угол датчика в формат ( 0..260, -1..-80 )
;;;411            
;;;412            int16_t OpenAngle = Model.get_my_angle();
;;;413            
;;;414            if (
;;;415                OpenAngle < CONSTS::THR_ERR_OPEN_ANGLE
;;;416                ||
;;;417                (
;;;418                 OpenAngle <= CONSTS::THR_ERR_OPEN_ANGLE + CONSTS::HYST_ERR_OPEN_ANGLE
;;;419                 &&
;;;420                 Model.get_hc_pos_err() == TModel::TPosErr::_POS_ERR
;;;421                )
;;;422               )
;;;423            {
;;;424              Model.set_hc_pos_err( TModel::TPosErr::_POS_ERR );
;;;425              //состояние крышки остается прежним, значение угла обновлено
;;;426            }
;;;427            else
;;;428            {
;;;429              Model.set_hc_pos_err( TModel::TPosErr::_POS_OK );
;;;430              //определить новое состояние
;;;431              uint8_t THR  = CONSTS::THR_SENS_OPEN_ANGLE;
;;;432              uint8_t HYST = CONSTS::HYST_SENS_OPEN_ANGLE;
;;;433              
;;;434              TModel::THC NewState;
;;;435    
;;;436              if (
;;;437                  OpenAngle > THR
;;;438                  ||
;;;439                  (
;;;440                   OpenAngle >= THR - HYST
;;;441                   &&
;;;442                   Model.get_hc_state() == TModel::THC::_OPENED
;;;443                  )
;;;444                 )
;;;445              {
;;;446                NewState = TModel::THC::_OPENED;
;;;447              }
;;;448              else
;;;449              {
;;;450                NewState = TModel::THC::_CLOSED;
;;;451              }
;;;452          
;;;453              Model.set_hc_state( NewState );
;;;454              
;;;455              typedef void (TDiscreteOut::*TFnct)();
;;;456              
;;;457              if ( Model.get_interconn() == TInterconn::__BASE ) //если взаимодействие с базой
;;;458              {
;;;459                Do.open();
;;;460              }
;;;461              else
;;;462              {
;;;463                TFnct Out[ TContact::_N_MAX ][ TModel::THC::_HC_MAX ] =
;;;464                {
;;;465                  {
;;;466                   &TDiscreteOut::open,   //[_N_OPENED][_CLOSED],
;;;467                   &TDiscreteOut::closed, //[_N_OPENED][_OPENED],
;;;468                  },
;;;469                  {
;;;470                   &TDiscreteOut::closed, //[_N_CLOSED][_CLOSED],
;;;471                   &TDiscreteOut::open,   //[_N_CLOSED][_OPENED],
;;;472                  },
;;;473                };
;;;474                
;;;475                ( Do.*Out[ Model.get_d_o_sets() ][ NewState ] )();
;;;476              }
;;;477            }
;;;478          }
;;;479          
;;;480          
;;;481    //      Do.open();
;;;482        }    
;;;483      }
;;;484      else
;;;485      {
;;;486        vTaskDelay( pdMS_TO_TICKS( 3U ) );
;;;487      }
;;;488      
;;;489      
;;;490           
;;;491    //  xTimerStart( CodeSwTmr, 0U );
;;;492    //  
;;;493    //  do
;;;494    //  {
;;;495    //    if ( xSemaphoreTake( MemsWaitStopSem, 0U ) == pdPASS ) //если время ожидания ответа от датчика истекло
;;;496    //    {
;;;497    //      return; //повторная отправка запроса
;;;498    //    }
;;;499    //  }      
;;;500    //  while ( Model.get_start_meas_cmd() != TModel::TMeas::__START_MEAS );
;;;501    //  mems_process();
;;;502    }
000052  b013              ADD      sp,sp,#0x4c
000054  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.88|
000058  483f              LDR      r0,|L8.344|
00005a  f7fffffe          BL       _ZN6TModel21get_sample_valid_signEv ; TModel::get_sample_valid_sign()
00005e  2800              CMP      r0,#0                 ;402
000060  d077              BEQ      |L8.338|
000062  483d              LDR      r0,|L8.344|
000064  f7fffffe          BL       _ZN6TModel15get_axis_rotateEv ; TModel::get_axis_rotate()
000068  4683              MOV      r11,r0                ;408
00006a  2101              MOVS     r1,#1                 ;409
00006c  483a              LDR      r0,|L8.344|
00006e  f7fffffe          BL       _ZN6TModel11set_hc_memsEN9TSettings10TMainStateE ; TModel::set_hc_mems(TSettings::TMainState)
000072  2301              MOVS     r3,#1                 ;410
000074  465a              MOV      r2,r11                ;410
000076  4619              MOV      r1,r3                 ;410
000078  483a              LDR      r0,|L8.356|
00007a  f7fffffe          BL       _ZN7TAngles12cnt_my_angleEN9TSettings8TDevTypeENS0_11TAxisRotateEb ; TAngles::cnt_my_angle(TSettings::TDevType, TSettings::TAxisRotate, bool)
00007e  4836              LDR      r0,|L8.344|
000080  f7fffffe          BL       _ZN6TModel12get_my_angleEv ; TModel::get_my_angle()
000084  4604              MOV      r4,r0                 ;412
000086  f1140f0f          CMN      r4,#0xf               ;414
00008a  db06              BLT      |L8.154|
00008c  f1140f0a          CMN      r4,#0xa               ;418
000090  dc08              BGT      |L8.164|
000092  4831              LDR      r0,|L8.344|
000094  f7fffffe          BL       _ZN6TModel14get_hc_pos_errEv ; TModel::get_hc_pos_err()
000098  b920              CBNZ     r0,|L8.164|
                  |L8.154|
00009a  2100              MOVS     r1,#0                 ;424
00009c  482e              LDR      r0,|L8.344|
00009e  f7fffffe          BL       _ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE ; TModel::set_hc_pos_err(TSettings::TPosErr)
0000a2  e052              B        |L8.330|
                  |L8.164|
0000a4  2101              MOVS     r1,#1                 ;429
0000a6  482c              LDR      r0,|L8.344|
0000a8  f7fffffe          BL       _ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE ; TModel::set_hc_pos_err(TSettings::TPosErr)
0000ac  2646              MOVS     r6,#0x46              ;431
0000ae  f04f090a          MOV      r9,#0xa               ;432
0000b2  42b4              CMP      r4,r6                 ;436
0000b4  dc08              BGT      |L8.200|
0000b6  eba60009          SUB      r0,r6,r9              ;440
0000ba  42a0              CMP      r0,r4                 ;440
0000bc  dc06              BGT      |L8.204|
0000be  4826              LDR      r0,|L8.344|
0000c0  f7fffffe          BL       _ZN6TModel12get_hc_stateEv ; TModel::get_hc_state()
0000c4  2801              CMP      r0,#1                 ;442
0000c6  d101              BNE      |L8.204|
                  |L8.200|
0000c8  2501              MOVS     r5,#1                 ;446
0000ca  e000              B        |L8.206|
                  |L8.204|
0000cc  2500              MOVS     r5,#0                 ;450
                  |L8.206|
0000ce  4629              MOV      r1,r5                 ;453
0000d0  4821              LDR      r0,|L8.344|
0000d2  f7fffffe          BL       _ZN6TModel12set_hc_stateEN9TSettings3THCE ; TModel::set_hc_state(TSettings::THC)
0000d6  4820              LDR      r0,|L8.344|
0000d8  f7fffffe          BL       _ZN6TModel13get_interconnEv ; TModel::get_interconn()
0000dc  b918              CBNZ     r0,|L8.230|
0000de  4822              LDR      r0,|L8.360|
0000e0  f7fffffe          BL       _ZN12TDiscreteOut4openEv ; TDiscreteOut::open()
0000e4  e030              B        |L8.328|
                  |L8.230|
0000e6  2220              MOVS     r2,#0x20              ;463
0000e8  4920              LDR      r1,|L8.364|
0000ea  a809              ADD      r0,sp,#0x24           ;463
0000ec  f7fffffe          BL       __aeabi_memcpy4
0000f0  4819              LDR      r0,|L8.344|
0000f2  f7fffffe          BL       _ZN6TModel12get_d_o_setsEv ; TModel::get_d_o_sets()
0000f6  a909              ADD      r1,sp,#0x24           ;475
0000f8  eb011000          ADD      r0,r1,r0,LSL #4       ;475
0000fc  eb0001c5          ADD      r1,r0,r5,LSL #3       ;475
000100  c903              LDM      r1,{r0,r1}            ;475
000102  e9cd0111          STRD     r0,r1,[sp,#0x44]      ;475
000106  e9cd0101          STRD     r0,r1,[sp,#4]         ;475
00010a  4608              MOV      r0,r1                 ;475
00010c  4916              LDR      r1,|L8.360|
00010e  eb010760          ADD      r7,r1,r0,ASR #1       ;475
000112  e9dd0111          LDRD     r0,r1,[sp,#0x44]      ;475
000116  e000              B        |L8.282|
                  |L8.280|
000118  e018              B        |L8.332|
                  |L8.282|
00011a  e9cd0103          STRD     r0,r1,[sp,#0xc]       ;475
00011e  f0010001          AND      r0,r1,#1              ;475
000122  b920              CBNZ     r0,|L8.302|
000124  e9dd0111          LDRD     r0,r1,[sp,#0x44]      ;475
000128  e9cd0105          STRD     r0,r1,[sp,#0x14]      ;475
00012c  e008              B        |L8.320|
                  |L8.302|
00012e  e9dd0111          LDRD     r0,r1,[sp,#0x44]      ;475
000132  e9cd0107          STRD     r0,r1,[sp,#0x1c]      ;475
000136  6839              LDR      r1,[r7,#0]            ;475
000138  eb000801          ADD      r8,r0,r1              ;475
00013c  f8d80000          LDR      r0,[r8,#0]            ;475
                  |L8.320|
000140  4682              MOV      r10,r0                ;475
000142  4638              MOV      r0,r7                 ;475
000144  47d0              BLX      r10                   ;475
000146  bf00              NOP                            ;476
                  |L8.328|
000148  bf00              NOP                            ;477
                  |L8.330|
00014a  e002              B        |L8.338|
                  |L8.332|
00014c  2003              MOVS     r0,#3                 ;486
00014e  f7fffffe          BL       vTaskDelay
                  |L8.338|
000152  bf00              NOP      
000154  e77d              B        |L8.82|
;;;503    //-------------------------------------------------------------------------------------------------------------------
                          ENDP

000156  0000              DCW      0x0000
                  |L8.344|
                          DCD      Model
                  |L8.348|
                          DCD      DevMemsStartSem
                  |L8.352|
                          DCD      MemsDevDoneSem
                  |L8.356|
                          DCD      Angles
                  |L8.360|
                          DCD      ||Do||
                  |L8.364|
                          DCD      ||.constdata||+0x28

                          AREA ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEv||, CODE, READONLY, ALIGN=2

                  _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEv PROC ; [local to dev_ctrl_cpp]::base_ctrl()
;;;193    
;;;194    static void base_ctrl()
000000  b510              PUSH     {r4,lr}
;;;195    {
;;;196      if (
000002  2300              MOVS     r3,#0
000004  2264              MOVS     r2,#0x64
000006  4619              MOV      r1,r3
000008  482d              LDR      r0,|L9.192|
00000a  6800              LDR      r0,[r0,#0]  ; MemsDevRdySem
00000c  f7fffffe          BL       xQueueGenericReceive
000010  b920              CBNZ     r0,|L9.28|
;;;197          xSemaphoreTake( MemsDevRdySem, pdMS_TO_TICKS( TDevCtrl::__WAITING_MEMS_DEV_RDY_MS ) ) //ожидание семафора готовности измерять от МЭМС
;;;198          == 
;;;199          pdFAIL
;;;200         )
;;;201      {
;;;202        Model.set_base_mems( TModel::TMainState::__ERR );
000012  2100              MOVS     r1,#0
000014  482b              LDR      r0,|L9.196|
000016  f7fffffe          BL       _ZN6TModel13set_base_memsEN9TSettings10TMainStateE ; TModel::set_base_mems(TSettings::TMainState)
                  |L9.26|
;;;203        return;
;;;204      }
;;;205      else
;;;206      {
;;;207    //    Model.set_base_mems( TModel::TMainState::__OK );
;;;208      }
;;;209      
;;;210      Model.set_start_meas_cmd( TModel::TMeas::__START_MEAS );
;;;211      xSemaphoreGive( DevSensStartSem ); //выдать семафор для отправки команды датчику на запуск измерений 
;;;212      if ( sens_dev_stage( &SensDevOkSem, TDevCtrl::__WAITING_SENS_DEV_OK_MS ) == false )
;;;213      {
;;;214        return;
;;;215      }
;;;216      
;;;217    //  Do.closed();
;;;218      xSemaphoreGive( DevMemsStartSem ); //выдать семафор запуска измерений своего МЭМС
;;;219      
;;;220      if ( 
;;;221          xSemaphoreTake( MemsDevDoneSem, pdMS_TO_TICKS( TDevCtrl::__WAITING_MEMS_DEV_DONE_MS ) )                                          
;;;222          == 
;;;223          pdFAIL
;;;224         )
;;;225      {
;;;226        Model.set_base_mems( TModel::TMainState::__ERR );    
;;;227        return;
;;;228      }
;;;229      else
;;;230      {
;;;231        Model.set_base_mems( TModel::TMainState::__OK );
;;;232      }
;;;233      
;;;234      xSemaphoreGive( DevSensResSem ); //выдать семафор на запрос результатов измерений МЭМС на плате датчика
;;;235      if ( sens_dev_stage( &SensDevResSem, TDevCtrl::__WAITING_SENS_DEV_RES_MS ) == false )
;;;236      {
;;;237        return;
;;;238      }
;;;239    //  Do.open();
;;;240    	
;;;241      static uint8_t GoodCtr = 0U;
;;;242      
;;;243      if (                                                                   //проверка валидности текущего окна выборок для базы и крышки
;;;244          Model.get_sample_valid_sign() == TModel::TValidSign::__INVALID
;;;245          ||
;;;246          Model.get_sens_sample_valid_sign() == TModel::TValidSign::__INVALID
;;;247         )
;;;248      {
;;;249        //сохраняются предыдущие значения
;;;250        GoodCtr = 0U;
;;;251      }
;;;252      else 
;;;253      {
;;;254        open_angle_ctrl( &GoodCtr );
;;;255      }
;;;256    
;;;257      //выдать семафор задаче логгера для записи очередной точки
;;;258    	xSemaphoreGive( WrFlash );
;;;259      
;;;260    }
00001a  bd10              POP      {r4,pc}
                  |L9.28|
00001c  2101              MOVS     r1,#1                 ;210
00001e  4829              LDR      r0,|L9.196|
000020  f7fffffe          BL       _ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE ; TModel::set_start_meas_cmd(TSettings::TMeas)
000024  2300              MOVS     r3,#0                 ;211
000026  461a              MOV      r2,r3                 ;211
000028  4619              MOV      r1,r3                 ;211
00002a  4827              LDR      r0,|L9.200|
00002c  6800              LDR      r0,[r0,#0]            ;211  ; DevSensStartSem
00002e  f7fffffe          BL       xQueueGenericSend
000032  f44f7196          MOV      r1,#0x12c             ;212
000036  4825              LDR      r0,|L9.204|
000038  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl14sens_dev_stageEPKPvj ; [local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned)
00003c  b900              CBNZ     r0,|L9.64|
00003e  e7ec              B        |L9.26|
                  |L9.64|
000040  2300              MOVS     r3,#0                 ;218
000042  461a              MOV      r2,r3                 ;218
000044  4619              MOV      r1,r3                 ;218
000046  4822              LDR      r0,|L9.208|
000048  6800              LDR      r0,[r0,#0]            ;218  ; DevMemsStartSem
00004a  f7fffffe          BL       xQueueGenericSend
00004e  2300              MOVS     r3,#0                 ;220
000050  f44f72fa          MOV      r2,#0x1f4             ;220
000054  4619              MOV      r1,r3                 ;220
000056  481f              LDR      r0,|L9.212|
000058  6800              LDR      r0,[r0,#0]            ;220  ; MemsDevDoneSem
00005a  f7fffffe          BL       xQueueGenericReceive
00005e  b920              CBNZ     r0,|L9.106|
000060  2100              MOVS     r1,#0                 ;226
000062  4818              LDR      r0,|L9.196|
000064  f7fffffe          BL       _ZN6TModel13set_base_memsEN9TSettings10TMainStateE ; TModel::set_base_mems(TSettings::TMainState)
000068  e7d7              B        |L9.26|
                  |L9.106|
00006a  2101              MOVS     r1,#1                 ;231
00006c  4815              LDR      r0,|L9.196|
00006e  f7fffffe          BL       _ZN6TModel13set_base_memsEN9TSettings10TMainStateE ; TModel::set_base_mems(TSettings::TMainState)
000072  2300              MOVS     r3,#0                 ;234
000074  461a              MOV      r2,r3                 ;234
000076  4619              MOV      r1,r3                 ;234
000078  4817              LDR      r0,|L9.216|
00007a  6800              LDR      r0,[r0,#0]            ;234  ; DevSensResSem
00007c  f7fffffe          BL       xQueueGenericSend
000080  f44f7196          MOV      r1,#0x12c             ;235
000084  4815              LDR      r0,|L9.220|
000086  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl14sens_dev_stageEPKPvj ; [local to dev_ctrl_cpp]::sens_dev_stage(void*const *, unsigned)
00008a  b900              CBNZ     r0,|L9.142|
00008c  e7c5              B        |L9.26|
                  |L9.142|
00008e  480d              LDR      r0,|L9.196|
000090  f7fffffe          BL       _ZN6TModel21get_sample_valid_signEv ; TModel::get_sample_valid_sign()
000094  b118              CBZ      r0,|L9.158|
000096  480b              LDR      r0,|L9.196|
000098  f7fffffe          BL       _ZN6TModel26get_sens_sample_valid_signEv ; TModel::get_sens_sample_valid_sign()
00009c  b918              CBNZ     r0,|L9.166|
                  |L9.158|
00009e  2000              MOVS     r0,#0                 ;250
0000a0  490f              LDR      r1,|L9.224|
0000a2  7008              STRB     r0,[r1,#0]            ;250
0000a4  e002              B        |L9.172|
                  |L9.166|
0000a6  480e              LDR      r0,|L9.224|
0000a8  f7fffffe          BL       _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl15open_angle_ctrlEPh ; [local to dev_ctrl_cpp]::open_angle_ctrl(unsigned char*)
                  |L9.172|
0000ac  2300              MOVS     r3,#0                 ;258
0000ae  461a              MOV      r2,r3                 ;258
0000b0  4619              MOV      r1,r3                 ;258
0000b2  480c              LDR      r0,|L9.228|
0000b4  6800              LDR      r0,[r0,#0]            ;258  ; WrFlash
0000b6  f7fffffe          BL       xQueueGenericSend
0000ba  bf00              NOP      
0000bc  e7ad              B        |L9.26|
;;;261    
                          ENDP

0000be  0000              DCW      0x0000
                  |L9.192|
                          DCD      MemsDevRdySem
                  |L9.196|
                          DCD      Model
                  |L9.200|
                          DCD      DevSensStartSem
                  |L9.204|
                          DCD      SensDevOkSem
                  |L9.208|
                          DCD      DevMemsStartSem
                  |L9.212|
                          DCD      MemsDevDoneSem
                  |L9.216|
                          DCD      DevSensResSem
                  |L9.220|
                          DCD      SensDevResSem
                  |L9.224|
                          DCD      _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEvE7GoodCtr ; [local to dev_ctrl_cpp]::base_ctrl()::GoodCtr
                  |L9.228|
                          DCD      WrFlash

                          AREA ||i._ZN8TDevCtrlC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN8TDevCtrlC2Ev                  ; Alternate entry point ; TDevCtrl::TDevCtrl__sub_object()
                  _ZN8TDevCtrlC1Ev PROC ; TDevCtrl::TDevCtrl()
;;;10     
;;;11     TDevCtrl::TDevCtrl()
;;;12     :
;;;13     SensDevCtr( { 0U, __SENS_DEV_OK_QTY } )
;;;14     {
;;;15     
;;;16     }
;;;17     
000000  4901              LDR      r1,|L10.8|
000002  8809              LDRH     r1,[r1,#0]  ; <Data1>
000004  8001              STRH     r1,[r0,#0]
000006  4770              BX       lr
                          ENDP

                  |L10.8|
                          DCD      ||<Data1>||

                          AREA ||i._ZN8TDevCtrlD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN8TDevCtrlD2Ev                  ; Alternate entry point ; TDevCtrl::~TDevCtrl__sub_object()
                  _ZN8TDevCtrlD1Ev PROC ; TDevCtrl::~TDevCtrl()
;;;17     
;;;18     TDevCtrl::~TDevCtrl()
;;;19     {
;;;20     
;;;21     }
;;;22     
000000  4770              BX       lr
                          ENDP


                          AREA ||i.__sti___12_dev_ctrl_cpp_DevCtrl||, CODE, READONLY, ALIGN=2

                  __sti___12_dev_ctrl_cpp_DevCtrl PROC
000000  b510              PUSH     {r4,lr}
000002  4804              LDR      r0,|L12.20|
000004  f7fffffe          BL       _ZN8TDevCtrlC1Ev ; TDevCtrl::TDevCtrl()
000008  4604              MOV      r4,r0
00000a  4a03              LDR      r2,|L12.24|
00000c  4903              LDR      r1,|L12.28|
00000e  f7fffffe          BL       __aeabi_atexit
000012  bd10              POP      {r4,pc}
                          ENDP

                  |L12.20|
                          DCD      DevCtrl
                  |L12.24|
                          DCD      __dso_handle
                  |L12.28|
                          DCD      _ZN8TDevCtrlD1Ev ; TDevCtrl::~TDevCtrl()

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl11cnt_averageEPsS0_h||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeE||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl13factory_calibEN9TSettings8TDevTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl13factory_calibEN9TSettings8TDevTypeE||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._Z8dev_ctrlPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8dev_ctrlPv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEs||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl15open_angle_ctrlEPh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl15open_angle_ctrlEPh||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl14sens_dev_stageEPKPvj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl14sens_dev_stageEPKPvj||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEv||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7hc_ctrlEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7hc_ctrlEv||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._ZN8TDevCtrlC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8TDevCtrlC1Ev||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN8TDevCtrlD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8TDevCtrlD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i.__sti___12_dev_ctrl_cpp_DevCtrl||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___12_dev_ctrl_cpp_DevCtrl||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE10OpenAngles ; [local to dev_ctrl_cpp]::user_calib(short)::OpenAngles
                          %        40
                  _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE10RollAngles ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)::RollAngles
                          %        20
                  _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE11PitchAngles ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)::PitchAngles
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEv ; [local to dev_ctrl_cpp]::base_ctrl()
                          DCD      _ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7hc_ctrlEv ; [local to dev_ctrl_cpp]::hc_ctrl()
                          DCD      _ZN12TDiscreteOut4openEv ; TDiscreteOut::open()
                          DCD      0x00000000
                          DCD      _ZN12TDiscreteOut6closedEv ; TDiscreteOut::closed()
                          DCD      0x00000000
                          DCD      _ZN12TDiscreteOut6closedEv ; TDiscreteOut::closed()
                          DCD      0x00000000
                          DCD      _ZN12TDiscreteOut4openEv ; TDiscreteOut::open()
                          DCD      0x00000000
                          DCD      _ZN12TDiscreteOut4openEv ; TDiscreteOut::open()
                          DCD      0x00000000
                          DCD      _ZN12TDiscreteOut6closedEv ; TDiscreteOut::closed()
                          DCD      0x00000000
                          DCD      _ZN12TDiscreteOut6closedEv ; TDiscreteOut::closed()
                          DCD      0x00000000
                          DCD      _ZN12TDiscreteOut4openEv ; TDiscreteOut::open()
                          DCD      0x00000000
                  ||<Data1>||
000048  0006              DCB      0x00,0x06

                          AREA ||.data||, DATA, ALIGN=2

                  DevCtrl
000000  0000              DCB      0x00,0x00
                  _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE12CalibProcess ; [local to dev_ctrl_cpp]::user_calib(short)::CalibProcess
000002  00                DCB      0x00
                  _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl10user_calibEsE8CalibCtr ; [local to dev_ctrl_cpp]::user_calib(short)::CalibCtr
000003  00                DCB      0x00
                  _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl21process_factory_calibEN9TSettings8TDevTypeEE9SampleCtr ; [local to dev_ctrl_cpp]::process_factory_calib(TSettings::TDevType)::SampleCtr
                          DCD      0x00000000
                  _ZZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl9base_ctrlEvE7GoodCtr ; [local to dev_ctrl_cpp]::base_ctrl()::GoodCtr
000008  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___12_dev_ctrl_cpp_DevCtrl

;*** Start embedded assembler ***

#line 1 "Source\\Tasks\\src\\dev_ctrl.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_dev_ctrl_cpp_DevCtrl___ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___12_dev_ctrl_cpp_DevCtrl___ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_dev_ctrl_cpp_DevCtrl___ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7__REVSHEi|
#line 402
|__asm___12_dev_ctrl_cpp_DevCtrl___ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl7__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_dev_ctrl_cpp_DevCtrl___ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl5__RRXEj|
#line 587
|__asm___12_dev_ctrl_cpp_DevCtrl___ZN33_INTERNAL_12_dev_ctrl_cpp_DevCtrl5__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
