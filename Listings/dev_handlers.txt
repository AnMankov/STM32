; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\dev_handlers.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\dev_handlers.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\dev_handlers.crf Source\Protocols\src\dev_handlers.cpp]
                          THUMB

                          AREA ||i._ZN12TDevHandlers10chk_accessEPv||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers10chk_accessEPv PROC ; TDevHandlers::chk_access(void*)
;;;1019   
;;;1020   bool TDevHandlers::chk_access( void *param_ptr )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1021   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;1022     bool Res = false;
000008  2700              MOVS     r7,#0
;;;1023     
;;;1024     TModel::TAccess Cur = Model.get_access();
00000a  4806              LDR      r0,|L1.36|
00000c  f7fffffe          BL       _ZN6TModel10get_accessEv ; TModel::get_access()
000010  4605              MOV      r5,r0
;;;1025     TModel::TAccess Need = *reinterpret_cast< TModel::TAccess * >( param_ptr );
000012  7826              LDRB     r6,[r4,#0]
;;;1026     
;;;1027     return ( Cur >= Need );
000014  42b5              CMP      r5,r6
000016  db02              BLT      |L1.30|
000018  2001              MOVS     r0,#1
                  |L1.26|
;;;1028   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;1027
000020  e7fb              B        |L1.26|
;;;1029   //------------------------------------------------------------------------------------------------
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers10read_calibEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers10read_calibEj PROC ; TDevHandlers::read_calib(unsigned)
;;;751    
;;;752    bool TDevHandlers::read_calib( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;753    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;754      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;755      
;;;756      *ptr = Model.get_acc_calib();  
000008  4802              LDR      r0,|L2.20|
00000a  f7fffffe          BL       _ZN6TModel13get_acc_calibEv ; TModel::get_acc_calib()
00000e  7028              STRB     r0,[r5,#0]
;;;757      
;;;758      return true;
000010  2001              MOVS     r0,#1
;;;759    }
000012  bd70              POP      {r4-r6,pc}
;;;760    
                          ENDP

                  |L2.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers10read_stateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers10read_stateEj PROC ; TDevHandlers::read_state(unsigned)
;;;883    
;;;884    bool TDevHandlers::read_state( uint32_t Addr ) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;885    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;886      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000008  462f              MOV      r7,r5
;;;887      
;;;888      uint32_t Bits = 0U; //то, что расписываем по битам
00000a  2600              MOVS     r6,#0
;;;889      uint8_t Tmp = Model.get_dev_state();
00000c  480a              LDR      r0,|L3.56|
00000e  f7fffffe          BL       _ZN6TModel13get_dev_stateEv ; TModel::get_dev_state()
000012  4604              MOV      r4,r0
;;;890      
;;;891      for ( uint32_t Mul = 1U; Tmp > 0U && Mul <= 1000U; Mul *= 10U, Tmp /= 2U )
000014  2001              MOVS     r0,#1
000016  e007              B        |L3.40|
                  |L3.24|
;;;892      {
;;;893        if ( Tmp % 2U == true ) //если число нечетное
000018  f0040101          AND      r1,r4,#1
00001c  b101              CBZ      r1,|L3.32|
;;;894        {
;;;895          Bits += Mul;
00001e  4406              ADD      r6,r6,r0
                  |L3.32|
000020  eb000180          ADD      r1,r0,r0,LSL #2       ;891
000024  0048              LSLS     r0,r1,#1              ;891
000026  0864              LSRS     r4,r4,#1              ;891
                  |L3.40|
000028  b114              CBZ      r4,|L3.48|
00002a  f5b07f7a          CMP      r0,#0x3e8             ;891
00002e  d9f3              BLS      |L3.24|
                  |L3.48|
;;;896        }
;;;897        else
;;;898        {
;;;899        
;;;900        }
;;;901      }
;;;902      
;;;903      *ptr = Bits;
000030  803e              STRH     r6,[r7,#0]
;;;904      
;;;905      return true;
000032  2001              MOVS     r0,#1
;;;906    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;907    
                          ENDP

                  |L3.56|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers10read_u_parEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers10read_u_parEj PROC ; TDevHandlers::read_u_par(unsigned)
;;;490    
;;;491    bool TDevHandlers::read_u_par( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;492    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;493      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;494      
;;;495      *ptr = Model.get_u_par();
000008  4802              LDR      r0,|L4.20|
00000a  f7fffffe          BL       _ZN6TModel9get_u_parEv ; TModel::get_u_par()
00000e  8028              STRH     r0,[r5,#0]
;;;496      
;;;497      return true;
000010  2001              MOVS     r0,#1
;;;498    }
000012  bd70              POP      {r4-r6,pc}
;;;499    
                          ENDP

                  |L4.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers10write_biasEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers10write_biasEj PROC ; TDevHandlers::write_bias(unsigned)
;;;451    
;;;452    bool TDevHandlers::write_bias( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;453    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;454      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;455      
;;;456      return Model.set_bias( Val );
00000a  b269              SXTB     r1,r5
00000c  4801              LDR      r0,|L5.20|
00000e  f7fffffe          BL       _ZN6TModel8set_biasEa ; TModel::set_bias(signed char)
;;;457    }
000012  bd70              POP      {r4-r6,pc}
;;;458    
                          ENDP

                  |L5.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers10write_hystEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers10write_hystEj PROC ; TDevHandlers::write_hyst(unsigned)
;;;435    
;;;436    bool TDevHandlers::write_hyst( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;437    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;438      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;439      
;;;440      return Model.set_hyst( Val );
00000a  b2e9              UXTB     r1,r5
00000c  4801              LDR      r0,|L6.20|
00000e  f7fffffe          BL       _ZN6TModel8set_hystEh ; TModel::set_hyst(unsigned char)
;;;441    }
000012  bd70              POP      {r4-r6,pc}
;;;442    
                          ENDP

                  |L6.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers11rdi_placeboEj||, CODE, READONLY, ALIGN=1

                  _ZN12TDevHandlers11rdi_placeboEj PROC ; TDevHandlers::rdi_placebo(unsigned)
;;;285    
;;;286    bool TDevHandlers::rdi_placebo( uint32_t Addr )
000000  4603              MOV      r3,r0
;;;287    {
;;;288      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000002  460a              MOV      r2,r1
;;;289      
;;;290      *ptr = 0U;  
000004  2000              MOVS     r0,#0
000006  7010              STRB     r0,[r2,#0]
;;;291      
;;;292      return true;
000008  2001              MOVS     r0,#1
;;;293    }
00000a  4770              BX       lr
;;;294    
                          ENDP


                          AREA ||i._ZN12TDevHandlers11write_u_parEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers11write_u_parEj PROC ; TDevHandlers::write_u_par(unsigned)
;;;499    
;;;500    bool TDevHandlers::write_u_par( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;501    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;502      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;503      
;;;504      return Model.set_u_par( Val );
00000a  b2e9              UXTB     r1,r5
00000c  4801              LDR      r0,|L8.20|
00000e  f7fffffe          BL       _ZN6TModel9set_u_parEh ; TModel::set_u_par(unsigned char)
;;;505    }
000012  bd70              POP      {r4-r6,pc}
;;;506    
                          ENDP

                  |L8.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers12read_code_swEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers12read_code_swEj PROC ; TDevHandlers::read_code_sw(unsigned)
;;;321    
;;;322    bool TDevHandlers::read_code_sw( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;323    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;324      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;325      
;;;326      *ptr = Model.get_code_sw();
000008  4802              LDR      r0,|L9.20|
00000a  f7fffffe          BL       _ZN6TModel11get_code_swEv ; TModel::get_code_sw()
00000e  8028              STRH     r0,[r5,#0]
;;;327      
;;;328      return true;
000010  2001              MOVS     r0,#1
;;;329    }
000012  bd70              POP      {r4-r6,pc}
;;;330    
                          ENDP

                  |L9.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers12read_connectEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers12read_connectEj PROC ; TDevHandlers::read_connect(unsigned)
;;;258    
;;;259    bool TDevHandlers::read_connect( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;261      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;262      
;;;263      *ptr = Model.get_connect();  
000008  4802              LDR      r0,|L10.20|
00000a  f7fffffe          BL       _ZN6TModel11get_connectEv ; TModel::get_connect()
00000e  7028              STRB     r0,[r5,#0]
;;;264      
;;;265      return true;
000010  2001              MOVS     r0,#1
;;;266    }
000012  bd70              POP      {r4-r6,pc}
;;;267    
                          ENDP

                  |L10.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers12read_hc_memsEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers12read_hc_memsEj PROC ; TDevHandlers::read_hc_mems(unsigned)
;;;303    
;;;304    bool TDevHandlers::read_hc_mems( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;305    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;306      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;307      
;;;308      *ptr = Model.get_hc_mems();  
000008  4802              LDR      r0,|L11.20|
00000a  f7fffffe          BL       _ZN6TModel11get_hc_memsEv ; TModel::get_hc_mems()
00000e  7028              STRB     r0,[r5,#0]
;;;309      
;;;310      return true;
000010  2001              MOVS     r0,#1
;;;311    }
000012  bd70              POP      {r4-r6,pc}
;;;312    
                          ENDP

                  |L11.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers12read_mb_addrEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers12read_mb_addrEj PROC ; TDevHandlers::read_mb_addr(unsigned)
;;;506    
;;;507    bool TDevHandlers::read_mb_addr( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;508    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;509      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;510      
;;;511      *ptr = Model.get_mb_addr();
000008  4802              LDR      r0,|L12.20|
00000a  f7fffffe          BL       _ZN6TModel11get_mb_addrEv ; TModel::get_mb_addr()
00000e  8028              STRH     r0,[r5,#0]
;;;512      
;;;513      return true;
000010  2001              MOVS     r0,#1
;;;514    }
000012  bd70              POP      {r4-r6,pc}
;;;515    
                          ENDP

                  |L12.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers13read_my_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers13read_my_angleEj PROC ; TDevHandlers::read_my_angle(unsigned)
;;;697    //------------------------------------------------------------------------------
;;;698    bool TDevHandlers::read_my_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;699    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;700      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;701      
;;;702      *ptr = Model.get_my_angle();
000008  4802              LDR      r0,|L13.20|
00000a  f7fffffe          BL       _ZN6TModel12get_my_angleEv ; TModel::get_my_angle()
00000e  8028              STRH     r0,[r5,#0]
;;;703      
;;;704      return true;
000010  2001              MOVS     r0,#1
;;;705    }
000012  bd70              POP      {r4-r6,pc}
;;;706    
                          ENDP

                  |L13.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers13read_prog_nbrEj||, CODE, READONLY, ALIGN=1

                  _ZN12TDevHandlers13read_prog_nbrEj PROC ; TDevHandlers::read_prog_nbr(unsigned)
;;;522    
;;;523    bool TDevHandlers::read_prog_nbr( uint32_t Addr )
000000  4603              MOV      r3,r0
;;;524    {
;;;525      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000002  460a              MOV      r2,r1
;;;526      
;;;527      *ptr = __PROG_VERSION >> 16U;
000004  f64f4001          MOV      r0,#0xfc01
000008  8010              STRH     r0,[r2,#0]
;;;528      
;;;529      return true;
00000a  2001              MOVS     r0,#1
;;;530    }
00000c  4770              BX       lr
;;;531    
                          ENDP


                          AREA ||i._ZN12TDevHandlers13write_mb_addrEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers13write_mb_addrEj PROC ; TDevHandlers::write_mb_addr(unsigned)
;;;515    
;;;516    bool TDevHandlers::write_mb_addr( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;517    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;518      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;519      
;;;520      return Model.set_mb_addr( Val );
00000a  4629              MOV      r1,r5
00000c  4801              LDR      r0,|L15.20|
00000e  f7fffffe          BL       _ZN6TModel11set_mb_addrEs ; TModel::set_mb_addr(short)
;;;521    }
000012  bd70              POP      {r4-r6,pc}
;;;522    
                          ENDP

                  |L15.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers14read_base_memsEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers14read_base_memsEj PROC ; TDevHandlers::read_base_mems(unsigned)
;;;294    
;;;295    bool TDevHandlers::read_base_mems( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;296    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;297      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;298      
;;;299      *ptr = Model.get_base_mems();  
000008  4802              LDR      r0,|L16.20|
00000a  f7fffffe          BL       _ZN6TModel13get_base_memsEv ; TModel::get_base_mems()
00000e  7028              STRB     r0,[r5,#0]
;;;300      
;;;301      return true;
000010  2001              MOVS     r0,#1
;;;302    }
000012  bd70              POP      {r4-r6,pc}
;;;303    
                          ENDP

                  |L16.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers14read_interconnEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers14read_interconnEj PROC ; TDevHandlers::read_interconn(unsigned)
;;;387    
;;;388    bool TDevHandlers::read_interconn( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;389    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;390      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;391      
;;;392      *ptr = Model.get_interconn();  
000008  4802              LDR      r0,|L17.20|
00000a  f7fffffe          BL       _ZN6TModel13get_interconnEv ; TModel::get_interconn()
00000e  7028              STRB     r0,[r5,#0]
;;;393      
;;;394      return true;
000010  2001              MOVS     r0,#1
;;;395    }
000012  bd70              POP      {r4-r6,pc}
;;;396    
                          ENDP

                  |L17.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers15read_hc_pos_errEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers15read_hc_pos_errEj PROC ; TDevHandlers::read_hc_pos_err(unsigned)
;;;276    
;;;277    bool TDevHandlers::read_hc_pos_err( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;278    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;279      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;280      
;;;281      *ptr = Model.get_hc_pos_err();  
000008  4802              LDR      r0,|L18.20|
00000a  f7fffffe          BL       _ZN6TModel14get_hc_pos_errEv ; TModel::get_hc_pos_err()
00000e  7028              STRB     r0,[r5,#0]
;;;282      
;;;283      return true;
000010  2001              MOVS     r0,#1
;;;284    }
000012  bd70              POP      {r4-r6,pc}
;;;285    
                          ENDP

                  |L18.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers15read_open_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers15read_open_angleEj PROC ; TDevHandlers::read_open_angle(unsigned)
;;;312    
;;;313    bool TDevHandlers::read_open_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;314    {
000002  ed2d8b02          VPUSH    {d8}
000006  4606              MOV      r6,r0
000008  460c              MOV      r4,r1
;;;315      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
00000a  4625              MOV      r5,r4
;;;316      
;;;317      *ptr = roundf( Model.get_open_angle() );
00000c  4808              LDR      r0,|L19.48|
00000e  f7fffffe          BL       _ZN6TModel14get_open_angleEv ; TModel::get_open_angle()
000012  eeb08a40          VMOV.F32 s16,s0
000016  f7fffffe          BL       __hardfp_roundf
00001a  eebd0ac0          VCVT.S32.F32 s0,s0
00001e  ee100a10          VMOV     r0,s0
000022  b200              SXTH     r0,r0
000024  8028              STRH     r0,[r5,#0]
;;;318      
;;;319      return true;
000026  2001              MOVS     r0,#1
;;;320    }
000028  ecbd8b02          VPOP     {d8}
00002c  bd70              POP      {r4-r6,pc}
;;;321    
                          ENDP

00002e  0000              DCW      0x0000
                  |L19.48|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers15read_sens_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers15read_sens_angleEj PROC ; TDevHandlers::read_sens_angle(unsigned)
;;;706    
;;;707    bool TDevHandlers::read_sens_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;708    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;709      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;710      
;;;711      *ptr = Model.get_sens_angle();
000008  4802              LDR      r0,|L20.20|
00000a  f7fffffe          BL       _ZN6TModel14get_sens_angleEv ; TModel::get_sens_angle()
00000e  8028              STRH     r0,[r5,#0]
;;;712      
;;;713      return true;
000010  2001              MOVS     r0,#1
;;;714    }
000012  bd70              POP      {r4-r6,pc}
;;;715    
                          ENDP

                  |L20.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers15read_sens_calibEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers15read_sens_calibEj PROC ; TDevHandlers::read_sens_calib(unsigned)
;;;760    
;;;761    bool TDevHandlers::read_sens_calib( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;762    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;763      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;764      
;;;765      *ptr = Model.get_hc_acc_calib();  
000008  4802              LDR      r0,|L21.20|
00000a  f7fffffe          BL       _ZN6TModel16get_hc_acc_calibEv ; TModel::get_hc_acc_calib()
00000e  7028              STRB     r0,[r5,#0]
;;;766      
;;;767      return true;
000010  2001              MOVS     r0,#1
;;;768    }
000012  bd70              POP      {r4-r6,pc}
;;;769    
                          ENDP

                  |L21.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers15write_interconnEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers15write_interconnEj PROC ; TDevHandlers::write_interconn(unsigned)
;;;396    
;;;397    bool TDevHandlers::write_interconn( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;398    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;399      //проверка входных данных на допустимость не нужна - это делает прикладная часть протокола
;;;400      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;401    
;;;402      Model.set_interconn(
00000a  b10d              CBZ      r5,|L22.16|
;;;403                          (Val == 0x0000) 
;;;404                          ? TInterconn::__BASE
;;;405                          : TInterconn::__OTHER_MASTER 
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L22.18|
                  |L22.16|
000010  2000              MOVS     r0,#0                 ;404
                  |L22.18|
000012  4601              MOV      r1,r0                 ;404
000014  4802              LDR      r0,|L22.32|
000016  f7fffffe          BL       _ZN6TModel13set_interconnE10TInterconn ; TModel::set_interconn(TInterconn)
;;;406                         );
;;;407    
;;;408      return true;
00001a  2001              MOVS     r0,#1
;;;409    }
00001c  bd70              POP      {r4-r6,pc}
;;;410    
                          ENDP

00001e  0000              DCW      0x0000
                  |L22.32|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers16read_adm_pswd_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers16read_adm_pswd_hiEj PROC ; TDevHandlers::read_adm_pswd_hi(unsigned)
;;;549    
;;;550    bool TDevHandlers::read_adm_pswd_hi( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;551    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;552      float Data = Model.get_psw_admin();
000006  4805              LDR      r0,|L23.28|
000008  f7fffffe          BL       _ZN6TModel13get_psw_adminEv ; TModel::get_psw_admin()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;553      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;554      
;;;555      *ptr = ((TFourBytesParse *)&Data)->Segment.Hi;
000012  f8bd0002          LDRH     r0,[sp,#2]
000016  8028              STRH     r0,[r5,#0]
;;;556      
;;;557      return true;
000018  2001              MOVS     r0,#1
;;;558    }
00001a  bdf8              POP      {r3-r7,pc}
;;;559    
                          ENDP

                  |L23.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers16read_adm_pswd_loEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers16read_adm_pswd_loEj PROC ; TDevHandlers::read_adm_pswd_lo(unsigned)
;;;532    //----- Float - параметры ------------------------------------------------------
;;;533    bool TDevHandlers::read_adm_pswd_lo( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;534    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;535      float Data = Model.get_psw_admin();
000006  4805              LDR      r0,|L24.28|
000008  f7fffffe          BL       _ZN6TModel13get_psw_adminEv ; TModel::get_psw_admin()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;536      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;537      
;;;538      *ptr = ((TFourBytesParse *)&Data)->Segment.Lo;
000012  f8bd0000          LDRH     r0,[sp,#0]
000016  8028              STRH     r0,[r5,#0]
;;;539      
;;;540      return true;
000018  2001              MOVS     r0,#1
;;;541    }
00001a  bdf8              POP      {r3-r7,pc}
;;;542    
                          ENDP

                  |L24.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers16read_axis_rotateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers16read_axis_rotateEj PROC ; TDevHandlers::read_axis_rotate(unsigned)
;;;458    
;;;459    bool TDevHandlers::read_axis_rotate( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;460    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;461      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;462      
;;;463      *ptr = Model.get_axis_rotate();
000008  4802              LDR      r0,|L25.20|
00000a  f7fffffe          BL       _ZN6TModel15get_axis_rotateEv ; TModel::get_axis_rotate()
00000e  8028              STRH     r0,[r5,#0]
;;;464      
;;;465      return true;
000010  2001              MOVS     r0,#1
;;;466    }
000012  bd70              POP      {r4-r6,pc}
;;;467    
                          ENDP

                  |L25.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers16read_u_baud_rateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers16read_u_baud_rateEj PROC ; TDevHandlers::read_u_baud_rate(unsigned)
;;;474    
;;;475    bool TDevHandlers::read_u_baud_rate( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;476    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;477      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;478      
;;;479      *ptr = Model.get_u_baud_rate();
000008  4802              LDR      r0,|L26.20|
00000a  f7fffffe          BL       _ZN6TModel15get_u_baud_rateEv ; TModel::get_u_baud_rate()
00000e  8028              STRH     r0,[r5,#0]
;;;480      
;;;481      return true;
000010  2001              MOVS     r0,#1
;;;482    }
000012  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

                  |L26.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers17read_base_pos_errEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers17read_base_pos_errEj PROC ; TDevHandlers::read_base_pos_err(unsigned)
;;;249    
;;;250    bool TDevHandlers::read_base_pos_err( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;251    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;252      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;253      
;;;254      *ptr = Model.get_base_pos_err();  
000008  4802              LDR      r0,|L27.20|
00000a  f7fffffe          BL       _ZN6TModel16get_base_pos_errEv ; TModel::get_base_pos_err()
00000e  7028              STRB     r0,[r5,#0]
;;;255      
;;;256      return true;
000010  2001              MOVS     r0,#1
;;;257    }
000012  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP

                  |L27.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers17read_parameter_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers17read_parameter_hiEj PROC ; TDevHandlers::read_parameter_hi(unsigned)
;;;656    
;;;657    bool TDevHandlers::read_parameter_hi( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;658    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;659      float Data = Model.get_calib_parameter();
000006  4805              LDR      r0,|L28.28|
000008  f7fffffe          BL       _ZN6TModel19get_calib_parameterEv ; TModel::get_calib_parameter()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;660      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;661      
;;;662      *ptr = ((TFourBytesParse *)&Data)->Segment.Hi;
000012  f8bd0002          LDRH     r0,[sp,#2]
000016  8028              STRH     r0,[r5,#0]
;;;663      
;;;664      return true;
000018  2001              MOVS     r0,#1
;;;665    }
00001a  bdf8              POP      {r3-r7,pc}
;;;666    
                          ENDP

                  |L28.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers17read_parameter_loEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers17read_parameter_loEj PROC ; TDevHandlers::read_parameter_lo(unsigned)
;;;639    
;;;640    bool TDevHandlers::read_parameter_lo( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;641    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;642      float Data = Model.get_calib_parameter();
000006  4805              LDR      r0,|L29.28|
000008  f7fffffe          BL       _ZN6TModel19get_calib_parameterEv ; TModel::get_calib_parameter()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;643      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;644      
;;;645      *ptr = ((TFourBytesParse *)&Data)->Segment.Lo;
000012  f8bd0000          LDRH     r0,[sp,#0]
000016  8028              STRH     r0,[r5,#0]
;;;646      
;;;647      return true;
000018  2001              MOVS     r0,#1
;;;648    }
00001a  bdf8              POP      {r3-r7,pc}
;;;649    
                          ENDP

                  |L29.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers17read_sens_code_swEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers17read_sens_code_swEj PROC ; TDevHandlers::read_sens_code_sw(unsigned)
;;;778    
;;;779    bool TDevHandlers::read_sens_code_sw( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;780    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;781      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;782      
;;;783      *ptr = Model.get_hc_code_sw();
000008  4802              LDR      r0,|L30.20|
00000a  f7fffffe          BL       _ZN6TModel14get_hc_code_swEv ; TModel::get_hc_code_sw()
00000e  8028              STRH     r0,[r5,#0]
;;;784      
;;;785      return true;
000010  2001              MOVS     r0,#1
;;;786    }
000012  bd70              POP      {r4-r6,pc}
;;;787    
                          ENDP

                  |L30.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers17write_adm_pswd_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers17write_adm_pswd_hiEj PROC ; TDevHandlers::write_adm_pswd_hi(unsigned)
;;;559    
;;;560    bool TDevHandlers::write_adm_pswd_hi( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;561    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;562    	AdmPswd.Segment.Hi = *reinterpret_cast<uint16_t *>(Addr);
000006  8829              LDRH     r1,[r5,#0]
000008  8221              STRH     r1,[r4,#0x10]
;;;563    	Model.set_psw_admin( AdmPswd.fVal );
00000a  f8d4000e          LDR      r0,[r4,#0xe]
00000e  ee000a10          VMOV     s0,r0
000012  4802              LDR      r0,|L31.28|
000014  f7fffffe          BL       _ZN6TModel13set_psw_adminEf ; TModel::set_psw_admin(float)
;;;564    	
;;;565    	return true;
000018  2001              MOVS     r0,#1
;;;566    }
00001a  bd70              POP      {r4-r6,pc}
;;;567    
                          ENDP

                  |L31.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers17write_adm_pswd_loEj||, CODE, READONLY, ALIGN=1

                  _ZN12TDevHandlers17write_adm_pswd_loEj PROC ; TDevHandlers::write_adm_pswd_lo(unsigned)
;;;542    
;;;543    bool TDevHandlers::write_adm_pswd_lo( uint32_t Addr )
000000  4602              MOV      r2,r0
;;;544    {
;;;545    	AdmPswd.Segment.Lo = *reinterpret_cast<uint16_t *>(Addr);
000002  8808              LDRH     r0,[r1,#0]
000004  81d0              STRH     r0,[r2,#0xe]
;;;546    	
;;;547    	return true;
000006  2001              MOVS     r0,#1
;;;548    }
000008  4770              BX       lr
;;;549    
                          ENDP


                          AREA ||i._ZN12TDevHandlers17write_axis_rotateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers17write_axis_rotateEj PROC ; TDevHandlers::write_axis_rotate(unsigned)
;;;467    
;;;468    bool TDevHandlers::write_axis_rotate( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;469    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;470      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;471      
;;;472      return Model.set_axis_rotate( Val );
00000a  b2e9              UXTB     r1,r5
00000c  4801              LDR      r0,|L33.20|
00000e  f7fffffe          BL       _ZN6TModel15set_axis_rotateEh ; TModel::set_axis_rotate(unsigned char)
;;;473    }
000012  bd70              POP      {r4-r6,pc}
;;;474    
                          ENDP

                  |L33.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers17write_u_baud_rateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers17write_u_baud_rateEj PROC ; TDevHandlers::write_u_baud_rate(unsigned)
;;;483    
;;;484    bool TDevHandlers::write_u_baud_rate( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;485    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;486      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;487      
;;;488      return Model.set_u_baud_rate( Val );
00000a  b2e9              UXTB     r1,r5
00000c  4801              LDR      r0,|L34.20|
00000e  f7fffffe          BL       _ZN6TModel15set_u_baud_rateEh ; TModel::set_u_baud_rate(unsigned char)
;;;489    }
000012  bd70              POP      {r4-r6,pc}
;;;490    
                          ENDP

                  |L34.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18my_read_sens_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers18my_read_sens_angleEj PROC ; TDevHandlers::my_read_sens_angle(unsigned)
;;;715    
;;;716    bool TDevHandlers::my_read_sens_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;717    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;718      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;719      
;;;720      Model.set_sens_angle( Val );
00000a  4629              MOV      r1,r5
00000c  4802              LDR      r0,|L35.24|
00000e  f7fffffe          BL       _ZN6TModel14set_sens_angleEs ; TModel::set_sens_angle(short)
;;;721      
;;;722      return true;
000012  2001              MOVS     r0,#1
;;;723    }
000014  bd70              POP      {r4-r6,pc}
;;;724    
                          ENDP

000016  0000              DCW      0x0000
                  |L35.24|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18my_read_sens_calibEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers18my_read_sens_calibEj PROC ; TDevHandlers::my_read_sens_calib(unsigned)
;;;769    
;;;770    bool TDevHandlers::my_read_sens_calib( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;771    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;772      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;773      
;;;774      Model.set_hc_acc_calib( static_cast<TModel::TCalib>( Val ) );
00000a  b2e9              UXTB     r1,r5
00000c  4802              LDR      r0,|L36.24|
00000e  f7fffffe          BL       _ZN6TModel16set_hc_acc_calibEN9TSettings6TCalibE ; TModel::set_hc_acc_calib(TSettings::TCalib)
;;;775      
;;;776      return true;
000012  2001              MOVS     r0,#1
;;;777    }
000014  bd70              POP      {r4-r6,pc}
;;;778    
                          ENDP

000016  0000              DCW      0x0000
                  |L36.24|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18read_calib_processEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers18read_calib_processEj PROC ; TDevHandlers::read_calib_process(unsigned)
;;;603    
;;;604    bool TDevHandlers::read_calib_process( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;605    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;606      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;607      
;;;608      *ptr = Model.get_calib_process();
000008  4802              LDR      r0,|L37.20|
00000a  f7fffffe          BL       _ZN6TModel17get_calib_processEv ; TModel::get_calib_process()
00000e  8028              STRH     r0,[r5,#0]
;;;609      
;;;610      return true;
000010  2001              MOVS     r0,#1
;;;611    }
000012  bd70              POP      {r4-r6,pc}
;;;612    
                          ENDP

                  |L37.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18read_sens_prog_nbrEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers18read_sens_prog_nbrEj PROC ; TDevHandlers::read_sens_prog_nbr(unsigned)
;;;796    
;;;797    bool TDevHandlers::read_sens_prog_nbr( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;798    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;799      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;800      
;;;801      *ptr = Model.get_hc_prog_nbr();
000008  4802              LDR      r0,|L38.20|
00000a  f7fffffe          BL       _ZN6TModel15get_hc_prog_nbrEv ; TModel::get_hc_prog_nbr()
00000e  8028              STRH     r0,[r5,#0]
;;;802      
;;;803      return true;
000010  2001              MOVS     r0,#1
;;;804    }
000012  bd70              POP      {r4-r6,pc}
;;;805    
                          ENDP

                  |L38.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18read_super_pswd_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers18read_super_pswd_hiEj PROC ; TDevHandlers::read_super_pswd_hi(unsigned)
;;;584    
;;;585    bool TDevHandlers::read_super_pswd_hi( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;586    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;587      float Data = Model.get_psw_super();
000006  4805              LDR      r0,|L39.28|
000008  f7fffffe          BL       _ZN6TModel13get_psw_superEv ; TModel::get_psw_super()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;588      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;589      
;;;590      *ptr = ((TFourBytesParse *)&Data)->Segment.Hi;
000012  f8bd0002          LDRH     r0,[sp,#2]
000016  8028              STRH     r0,[r5,#0]
;;;591      
;;;592      return true;
000018  2001              MOVS     r0,#1
;;;593    }
00001a  bdf8              POP      {r3-r7,pc}
;;;594    
                          ENDP

                  |L39.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18read_super_pswd_loEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers18read_super_pswd_loEj PROC ; TDevHandlers::read_super_pswd_lo(unsigned)
;;;567    
;;;568    bool TDevHandlers::read_super_pswd_lo( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;569    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;570      float Data = Model.get_psw_super();
000006  4805              LDR      r0,|L40.28|
000008  f7fffffe          BL       _ZN6TModel13get_psw_superEv ; TModel::get_psw_super()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;571      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;572      
;;;573      *ptr = ((TFourBytesParse *)&Data)->Segment.Lo;
000012  f8bd0000          LDRH     r0,[sp,#0]
000016  8028              STRH     r0,[r5,#0]
;;;574      
;;;575      return true;
000018  2001              MOVS     r0,#1
;;;576    }
00001a  bdf8              POP      {r3-r7,pc}
;;;577    
                          ENDP

                  |L40.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18write_parameter_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers18write_parameter_hiEj PROC ; TDevHandlers::write_parameter_hi(unsigned)
;;;666    
;;;667    bool TDevHandlers::write_parameter_hi( uint32_t Addr )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;668    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;669    	CalibParameter.Segment.Hi = *reinterpret_cast<uint16_t *>(Addr);
000008  8831              LDRH     r1,[r6,#0]
00000a  8329              STRH     r1,[r5,#0x18]
;;;670      
;;;671      const TModel::TAuthorize *Authorize = Model.get_authorize_item_ptr();
00000c  4820              LDR      r0,|L41.144|
00000e  f7fffffe          BL       _ZN6TModel22get_authorize_item_ptrEv ; TModel::get_authorize_item_ptr()
000012  4604              MOV      r4,r0
;;;672    	
;;;673      if ( Authorize != nullptr ) //если ожидается ввод пароля
000014  b384              CBZ      r4,|L41.120|
;;;674      {
;;;675        Model.set_calib_parameter( CalibParameter.fVal );
000016  f8d50016          LDR      r0,[r5,#0x16]
00001a  ee000a10          VMOV     s0,r0
00001e  481c              LDR      r0,|L41.144|
000020  f7fffffe          BL       _ZN6TModel19set_calib_parameterEf ; TModel::set_calib_parameter(float)
;;;676        
;;;677        if ( (Model.*Authorize->get_psw)() == CalibParameter.fVal ) //если значение параметра равно текущему установленному паролю
000024  491a              LDR      r1,|L41.144|
000026  68a0              LDR      r0,[r4,#8]
000028  eb010760          ADD      r7,r1,r0,ASR #1
00002c  7a20              LDRB     r0,[r4,#8]
00002e  f0000001          AND      r0,r0,#1
000032  b908              CBNZ     r0,|L41.56|
000034  6860              LDR      r0,[r4,#4]
000036  e005              B        |L41.68|
                  |L41.56|
000038  6838              LDR      r0,[r7,#0]
00003a  6861              LDR      r1,[r4,#4]
00003c  eb000801          ADD      r8,r0,r1
000040  f8d80000          LDR      r0,[r8,#0]
                  |L41.68|
000044  4681              MOV      r9,r0
000046  4638              MOV      r0,r7
000048  47c8              BLX      r9
00004a  f8d50016          LDR      r0,[r5,#0x16]
00004e  ee000a90          VMOV     s1,r0
000052  eeb40a60          VCMP.F32 s0,s1
000056  eef1fa10          VMRS     APSR_nzcv,FPSCR
00005a  d108              BNE      |L41.110|
;;;678        {
;;;679          Model.set_access( Authorize->Access ); //установка запрошенного режима доступа
00005c  7821              LDRB     r1,[r4,#0]
00005e  480c              LDR      r0,|L41.144|
000060  f7fffffe          BL       _ZN6TModel10set_accessEN9TSettings7TAccessE ; TModel::set_access(TSettings::TAccess)
;;;680          Model.set_calib_process( TModel::TCalibProcess::__PERFORMED );
000064  215a              MOVS     r1,#0x5a
000066  480a              LDR      r0,|L41.144|
000068  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
00006c  e003              B        |L41.118|
                  |L41.110|
;;;681        }
;;;682        else
;;;683        {
;;;684          Model.set_calib_process( TModel::TCalibProcess::__DENY );
00006e  210a              MOVS     r1,#0xa
000070  4807              LDR      r0,|L41.144|
000072  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
                  |L41.118|
;;;685        }    
;;;686      }
000076  e004              B        |L41.130|
                  |L41.120|
000078  e7ff              B        |L41.122|
                  |L41.122|
;;;687      else
;;;688      {
;;;689        Model.set_calib_process( TModel::TCalibProcess::__DENY );
00007a  210a              MOVS     r1,#0xa
00007c  4804              LDR      r0,|L41.144|
00007e  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
                  |L41.130|
;;;690      }
;;;691      
;;;692      Model.set_authorize_item_ptr( nullptr ); //сброс флага ожидания пароля
000082  2100              MOVS     r1,#0
000084  4802              LDR      r0,|L41.144|
000086  f7fffffe          BL       _ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE ; TModel::set_authorize_item_ptr(const TModel::TAuthorize*)
;;;693      	
;;;694    	return true;
00008a  2001              MOVS     r0,#1
;;;695    }
00008c  e8bd87f0          POP      {r4-r10,pc}
;;;696    
                          ENDP

                  |L41.144|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers18write_parameter_loEj||, CODE, READONLY, ALIGN=1

                  _ZN12TDevHandlers18write_parameter_loEj PROC ; TDevHandlers::write_parameter_lo(unsigned)
;;;649    
;;;650    bool TDevHandlers::write_parameter_lo( uint32_t Addr )
000000  4602              MOV      r2,r0
;;;651    {
;;;652    	CalibParameter.Segment.Lo = *reinterpret_cast<uint16_t *>(Addr);
000002  8808              LDRH     r0,[r1,#0]
000004  82d0              STRH     r0,[r2,#0x16]
;;;653    	
;;;654    	return true;
000006  2001              MOVS     r0,#1
;;;655    }
000008  4770              BX       lr
;;;656    
                          ENDP


                          AREA ||i._ZN12TDevHandlers19read_pd_pressure_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers19read_pd_pressure_hiEj PROC ; TDevHandlers::read_pd_pressure_hi(unsigned)
;;;987    
;;;988    bool TDevHandlers::read_pd_pressure_hi( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;989    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;990      float Data = Model.get_pd_pressure();
000006  4805              LDR      r0,|L43.28|
000008  f7fffffe          BL       _ZN6TModel15get_pd_pressureEv ; TModel::get_pd_pressure()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;991      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;992      
;;;993      *ptr = ((TFourBytesParse *)&Data)->Segment.Hi;
000012  f8bd0002          LDRH     r0,[sp,#2]
000016  8028              STRH     r0,[r5,#0]
;;;994      
;;;995      return true;
000018  2001              MOVS     r0,#1
;;;996    }
00001a  bdf8              POP      {r3-r7,pc}
;;;997    
                          ENDP

                  |L43.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers19read_pd_pressure_loEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers19read_pd_pressure_loEj PROC ; TDevHandlers::read_pd_pressure_lo(unsigned)
;;;977    
;;;978    bool TDevHandlers::read_pd_pressure_lo( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;979    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;980      float Data = Model.get_pd_pressure();
000006  4805              LDR      r0,|L44.28|
000008  f7fffffe          BL       _ZN6TModel15get_pd_pressureEv ; TModel::get_pd_pressure()
00000c  ed8d0a00          VSTR     s0,[sp,#0]
;;;981      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000010  4625              MOV      r5,r4
;;;982      
;;;983      *ptr = ((TFourBytesParse *)&Data)->Segment.Lo;
000012  f8bd0000          LDRH     r0,[sp,#0]
000016  8028              STRH     r0,[r5,#0]
;;;984      
;;;985      return true;
000018  2001              MOVS     r0,#1
;;;986    }
00001a  bdf8              POP      {r3-r7,pc}
;;;987    
                          ENDP

                  |L44.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers19write_calib_processEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers19write_calib_processEj PROC ; TDevHandlers::write_calib_process(unsigned)
;;;612    
;;;613    bool TDevHandlers::write_calib_process( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;614    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;615      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;616      
;;;617      return Model.set_calib_cmd( Val );
00000a  b2a9              UXTH     r1,r5
00000c  4801              LDR      r0,|L45.20|
00000e  f7fffffe          BL       _ZN6TModel13set_calib_cmdEt ; TModel::set_calib_cmd(unsigned short)
;;;618    }
000012  bd70              POP      {r4-r6,pc}
;;;619    
                          ENDP

                  |L45.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers19write_super_pswd_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers19write_super_pswd_hiEj PROC ; TDevHandlers::write_super_pswd_hi(unsigned)
;;;594    
;;;595    bool TDevHandlers::write_super_pswd_hi( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;596    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;597    	SuperPswd.Segment.Hi = *reinterpret_cast<uint16_t *>(Addr);
000006  8829              LDRH     r1,[r5,#0]
000008  82a1              STRH     r1,[r4,#0x14]
;;;598    	Model.set_psw_super( SuperPswd.fVal );
00000a  f8d40012          LDR      r0,[r4,#0x12]
00000e  ee000a10          VMOV     s0,r0
000012  4802              LDR      r0,|L46.28|
000014  f7fffffe          BL       _ZN6TModel13set_psw_superEf ; TModel::set_psw_super(float)
;;;599    	
;;;600    	return true;
000018  2001              MOVS     r0,#1
;;;601    }
00001a  bd70              POP      {r4-r6,pc}
;;;602    //------------------------------------------------------------------------------
                          ENDP

                  |L46.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers19write_super_pswd_loEj||, CODE, READONLY, ALIGN=1

                  _ZN12TDevHandlers19write_super_pswd_loEj PROC ; TDevHandlers::write_super_pswd_lo(unsigned)
;;;577    
;;;578    bool TDevHandlers::write_super_pswd_lo( uint32_t Addr )
000000  4602              MOV      r2,r0
;;;579    {
;;;580    	SuperPswd.Segment.Lo = *reinterpret_cast<uint16_t *>(Addr);
000002  8808              LDRH     r0,[r1,#0]
000004  8250              STRH     r0,[r2,#0x12]
;;;581    	
;;;582    	return true;
000006  2001              MOVS     r0,#1
;;;583    }
000008  4770              BX       lr
;;;584    
                          ENDP


                          AREA ||i._ZN12TDevHandlers20my_read_sens_code_swEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers20my_read_sens_code_swEj PROC ; TDevHandlers::my_read_sens_code_sw(unsigned)
;;;787    
;;;788    bool TDevHandlers::my_read_sens_code_sw( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;789    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;790      uint16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8825              LDRH     r5,[r4,#0]
;;;791      
;;;792      Model.set_hc_code_sw( static_cast<TModel::TCalib>( Val ) );
000008  b2e9              UXTB     r1,r5
00000a  4802              LDR      r0,|L48.20|
00000c  f7fffffe          BL       _ZN6TModel14set_hc_code_swEh ; TModel::set_hc_code_sw(unsigned char)
;;;793      
;;;794      return true;
000010  2001              MOVS     r0,#1
;;;795    }
000012  bd70              POP      {r4-r6,pc}
;;;796    
                          ENDP

                  |L48.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers20read_position_ctr_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers20read_position_ctr_hiEj PROC ; TDevHandlers::read_position_ctr_hi(unsigned)
;;;629    
;;;630    bool TDevHandlers::read_position_ctr_hi( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;631    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;632      uint32_t Data = Model.get_calib_position_ctr();
000006  4805              LDR      r0,|L49.28|
000008  f7fffffe          BL       _ZN6TModel22get_calib_position_ctrEv ; TModel::get_calib_position_ctr()
00000c  9000              STR      r0,[sp,#0]
;;;633      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
00000e  4625              MOV      r5,r4
;;;634      
;;;635      *ptr = ((TFourBytesParse *)&Data)->Segment.Hi;
000010  f8bd0002          LDRH     r0,[sp,#2]
000014  8028              STRH     r0,[r5,#0]
;;;636      
;;;637      return true;
000016  2001              MOVS     r0,#1
;;;638    }
000018  bdf8              POP      {r3-r7,pc}
;;;639    
                          ENDP

00001a  0000              DCW      0x0000
                  |L49.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers20read_position_ctr_loEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers20read_position_ctr_loEj PROC ; TDevHandlers::read_position_ctr_lo(unsigned)
;;;619    
;;;620    bool TDevHandlers::read_position_ctr_lo( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;621    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;622      uint32_t Data = Model.get_calib_position_ctr();
000006  4805              LDR      r0,|L50.28|
000008  f7fffffe          BL       _ZN6TModel22get_calib_position_ctrEv ; TModel::get_calib_position_ctr()
00000c  9000              STR      r0,[sp,#0]
;;;623      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
00000e  4625              MOV      r5,r4
;;;624      
;;;625      *ptr = ((TFourBytesParse *)&Data)->Segment.Lo;
000010  f8bd0000          LDRH     r0,[sp,#0]
000014  8028              STRH     r0,[r5,#0]
;;;626      
;;;627      return true;
000016  2001              MOVS     r0,#1
;;;628    }
000018  bdf8              POP      {r3-r7,pc}
;;;629    
                          ENDP

00001a  0000              DCW      0x0000
                  |L50.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers20read_roll_bias_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers20read_roll_bias_angleEj PROC ; TDevHandlers::read_roll_bias_angle(unsigned)
;;;347    
;;;348    bool TDevHandlers::read_roll_bias_angle( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;349    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;350      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;351      
;;;352      int8_t Coeff[] =
000008  a008              ADR      r0,|L51.44|
00000a  6800              LDR      r0,[r0,#0]
00000c  9000              STR      r0,[sp,#0]
;;;353      {
;;;354         1, //TAxisRotate::__0_DEG
;;;355         1, //TAxisRotate::__90_DEG
;;;356        -1, //TAxisRotate::__180_DEG
;;;357         1, //TAxisRotate::__270_DEG
;;;358      };
;;;359      
;;;360      *ptr = Model.get_roll_bias_angle() * Coeff[ Model.get_axis_rotate() ];
00000e  4808              LDR      r0,|L51.48|
000010  f7fffffe          BL       _ZN6TModel19get_roll_bias_angleEv ; TModel::get_roll_bias_angle()
000014  4607              MOV      r7,r0
000016  4806              LDR      r0,|L51.48|
000018  f7fffffe          BL       _ZN6TModel15get_axis_rotateEv ; TModel::get_axis_rotate()
00001c  f91d0000          LDRSB    r0,[sp,r0]
000020  fb17f000          SMULBB   r0,r7,r0
000024  8028              STRH     r0,[r5,#0]
;;;361      
;;;362      return true;
000026  2001              MOVS     r0,#1
;;;363    }
000028  bdf8              POP      {r3-r7,pc}
;;;364    
                          ENDP

00002a  0000              DCW      0x0000
                  |L51.44|
00002c  0101ff01          DCB      1,1,255,1
                  |L51.48|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers20write_pd_pressure_hiEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers20write_pd_pressure_hiEj PROC ; TDevHandlers::write_pd_pressure_hi(unsigned)
;;;1004   
;;;1005   bool TDevHandlers::write_pd_pressure_hi( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;1006   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1007   	PdPressure.Segment.Hi = *reinterpret_cast<uint16_t *>(Addr);
000006  8829              LDRH     r1,[r5,#0]
000008  83a1              STRH     r1,[r4,#0x1c]
;;;1008   	Model.set_pd_pressure( PdPressure.fVal );
00000a  f8d4001a          LDR      r0,[r4,#0x1a]
00000e  ee000a10          VMOV     s0,r0
000012  4802              LDR      r0,|L52.28|
000014  f7fffffe          BL       _ZN6TModel15set_pd_pressureEf ; TModel::set_pd_pressure(float)
;;;1009   	
;;;1010   	return true;
000018  2001              MOVS     r0,#1
;;;1011   }
00001a  bd70              POP      {r4-r6,pc}
;;;1012   
                          ENDP

                  |L52.28|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers20write_pd_pressure_loEj||, CODE, READONLY, ALIGN=1

                  _ZN12TDevHandlers20write_pd_pressure_loEj PROC ; TDevHandlers::write_pd_pressure_lo(unsigned)
;;;997    
;;;998    bool TDevHandlers::write_pd_pressure_lo( uint32_t Addr )
000000  4602              MOV      r2,r0
;;;999    {
;;;1000   	PdPressure.Segment.Lo = *reinterpret_cast<uint16_t *>(Addr);
000002  8808              LDRH     r0,[r1,#0]
000004  8350              STRH     r0,[r2,#0x1a]
;;;1001   	
;;;1002   	return true;
000006  2001              MOVS     r0,#1
;;;1003   }
000008  4770              BX       lr
;;;1004   
                          ENDP


                          AREA ||i._ZN12TDevHandlers20write_start_meas_cmdEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers20write_start_meas_cmdEj PROC ; TDevHandlers::write_start_meas_cmd(unsigned)
;;;956    
;;;957    bool TDevHandlers::write_start_meas_cmd( uint32_t Addr )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;958    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;959      //проверка входных данных на допустимость не нужна - это делает прикладная часть протокола
;;;960      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000008  8820              LDRH     r0,[r4,#0]
00000a  b205              SXTH     r5,r0
;;;961    
;;;962      TModel::TMeas Meas;
;;;963      
;;;964      Meas = ( Val == 0x0000 ) ? TModel::TMeas::__STOP_MEAS
00000c  b10d              CBZ      r5,|L54.18|
;;;965                               : TModel::TMeas::__START_MEAS;
00000e  2001              MOVS     r0,#1
000010  e000              B        |L54.20|
                  |L54.18|
000012  2000              MOVS     r0,#0                 ;964
                  |L54.20|
000014  4606              MOV      r6,r0                 ;964
;;;966    
;;;967      if ( Meas == TModel::TMeas::__START_MEAS )
;;;968      {
;;;969    //    Do.toggle();
;;;970    //    Do.closed();
;;;971      }
;;;972      
;;;973      Model.set_start_meas_cmd( Meas );
000016  4631              MOV      r1,r6
000018  4802              LDR      r0,|L54.36|
00001a  f7fffffe          BL       _ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE ; TModel::set_start_meas_cmd(TSettings::TMeas)
;;;974    
;;;975      return true;
00001e  2001              MOVS     r0,#1
;;;976    }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;977    
                          ENDP

                  |L54.36|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers21my_read_sens_prog_nbrEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers21my_read_sens_prog_nbrEj PROC ; TDevHandlers::my_read_sens_prog_nbr(unsigned)
;;;907    
;;;908    bool TDevHandlers::my_read_sens_prog_nbr( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;909    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;910      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;911    
;;;912      Model.set_hc_prog_nbr( Val );
00000a  b2a9              UXTH     r1,r5
00000c  4802              LDR      r0,|L55.24|
00000e  f7fffffe          BL       _ZN6TModel15set_hc_prog_nbrEt ; TModel::set_hc_prog_nbr(unsigned short)
;;;913    
;;;914      return true;
000012  2001              MOVS     r0,#1
;;;915    }
000014  bd70              POP      {r4-r6,pc}
;;;916    
                          ENDP

000016  0000              DCW      0x0000
                  |L55.24|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers21read_pitch_bias_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers21read_pitch_bias_angleEj PROC ; TDevHandlers::read_pitch_bias_angle(unsigned)
;;;330    
;;;331    bool TDevHandlers::read_pitch_bias_angle( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;332    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;333      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;334      
;;;335      int8_t Coeff[] =
000008  a008              ADR      r0,|L56.44|
00000a  6800              LDR      r0,[r0,#0]
00000c  9000              STR      r0,[sp,#0]
;;;336      {
;;;337         1, //TAxisRotate::__0_DEG
;;;338         1, //TAxisRotate::__90_DEG
;;;339         1, //TAxisRotate::__180_DEG
;;;340        -1, //TAxisRotate::__270_DEG
;;;341      };
;;;342      
;;;343      *ptr = Model.get_pitch_bias_angle() * Coeff[ Model.get_axis_rotate() ];
00000e  4808              LDR      r0,|L56.48|
000010  f7fffffe          BL       _ZN6TModel20get_pitch_bias_angleEv ; TModel::get_pitch_bias_angle()
000014  4607              MOV      r7,r0
000016  4806              LDR      r0,|L56.48|
000018  f7fffffe          BL       _ZN6TModel15get_axis_rotateEv ; TModel::get_axis_rotate()
00001c  f91d0000          LDRSB    r0,[sp,r0]
000020  fb17f000          SMULBB   r0,r7,r0
000024  8028              STRH     r0,[r5,#0]
;;;344      
;;;345      return true;
000026  2001              MOVS     r0,#1
;;;346    }
000028  bdf8              POP      {r3-r7,pc}
;;;347    
                          ENDP

00002a  0000              DCW      0x0000
                  |L56.44|
00002c  010101ff          DCB      1,1,1,255
                  |L56.48|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers21read_sens_axis_rotateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers21read_sens_axis_rotateEj PROC ; TDevHandlers::read_sens_axis_rotate(unsigned)
;;;805    
;;;806    bool TDevHandlers::read_sens_axis_rotate( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;807    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;808      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;809      
;;;810      *ptr = Model.get_sens_axis_rotate();
000008  4802              LDR      r0,|L57.20|
00000a  f7fffffe          BL       _ZN6TModel20get_sens_axis_rotateEv ; TModel::get_sens_axis_rotate()
00000e  8028              STRH     r0,[r5,#0]
;;;811      
;;;812      return true;
000010  2001              MOVS     r0,#1
;;;813    }
000012  bd70              POP      {r4-r6,pc}
;;;814    
                          ENDP

                  |L57.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers22read_sample_valid_signEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers22read_sample_valid_signEj PROC ; TDevHandlers::read_sample_valid_sign(unsigned)
;;;724    
;;;725    bool TDevHandlers::read_sample_valid_sign( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;726    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;727      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;728      
;;;729      *ptr = Model.get_sample_valid_sign();
000008  4802              LDR      r0,|L58.20|
00000a  f7fffffe          BL       _ZN6TModel21get_sample_valid_signEv ; TModel::get_sample_valid_sign()
00000e  8028              STRH     r0,[r5,#0]
;;;730      
;;;731      return true;
000010  2001              MOVS     r0,#1
;;;732    }
000012  bd70              POP      {r4-r6,pc}
;;;733    
                          ENDP

                  |L58.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers22write_sens_axis_rotateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers22write_sens_axis_rotateEj PROC ; TDevHandlers::write_sens_axis_rotate(unsigned)
;;;814    
;;;815    bool TDevHandlers::write_sens_axis_rotate( uint32_t Addr )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;816    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;817      bool    Res = false;
000008  2600              MOVS     r6,#0
;;;818      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
00000a  8828              LDRH     r0,[r5,#0]
00000c  b204              SXTH     r4,r0
;;;819      
;;;820      if ( Model.get_sens_axis_rotate() == Val ) //попытка записать уже установленное значение
00000e  4815              LDR      r0,|L59.100|
000010  f7fffffe          BL       _ZN6TModel20get_sens_axis_rotateEv ; TModel::get_sens_axis_rotate()
000014  42a0              CMP      r0,r4
000016  d101              BNE      |L59.28|
;;;821      {
;;;822        Res = true;
000018  2601              MOVS     r6,#1
00001a  e01f              B        |L59.92|
                  |L59.28|
;;;823      }
;;;824      else if ( Model.set_sens_buf_axis_rotate( Val ) ) //установка значения буфера, чтобы считывающий с датчика поток, его не переписал
00001c  b2e1              UXTB     r1,r4
00001e  4811              LDR      r0,|L59.100|
000020  f7fffffe          BL       _ZN6TModel24set_sens_buf_axis_rotateEh ; TModel::set_sens_buf_axis_rotate(unsigned char)
000024  b1c8              CBZ      r0,|L59.90|
;;;825      {
;;;826        constexpr uint32_t WAIT_RESP_MS = 20U;
000026  2714              MOVS     r7,#0x14
;;;827        
;;;828        xSemaphoreGive( SensWrAxisRotateSem ); //необходимо отправить датчику запрос на запись регистра
000028  2300              MOVS     r3,#0
00002a  461a              MOV      r2,r3
00002c  4619              MOV      r1,r3
00002e  480e              LDR      r0,|L59.104|
000030  6800              LDR      r0,[r0,#0]  ; SensWrAxisRotateSem
000032  f7fffffe          BL       xQueueGenericSend
;;;829        Res = ( xSemaphoreTake( SensAxisRotateOkSem, pdMS_TO_TICKS( WAIT_RESP_MS ) ) == pdPASS ) //ожидание успешного ответа от датчика в течение WAIT_RESP_MS
000036  2300              MOVS     r3,#0
000038  2214              MOVS     r2,#0x14
00003a  4619              MOV      r1,r3
00003c  480b              LDR      r0,|L59.108|
00003e  6800              LDR      r0,[r0,#0]  ; SensAxisRotateOkSem
000040  f7fffffe          BL       xQueueGenericReceive
000044  2801              CMP      r0,#1
000046  d105              BNE      |L59.84|
000048  b2e1              UXTB     r1,r4
00004a  4806              LDR      r0,|L59.100|
00004c  f7fffffe          BL       _ZN6TModel20set_sens_axis_rotateEh ; TModel::set_sens_axis_rotate(unsigned char)
;;;830            ? Model.set_sens_axis_rotate( Val ), true
000050  2001              MOVS     r0,#1
000052  e000              B        |L59.86|
                  |L59.84|
;;;831            : false;
000054  2000              MOVS     r0,#0
                  |L59.86|
000056  4606              MOV      r6,r0
;;;832      }
000058  e000              B        |L59.92|
                  |L59.90|
;;;833      else //попытка записать невалидное значение
;;;834      {
;;;835        Res = false;
00005a  2600              MOVS     r6,#0
                  |L59.92|
;;;836      }
;;;837      
;;;838      return Res;
00005c  4630              MOV      r0,r6
;;;839    }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;840    
                          ENDP

000062  0000              DCW      0x0000
                  |L59.100|
                          DCD      Model
                  |L59.104|
                          DCD      SensWrAxisRotateSem
                  |L59.108|
                          DCD      SensAxisRotateOkSem

                          AREA ||i._ZN12TDevHandlers23my_write_start_meas_cmdEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers23my_write_start_meas_cmdEj PROC ; TDevHandlers::my_write_start_meas_cmd(unsigned)
;;;916    
;;;917    bool TDevHandlers::my_write_start_meas_cmd( uint32_t Addr )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;918    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;919      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000008  4625              MOV      r5,r4
;;;920      
;;;921      if ( *ptr == __RESP_SUCCESS ) //приема ответа
00000a  8828              LDRH     r0,[r5,#0]
00000c  f24a515a          MOV      r1,#0xa55a
000010  4288              CMP      r0,r1
000012  d107              BNE      |L60.36|
;;;922      {
;;;923        //ответ от датчика пришел и не важно, что находилось в поле с данными принятого пакета
;;;924        xSemaphoreGive( SensDevOkSem );
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  4619              MOV      r1,r3
00001a  4809              LDR      r0,|L60.64|
00001c  6800              LDR      r0,[r0,#0]  ; SensDevOkSem
00001e  f7fffffe          BL       xQueueGenericSend
000022  e00a              B        |L60.58|
                  |L60.36|
;;;925      }
;;;926      else //отправка запроса
;;;927      {
;;;928        TModel::TMeas Cmd = Model.get_start_meas_cmd();
000024  4807              LDR      r0,|L60.68|
000026  f7fffffe          BL       _ZN6TModel18get_start_meas_cmdEv ; TModel::get_start_meas_cmd()
00002a  4606              MOV      r6,r0
;;;929        
;;;930        *ptr = ( Cmd == TModel::TMeas::__START_MEAS )
00002c  2e01              CMP      r6,#1
00002e  d101              BNE      |L60.52|
;;;931             ? 0x00FF                                 //старший байт перед младшим 
000030  20ff              MOVS     r0,#0xff
000032  e000              B        |L60.54|
                  |L60.52|
;;;932             : 0x0000;
000034  2000              MOVS     r0,#0
                  |L60.54|
000036  8028              STRH     r0,[r5,#0]
;;;933      }
000038  bf00              NOP      
                  |L60.58|
;;;934      
;;;935      return true;
00003a  2001              MOVS     r0,#1
;;;936    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;937    
                          ENDP

                  |L60.64|
                          DCD      SensDevOkSem
                  |L60.68|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers24my_read_sens_axis_rotateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers24my_read_sens_axis_rotateEj PROC ; TDevHandlers::my_read_sens_axis_rotate(unsigned)
;;;840    
;;;841    bool TDevHandlers::my_read_sens_axis_rotate( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;842    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;843      uint16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8825              LDRH     r5,[r4,#0]
;;;844    
;;;845      return Model.set_sens_axis_rotate( Val );
000008  b2e9              UXTB     r1,r5
00000a  4802              LDR      r0,|L61.20|
00000c  f7fffffe          BL       _ZN6TModel20set_sens_axis_rotateEh ; TModel::set_sens_axis_rotate(unsigned char)
;;;846    }
000010  bd70              POP      {r4-r6,pc}
;;;847    
                          ENDP

000012  0000              DCW      0x0000
                  |L61.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers25my_read_sample_valid_signEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers25my_read_sample_valid_signEj PROC ; TDevHandlers::my_read_sample_valid_sign(unsigned)
;;;733    
;;;734    bool TDevHandlers::my_read_sample_valid_sign( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;735    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;736      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;737      
;;;738      Model.set_sens_sample_valid_sign( static_cast<TModel::TValidSign>( Val ) );
00000a  b2e9              UXTB     r1,r5
00000c  4802              LDR      r0,|L62.24|
00000e  f7fffffe          BL       _ZN6TModel26set_sens_sample_valid_signEN9TSettings10TValidSignE ; TModel::set_sens_sample_valid_sign(TSettings::TValidSign)
;;;739      
;;;740      return true;
000012  2001              MOVS     r0,#1
;;;741    }
000014  bd70              POP      {r4-r6,pc}
;;;742    
                          ENDP

000016  0000              DCW      0x0000
                  |L62.24|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers25my_write_sens_axis_rotateEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers25my_write_sens_axis_rotateEj PROC ; TDevHandlers::my_write_sens_axis_rotate(unsigned)
;;;937    
;;;938    bool TDevHandlers::my_write_sens_axis_rotate( uint32_t Addr )
000000  b5f8              PUSH     {r3-r7,lr}
;;;939    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;940      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;941      
;;;942      if ( *ptr == Model.get_sens_buf_axis_rotate() ) //приема ответа
000008  480d              LDR      r0,|L63.64|
00000a  f7fffffe          BL       _ZN6TModel24get_sens_buf_axis_rotateEv ; TModel::get_sens_buf_axis_rotate()
00000e  8829              LDRH     r1,[r5,#0]
000010  4288              CMP      r0,r1
000012  d107              BNE      |L63.36|
;;;943      {
;;;944        xSemaphoreGive( SensAxisRotateOkSem ); //отправка семафора задаче, ожидающей успешной установки значения
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  4619              MOV      r1,r3
00001a  480a              LDR      r0,|L63.68|
00001c  6800              LDR      r0,[r0,#0]  ; SensAxisRotateOkSem
00001e  f7fffffe          BL       xQueueGenericSend
000022  e00b              B        |L63.60|
                  |L63.36|
;;;945      }
;;;946      else //отправка запроса
;;;947      {
;;;948        TTwoBytesParse Tmp;
;;;949        Tmp.uVal = Model.get_sens_buf_axis_rotate(); //буферное значение под настройку
000024  4806              LDR      r0,|L63.64|
000026  f7fffffe          BL       _ZN6TModel24get_sens_buf_axis_rotateEv ; TModel::get_sens_buf_axis_rotate()
00002a  9000              STR      r0,[sp,#0]
;;;950            
;;;951        *ptr = ( Tmp.Segment.Lo << 8U ) + Tmp.Segment.Hi;
00002c  f89d0001          LDRB     r0,[sp,#1]
000030  f89d1000          LDRB     r1,[sp,#0]
000034  eb002001          ADD      r0,r0,r1,LSL #8
000038  8028              STRH     r0,[r5,#0]
;;;952      }
00003a  bf00              NOP      
                  |L63.60|
;;;953      
;;;954      return true;
00003c  2001              MOVS     r0,#1
;;;955    }
00003e  bdf8              POP      {r3-r7,pc}
;;;956    
                          ENDP

                  |L63.64|
                          DCD      Model
                  |L63.68|
                          DCD      SensAxisRotateOkSem

                          AREA ||i._ZN12TDevHandlers25read_sens_roll_bias_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers25read_sens_roll_bias_angleEj PROC ; TDevHandlers::read_sens_roll_bias_angle(unsigned)
;;;865    
;;;866    bool TDevHandlers::read_sens_roll_bias_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;867    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;868      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;869      
;;;870      *ptr = Model.get_sens_roll_bias_angle();
000008  4802              LDR      r0,|L64.20|
00000a  f7fffffe          BL       _ZN6TModel24get_sens_roll_bias_angleEv ; TModel::get_sens_roll_bias_angle()
00000e  8028              STRH     r0,[r5,#0]
;;;871      
;;;872      return true;
000010  2001              MOVS     r0,#1
;;;873    }
000012  bd70              POP      {r4-r6,pc}
;;;874    
                          ENDP

                  |L64.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers26read_sens_pitch_bias_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers26read_sens_pitch_bias_angleEj PROC ; TDevHandlers::read_sens_pitch_bias_angle(unsigned)
;;;847    
;;;848    bool TDevHandlers::read_sens_pitch_bias_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;849    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;850      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;851      
;;;852      *ptr = Model.get_sens_pitch_bias_angle();
000008  4802              LDR      r0,|L65.20|
00000a  f7fffffe          BL       _ZN6TModel25get_sens_pitch_bias_angleEv ; TModel::get_sens_pitch_bias_angle()
00000e  8028              STRH     r0,[r5,#0]
;;;853      
;;;854      return true;
000010  2001              MOVS     r0,#1
;;;855    }
000012  bd70              POP      {r4-r6,pc}
;;;856    
                          ENDP

                  |L65.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers27read_sens_sample_valid_signEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers27read_sens_sample_valid_signEj PROC ; TDevHandlers::read_sens_sample_valid_sign(unsigned)
;;;742    
;;;743    bool TDevHandlers::read_sens_sample_valid_sign( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;744    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;745      int16_t *ptr = reinterpret_cast<int16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;746      
;;;747      *ptr = Model.get_sens_sample_valid_sign();
000008  4802              LDR      r0,|L66.20|
00000a  f7fffffe          BL       _ZN6TModel26get_sens_sample_valid_signEv ; TModel::get_sens_sample_valid_sign()
00000e  8028              STRH     r0,[r5,#0]
;;;748      
;;;749      return true;
000010  2001              MOVS     r0,#1
;;;750    }
000012  bd70              POP      {r4-r6,pc}
;;;751    
                          ENDP

                  |L66.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers28my_read_sens_roll_bias_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers28my_read_sens_roll_bias_angleEj PROC ; TDevHandlers::my_read_sens_roll_bias_angle(unsigned)
;;;874    
;;;875    bool TDevHandlers::my_read_sens_roll_bias_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;876    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;877      int16_t Val = *reinterpret_cast<int16_t *>(Addr);
000006  f9b45000          LDRSH    r5,[r4,#0]
;;;878      
;;;879      Model.set_sens_roll_bias_angle( Val );
00000a  b269              SXTB     r1,r5
00000c  4802              LDR      r0,|L67.24|
00000e  f7fffffe          BL       _ZN6TModel24set_sens_roll_bias_angleEa ; TModel::set_sens_roll_bias_angle(signed char)
;;;880      
;;;881      return true;
000012  2001              MOVS     r0,#1
;;;882    }
000014  bd70              POP      {r4-r6,pc}
;;;883    
                          ENDP

000016  0000              DCW      0x0000
                  |L67.24|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers29my_read_sens_pitch_bias_angleEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers29my_read_sens_pitch_bias_angleEj PROC ; TDevHandlers::my_read_sens_pitch_bias_angle(unsigned)
;;;856    
;;;857    bool TDevHandlers::my_read_sens_pitch_bias_angle( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;858    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;859      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;860      
;;;861      Model.set_sens_pitch_bias_angle( Val );
00000a  b269              SXTB     r1,r5
00000c  4802              LDR      r0,|L68.24|
00000e  f7fffffe          BL       _ZN6TModel25set_sens_pitch_bias_angleEa ; TModel::set_sens_pitch_bias_angle(signed char)
;;;862      
;;;863      return true;
000012  2001              MOVS     r0,#1
;;;864    }
000014  bd70              POP      {r4-r6,pc}
;;;865    
                          ENDP

000016  0000              DCW      0x0000
                  |L68.24|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers31m_read_input_registers_completeEv||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers31m_read_input_registers_completeEv PROC ; TDevHandlers::m_read_input_registers_complete()
;;;1013   //----- Callback'и -------------------------------------------------------------------------------
;;;1014   void TDevHandlers::m_read_input_registers_complete()
000000  b510              PUSH     {r4,lr}
;;;1015   {
000002  4604              MOV      r4,r0
;;;1016   //  Do.open();
;;;1017     xSemaphoreGive( SensDevResSem );
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  4619              MOV      r1,r3
00000a  4802              LDR      r0,|L69.20|
00000c  6800              LDR      r0,[r0,#0]  ; SensDevResSem
00000e  f7fffffe          BL       xQueueGenericSend
;;;1018   }
000012  bd10              POP      {r4,pc}
;;;1019   
                          ENDP

                  |L69.20|
                          DCD      SensDevResSem

                          AREA ||i._ZN12TDevHandlers7read_doEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers7read_doEj PROC ; TDevHandlers::read_do(unsigned)
;;;364    
;;;365    bool TDevHandlers::TDevHandlers::read_do( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;366    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;367      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;368      
;;;369      *ptr = Model.get_d_o_sets();  
000008  4802              LDR      r0,|L70.20|
00000a  f7fffffe          BL       _ZN6TModel12get_d_o_setsEv ; TModel::get_d_o_sets()
00000e  7028              STRB     r0,[r5,#0]
;;;370      
;;;371      return true;
000010  2001              MOVS     r0,#1
;;;372    }
000012  bd70              POP      {r4-r6,pc}
;;;373    
                          ENDP

                  |L70.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers7read_hcEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers7read_hcEj PROC ; TDevHandlers::read_hc(unsigned)
;;;267    
;;;268    bool TDevHandlers::read_hc( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;269    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;270      uint8_t *ptr = reinterpret_cast<uint8_t *>(Addr);
000006  4625              MOV      r5,r4
;;;271      
;;;272      *ptr = Model.get_hc_state();  
000008  4802              LDR      r0,|L71.20|
00000a  f7fffffe          BL       _ZN6TModel12get_hc_stateEv ; TModel::get_hc_state()
00000e  7028              STRB     r0,[r5,#0]
;;;273      
;;;274      return true;
000010  2001              MOVS     r0,#1
;;;275    }
000012  bd70              POP      {r4-r6,pc}
;;;276    
                          ENDP

                  |L71.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers8read_thrEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers8read_thrEj PROC ; TDevHandlers::read_thr(unsigned)
;;;410    
;;;411    bool TDevHandlers::read_thr( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;412    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;413      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;414      
;;;415      *ptr = Model.get_thr();
000008  4802              LDR      r0,|L72.20|
00000a  f7fffffe          BL       _ZN6TModel7get_thrEv ; TModel::get_thr()
00000e  8028              STRH     r0,[r5,#0]
;;;416      
;;;417      return true;
000010  2001              MOVS     r0,#1
;;;418    }
000012  bd70              POP      {r4-r6,pc}
;;;419    
                          ENDP

                  |L72.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers8write_doEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers8write_doEj PROC ; TDevHandlers::write_do(unsigned)
;;;373    
;;;374    bool TDevHandlers::write_do( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;375    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;376      //проверка входных данных на допустимость не нужна - это делает прикладная часть протокола
;;;377      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;378                           
;;;379      Model.set_d_o_sets(
00000a  b10d              CBZ      r5,|L73.16|
;;;380                         (Val == 0x0000) 
;;;381                         ? TContact::_N_OPENED 
;;;382                         : TContact::_N_CLOSED 
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L73.18|
                  |L73.16|
000010  2000              MOVS     r0,#0                 ;381
                  |L73.18|
000012  4601              MOV      r1,r0                 ;381
000014  4802              LDR      r0,|L73.32|
000016  f7fffffe          BL       _ZN6TModel12set_d_o_setsE8TContact ; TModel::set_d_o_sets(TContact)
;;;383                        );
;;;384      
;;;385      return true;
00001a  2001              MOVS     r0,#1
;;;386    }
00001c  bd70              POP      {r4-r6,pc}
;;;387    
                          ENDP

00001e  0000              DCW      0x0000
                  |L73.32|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers9get_id_17Ev||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers9get_id_17Ev PROC ; TDevHandlers::get_id_17()
;;;1031   //----- Вспомогательные функции ------------------------------------------------------------------
;;;1032   const char *TDevHandlers::get_id_17()
000000  b510              PUSH     {r4,lr}
;;;1033   {
000002  4604              MOV      r4,r0
;;;1034     return ID17[ Model.get_dev_type() ];
000004  4803              LDR      r0,|L74.20|
000006  f7fffffe          BL       _ZN6TModel12get_dev_typeEv ; TModel::get_dev_type()
00000a  4903              LDR      r1,|L74.24|
00000c  f8510020          LDR      r0,[r1,r0,LSL #2]
;;;1035   }
000010  bd10              POP      {r4,pc}
;;;1036   //------------------------------------------------------------------------------------------------
                          ENDP

000012  0000              DCW      0x0000
                  |L74.20|
                          DCD      Model
                  |L74.24|
                          DCD      _ZN12TDevHandlers4ID17E ; TDevHandlers::ID17

                          AREA ||i._ZN12TDevHandlers9read_biasEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers9read_biasEj PROC ; TDevHandlers::read_bias(unsigned)
;;;442    
;;;443    bool TDevHandlers::read_bias( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;444    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;445      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;446      
;;;447      *ptr = Model.get_bias();
000008  4802              LDR      r0,|L75.20|
00000a  f7fffffe          BL       _ZN6TModel8get_biasEv ; TModel::get_bias()
00000e  8028              STRH     r0,[r5,#0]
;;;448      
;;;449      return true;
000010  2001              MOVS     r0,#1
;;;450    }
000012  bd70              POP      {r4-r6,pc}
;;;451    
                          ENDP

                  |L75.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers9read_hystEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers9read_hystEj PROC ; TDevHandlers::read_hyst(unsigned)
;;;426    
;;;427    bool TDevHandlers::read_hyst( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;428    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;429      uint16_t *ptr = reinterpret_cast<uint16_t *>(Addr);
000006  4625              MOV      r5,r4
;;;430      
;;;431      *ptr = Model.get_hyst();
000008  4802              LDR      r0,|L76.20|
00000a  f7fffffe          BL       _ZN6TModel8get_hystEv ; TModel::get_hyst()
00000e  8028              STRH     r0,[r5,#0]
;;;432      
;;;433      return true;
000010  2001              MOVS     r0,#1
;;;434    }
000012  bd70              POP      {r4-r6,pc}
;;;435    
                          ENDP

                  |L76.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlers9write_thrEj||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlers9write_thrEj PROC ; TDevHandlers::write_thr(unsigned)
;;;419    
;;;420    bool TDevHandlers::write_thr( uint32_t Addr )
000000  b570              PUSH     {r4-r6,lr}
;;;421    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;422      int16_t Val = *reinterpret_cast<uint16_t *>(Addr);
000006  8820              LDRH     r0,[r4,#0]
000008  b205              SXTH     r5,r0
;;;423      
;;;424      return Model.set_thr( Val );
00000a  b2e9              UXTB     r1,r5
00000c  4801              LDR      r0,|L77.20|
00000e  f7fffffe          BL       _ZN6TModel7set_thrEh ; TModel::set_thr(unsigned char)
;;;425    }
000012  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP

                  |L77.20|
                          DCD      Model

                          AREA ||i._ZN12TDevHandlersC1EPNS_11TPduHandlerE||, CODE, READONLY, ALIGN=2

                  _ZN12TDevHandlersC2EPNS_11TPduHandlerE                  ; Alternate entry point ; TDevHandlers::TDevHandlers__sub_object(TDevHandlers::TPduHandler*)
                  _ZN12TDevHandlersC1EPNS_11TPduHandlerE PROC ; TDevHandlers::TDevHandlers(TDevHandlers::TPduHandler*)
;;;234    
;;;235    TDevHandlers::TDevHandlers( TPduHandler *_PduHandler )
;;;236    :
;;;237    PduHandler( _PduHandler ),
;;;238    __BOOT_MODE( "BOOT_MODE" )
;;;239    {
;;;240      AdmPswd.fVal        = 0.0f;
;;;241      SuperPswd.fVal      = 0.0f;
;;;242      CalibParameter.fVal = 0.0f;
;;;243    }
;;;244    
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  6025              STR      r5,[r4,#0]
000008  220a              MOVS     r2,#0xa
00000a  a10b              ADR      r1,|L78.56|
00000c  1d20              ADDS     r0,r4,#4
00000e  f7fffffe          BL       __aeabi_memcpy4
000012  ed9f0a0c          VLDR     s0,|L78.68|
000016  ee100a10          VMOV     r0,s0
00001a  f8440f0e          STR      r0,[r4,#0xe]!
00001e  ed9f0a09          VLDR     s0,|L78.68|
000022  ee100a10          VMOV     r0,s0
000026  6060              STR      r0,[r4,#4]
000028  ed9f0a06          VLDR     s0,|L78.68|
00002c  ee100a10          VMOV     r0,s0
000030  60a0              STR      r0,[r4,#8]
000032  3c0e              SUBS     r4,r4,#0xe
000034  4620              MOV      r0,r4
000036  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L78.56|
000038  424f4f54          DCB      "BOOT_MODE",0
00003c  5f4d4f44
000040  4500    
000042  00                DCB      0
000043  00                DCB      0
                  |L78.68|
000044  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN12TDevHandlersD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN12TDevHandlersD2Ev                  ; Alternate entry point ; TDevHandlers::~TDevHandlers__sub_object()
                  _ZN12TDevHandlersD1Ev PROC ; TDevHandlers::~TDevHandlers()
;;;244    
;;;245    TDevHandlers::~TDevHandlers()
;;;246    {
;;;247    
;;;248    }
;;;249    
000000  4770              BX       lr
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN12TDevHandlersC1EPNS_11TPduHandlerE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlersC1EPNS_11TPduHandlerE||
                          DCD      0x00000001

                          AREA ||area_number.81||, LINKORDER=||i._ZN12TDevHandlersD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.81||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlersD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.82||, LINKORDER=||i._ZN12TDevHandlers17read_base_pos_errEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.82||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17read_base_pos_errEj||
                          DCD      0x00000001

                          AREA ||area_number.83||, LINKORDER=||i._ZN12TDevHandlers12read_connectEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.83||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers12read_connectEj||
                          DCD      0x00000001

                          AREA ||area_number.84||, LINKORDER=||i._ZN12TDevHandlers7read_hcEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.84||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers7read_hcEj||
                          DCD      0x00000001

                          AREA ||area_number.85||, LINKORDER=||i._ZN12TDevHandlers15read_hc_pos_errEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.85||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers15read_hc_pos_errEj||
                          DCD      0x00000001

                          AREA ||area_number.86||, LINKORDER=||i._ZN12TDevHandlers11rdi_placeboEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.86||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers11rdi_placeboEj||
                          DCD      0x00000001

                          AREA ||area_number.87||, LINKORDER=||i._ZN12TDevHandlers14read_base_memsEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.87||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers14read_base_memsEj||
                          DCD      0x00000001

                          AREA ||area_number.88||, LINKORDER=||i._ZN12TDevHandlers12read_hc_memsEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.88||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers12read_hc_memsEj||
                          DCD      0x00000001

                          AREA ||area_number.89||, LINKORDER=||i._ZN12TDevHandlers15read_open_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.89||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers15read_open_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.90||, LINKORDER=||i._ZN12TDevHandlers12read_code_swEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.90||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers12read_code_swEj||
                          DCD      0x00000001

                          AREA ||area_number.91||, LINKORDER=||i._ZN12TDevHandlers21read_pitch_bias_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.91||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers21read_pitch_bias_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.92||, LINKORDER=||i._ZN12TDevHandlers20read_roll_bias_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.92||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers20read_roll_bias_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.93||, LINKORDER=||i._ZN12TDevHandlers7read_doEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.93||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers7read_doEj||
                          DCD      0x00000001

                          AREA ||area_number.94||, LINKORDER=||i._ZN12TDevHandlers8write_doEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.94||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers8write_doEj||
                          DCD      0x00000001

                          AREA ||area_number.95||, LINKORDER=||i._ZN12TDevHandlers8read_thrEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.95||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers8read_thrEj||
                          DCD      0x00000001

                          AREA ||area_number.96||, LINKORDER=||i._ZN12TDevHandlers9write_thrEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.96||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers9write_thrEj||
                          DCD      0x00000001

                          AREA ||area_number.97||, LINKORDER=||i._ZN12TDevHandlers9read_hystEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.97||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers9read_hystEj||
                          DCD      0x00000001

                          AREA ||area_number.98||, LINKORDER=||i._ZN12TDevHandlers10write_hystEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.98||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers10write_hystEj||
                          DCD      0x00000001

                          AREA ||area_number.99||, LINKORDER=||i._ZN12TDevHandlers9read_biasEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.99||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers9read_biasEj||
                          DCD      0x00000001

                          AREA ||area_number.100||, LINKORDER=||i._ZN12TDevHandlers10write_biasEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.100||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers10write_biasEj||
                          DCD      0x00000001

                          AREA ||area_number.101||, LINKORDER=||i._ZN12TDevHandlers16read_axis_rotateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.101||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers16read_axis_rotateEj||
                          DCD      0x00000001

                          AREA ||area_number.102||, LINKORDER=||i._ZN12TDevHandlers17write_axis_rotateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.102||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17write_axis_rotateEj||
                          DCD      0x00000001

                          AREA ||area_number.103||, LINKORDER=||i._ZN12TDevHandlers21read_sens_axis_rotateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.103||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers21read_sens_axis_rotateEj||
                          DCD      0x00000001

                          AREA ||area_number.104||, LINKORDER=||i._ZN12TDevHandlers22write_sens_axis_rotateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.104||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers22write_sens_axis_rotateEj||
                          DCD      0x00000001

                          AREA ||area_number.105||, LINKORDER=||i._ZN12TDevHandlers16read_u_baud_rateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.105||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers16read_u_baud_rateEj||
                          DCD      0x00000001

                          AREA ||area_number.106||, LINKORDER=||i._ZN12TDevHandlers17write_u_baud_rateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.106||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17write_u_baud_rateEj||
                          DCD      0x00000001

                          AREA ||area_number.107||, LINKORDER=||i._ZN12TDevHandlers10read_u_parEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.107||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers10read_u_parEj||
                          DCD      0x00000001

                          AREA ||area_number.108||, LINKORDER=||i._ZN12TDevHandlers11write_u_parEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.108||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers11write_u_parEj||
                          DCD      0x00000001

                          AREA ||area_number.109||, LINKORDER=||i._ZN12TDevHandlers12read_mb_addrEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.109||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers12read_mb_addrEj||
                          DCD      0x00000001

                          AREA ||area_number.110||, LINKORDER=||i._ZN12TDevHandlers13write_mb_addrEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.110||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers13write_mb_addrEj||
                          DCD      0x00000001

                          AREA ||area_number.111||, LINKORDER=||i._ZN12TDevHandlers13read_prog_nbrEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.111||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers13read_prog_nbrEj||
                          DCD      0x00000001

                          AREA ||area_number.112||, LINKORDER=||i._ZN12TDevHandlers16read_adm_pswd_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.112||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers16read_adm_pswd_loEj||
                          DCD      0x00000001

                          AREA ||area_number.113||, LINKORDER=||i._ZN12TDevHandlers17write_adm_pswd_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.113||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17write_adm_pswd_loEj||
                          DCD      0x00000001

                          AREA ||area_number.114||, LINKORDER=||i._ZN12TDevHandlers16read_adm_pswd_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.114||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers16read_adm_pswd_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.115||, LINKORDER=||i._ZN12TDevHandlers17write_adm_pswd_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.115||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17write_adm_pswd_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.116||, LINKORDER=||i._ZN12TDevHandlers18read_super_pswd_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.116||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18read_super_pswd_loEj||
                          DCD      0x00000001

                          AREA ||area_number.117||, LINKORDER=||i._ZN12TDevHandlers19write_super_pswd_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.117||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers19write_super_pswd_loEj||
                          DCD      0x00000001

                          AREA ||area_number.118||, LINKORDER=||i._ZN12TDevHandlers18read_super_pswd_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.118||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18read_super_pswd_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.119||, LINKORDER=||i._ZN12TDevHandlers19write_super_pswd_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.119||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers19write_super_pswd_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.120||, LINKORDER=||i._ZN12TDevHandlers18read_calib_processEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.120||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18read_calib_processEj||
                          DCD      0x00000001

                          AREA ||area_number.121||, LINKORDER=||i._ZN12TDevHandlers19write_calib_processEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.121||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers19write_calib_processEj||
                          DCD      0x00000001

                          AREA ||area_number.122||, LINKORDER=||i._ZN12TDevHandlers20read_position_ctr_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.122||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers20read_position_ctr_loEj||
                          DCD      0x00000001

                          AREA ||area_number.123||, LINKORDER=||i._ZN12TDevHandlers20read_position_ctr_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers20read_position_ctr_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.124||, LINKORDER=||i._ZN12TDevHandlers17read_parameter_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.124||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17read_parameter_loEj||
                          DCD      0x00000001

                          AREA ||area_number.125||, LINKORDER=||i._ZN12TDevHandlers17read_parameter_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.125||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17read_parameter_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.126||, LINKORDER=||i._ZN12TDevHandlers18write_parameter_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.126||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18write_parameter_loEj||
                          DCD      0x00000001

                          AREA ||area_number.127||, LINKORDER=||i._ZN12TDevHandlers18write_parameter_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.127||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18write_parameter_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.128||, LINKORDER=||i._ZN12TDevHandlers14read_interconnEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.128||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers14read_interconnEj||
                          DCD      0x00000001

                          AREA ||area_number.129||, LINKORDER=||i._ZN12TDevHandlers15write_interconnEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.129||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers15write_interconnEj||
                          DCD      0x00000001

                          AREA ||area_number.130||, LINKORDER=||i._ZN12TDevHandlers13read_my_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.130||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers13read_my_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.131||, LINKORDER=||i._ZN12TDevHandlers15read_sens_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.131||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers15read_sens_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.132||, LINKORDER=||i._ZN12TDevHandlers18my_read_sens_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.132||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18my_read_sens_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.133||, LINKORDER=||i._ZN12TDevHandlers22read_sample_valid_signEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.133||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers22read_sample_valid_signEj||
                          DCD      0x00000001

                          AREA ||area_number.134||, LINKORDER=||i._ZN12TDevHandlers25my_read_sample_valid_signEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.134||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers25my_read_sample_valid_signEj||
                          DCD      0x00000001

                          AREA ||area_number.135||, LINKORDER=||i._ZN12TDevHandlers27read_sens_sample_valid_signEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.135||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers27read_sens_sample_valid_signEj||
                          DCD      0x00000001

                          AREA ||area_number.136||, LINKORDER=||i._ZN12TDevHandlers10read_calibEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.136||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers10read_calibEj||
                          DCD      0x00000001

                          AREA ||area_number.137||, LINKORDER=||i._ZN12TDevHandlers15read_sens_calibEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.137||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers15read_sens_calibEj||
                          DCD      0x00000001

                          AREA ||area_number.138||, LINKORDER=||i._ZN12TDevHandlers18my_read_sens_calibEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.138||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18my_read_sens_calibEj||
                          DCD      0x00000001

                          AREA ||area_number.139||, LINKORDER=||i._ZN12TDevHandlers26read_sens_pitch_bias_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.139||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers26read_sens_pitch_bias_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.140||, LINKORDER=||i._ZN12TDevHandlers29my_read_sens_pitch_bias_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.140||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers29my_read_sens_pitch_bias_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.141||, LINKORDER=||i._ZN12TDevHandlers25read_sens_roll_bias_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.141||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers25read_sens_roll_bias_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.142||, LINKORDER=||i._ZN12TDevHandlers28my_read_sens_roll_bias_angleEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.142||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers28my_read_sens_roll_bias_angleEj||
                          DCD      0x00000001

                          AREA ||area_number.143||, LINKORDER=||i._ZN12TDevHandlers17read_sens_code_swEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.143||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers17read_sens_code_swEj||
                          DCD      0x00000001

                          AREA ||area_number.144||, LINKORDER=||i._ZN12TDevHandlers20my_read_sens_code_swEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.144||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers20my_read_sens_code_swEj||
                          DCD      0x00000001

                          AREA ||area_number.145||, LINKORDER=||i._ZN12TDevHandlers24my_read_sens_axis_rotateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.145||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers24my_read_sens_axis_rotateEj||
                          DCD      0x00000001

                          AREA ||area_number.146||, LINKORDER=||i._ZN12TDevHandlers18read_sens_prog_nbrEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.146||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers18read_sens_prog_nbrEj||
                          DCD      0x00000001

                          AREA ||area_number.147||, LINKORDER=||i._ZN12TDevHandlers21my_read_sens_prog_nbrEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.147||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers21my_read_sens_prog_nbrEj||
                          DCD      0x00000001

                          AREA ||area_number.148||, LINKORDER=||i._ZN12TDevHandlers10read_stateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.148||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers10read_stateEj||
                          DCD      0x00000001

                          AREA ||area_number.149||, LINKORDER=||i._ZN12TDevHandlers23my_write_start_meas_cmdEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.149||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers23my_write_start_meas_cmdEj||
                          DCD      0x00000001

                          AREA ||area_number.150||, LINKORDER=||i._ZN12TDevHandlers20write_start_meas_cmdEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.150||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers20write_start_meas_cmdEj||
                          DCD      0x00000001

                          AREA ||area_number.151||, LINKORDER=||i._ZN12TDevHandlers25my_write_sens_axis_rotateEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.151||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers25my_write_sens_axis_rotateEj||
                          DCD      0x00000001

                          AREA ||area_number.152||, LINKORDER=||i._ZN12TDevHandlers19read_pd_pressure_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.152||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers19read_pd_pressure_loEj||
                          DCD      0x00000001

                          AREA ||area_number.153||, LINKORDER=||i._ZN12TDevHandlers19read_pd_pressure_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.153||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers19read_pd_pressure_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.154||, LINKORDER=||i._ZN12TDevHandlers20write_pd_pressure_loEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.154||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers20write_pd_pressure_loEj||
                          DCD      0x00000001

                          AREA ||area_number.155||, LINKORDER=||i._ZN12TDevHandlers20write_pd_pressure_hiEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.155||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers20write_pd_pressure_hiEj||
                          DCD      0x00000001

                          AREA ||area_number.156||, LINKORDER=||i._ZN12TDevHandlers31m_read_input_registers_completeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.156||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers31m_read_input_registers_completeEv||
                          DCD      0x00000001

                          AREA ||area_number.157||, LINKORDER=||i._ZN12TDevHandlers10chk_accessEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.157||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers10chk_accessEPv||
                          DCD      0x00000001

                          AREA ||area_number.158||, LINKORDER=||i._ZN12TDevHandlers9get_id_17Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.158||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN12TDevHandlers9get_id_17Ev||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Access
000000  000102            DCB      0x00,0x01,0x02

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  444b5331          DCB      "DKS1",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  444b5332          DCB      "DKS2",0
00000c  00      

                          AREA ||.data||, DATA, ALIGN=2

                  BaseToPcPDU
000000  0200              DCB      0x02,0x00
000002  03e8              DCW      0x03e8
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_base_pos_errEj ; TDevHandlers::read_base_pos_err(unsigned)
                          DCD      0x00000000
000010  0200              DCB      0x02,0x00
000012  03e9              DCW      0x03e9
                          DCD      Access
                          DCD      _ZN12TDevHandlers12read_connectEj ; TDevHandlers::read_connect(unsigned)
                          DCD      0x00000000
000020  0200              DCB      0x02,0x00
000022  03ea              DCW      0x03ea
                          DCD      Access
                          DCD      _ZN12TDevHandlers7read_hcEj ; TDevHandlers::read_hc(unsigned)
                          DCD      0x00000000
000030  0200              DCB      0x02,0x00
000032  03eb              DCW      0x03eb
                          DCD      Access
                          DCD      _ZN12TDevHandlers15read_hc_pos_errEj ; TDevHandlers::read_hc_pos_err(unsigned)
                          DCD      0x00000000
000040  0200              DCB      0x02,0x00
000042  03ec              DCW      0x03ec
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000050  0200              DCB      0x02,0x00
000052  03ed              DCW      0x03ed
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000060  0200              DCB      0x02,0x00
000062  03ee              DCW      0x03ee
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000070  0200              DCB      0x02,0x00
000072  03ef              DCW      0x03ef
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000080  0400              DCB      0x04,0x00
000082  03f2              DCW      0x03f2
                          DCD      Access
                          DCD      _ZN12TDevHandlers15read_open_angleEj ; TDevHandlers::read_open_angle(unsigned)
                          DCD      0x00000000
000090  0400              DCB      0x04,0x00
000092  03f3              DCW      0x03f3
                          DCD      Access
                          DCD      _ZN12TDevHandlers10read_stateEj ; TDevHandlers::read_state(unsigned)
                          DCD      0x00000000
0000a0  0400              DCB      0x04,0x00
0000a2  03f4              DCW      0x03f4
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers21read_pitch_bias_angleEj ; TDevHandlers::read_pitch_bias_angle(unsigned)
                          DCD      0x00000000
0000b0  0400              DCB      0x04,0x00
0000b2  03f5              DCW      0x03f5
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers20read_roll_bias_angleEj ; TDevHandlers::read_roll_bias_angle(unsigned)
                          DCD      0x00000000
0000c0  0100              DCB      0x01,0x00
0000c2  07d0              DCW      0x07d0
                          DCD      Access
                          DCD      _ZN12TDevHandlers7read_doEj ; TDevHandlers::read_do(unsigned)
                          DCD      0x00000000
0000d0  0500              DCB      0x05,0x00
0000d2  07d0              DCW      0x07d0
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers8write_doEj ; TDevHandlers::write_do(unsigned)
                          DCD      0x00000000
0000e0  0300              DCB      0x03,0x00
0000e2  07d1              DCW      0x07d1
                          DCD      Access
                          DCD      _ZN12TDevHandlers8read_thrEj ; TDevHandlers::read_thr(unsigned)
                          DCD      0x00000000
0000f0  0600              DCB      0x06,0x00
0000f2  07d1              DCW      0x07d1
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers9write_thrEj ; TDevHandlers::write_thr(unsigned)
                          DCD      0x00000000
000100  0300              DCB      0x03,0x00
000102  07d2              DCW      0x07d2
                          DCD      Access
                          DCD      _ZN12TDevHandlers9read_hystEj ; TDevHandlers::read_hyst(unsigned)
                          DCD      0x00000000
000110  0600              DCB      0x06,0x00
000112  07d2              DCW      0x07d2
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers10write_hystEj ; TDevHandlers::write_hyst(unsigned)
                          DCD      0x00000000
000120  0300              DCB      0x03,0x00
000122  07d3              DCW      0x07d3
                          DCD      Access
                          DCD      _ZN12TDevHandlers9read_biasEj ; TDevHandlers::read_bias(unsigned)
                          DCD      0x00000000
000130  0600              DCB      0x06,0x00
000132  07d3              DCW      0x07d3
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers10write_biasEj ; TDevHandlers::write_bias(unsigned)
                          DCD      0x00000000
000140  0300              DCB      0x03,0x00
000142  07d4              DCW      0x07d4
                          DCD      Access
                          DCD      _ZN12TDevHandlers16read_axis_rotateEj ; TDevHandlers::read_axis_rotate(unsigned)
                          DCD      0x00000000
000150  0600              DCB      0x06,0x00
000152  07d4              DCW      0x07d4
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_axis_rotateEj ; TDevHandlers::write_axis_rotate(unsigned)
                          DCD      0x00000000
000160  0300              DCB      0x03,0x00
000162  07d5              DCW      0x07d5
                          DCD      Access
                          DCD      _ZN12TDevHandlers21read_sens_axis_rotateEj ; TDevHandlers::read_sens_axis_rotate(unsigned)
                          DCD      0x00000000
000170  0600              DCB      0x06,0x00
000172  07d5              DCW      0x07d5
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers22write_sens_axis_rotateEj ; TDevHandlers::write_sens_axis_rotate(unsigned)
                          DCD      0x00000000
000180  0300              DCB      0x03,0x00
000182  0810              DCW      0x0810
                          DCD      Access
                          DCD      _ZN12TDevHandlers16read_u_baud_rateEj ; TDevHandlers::read_u_baud_rate(unsigned)
                          DCD      0x00000000
000190  0600              DCB      0x06,0x00
000192  0810              DCW      0x0810
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_u_baud_rateEj ; TDevHandlers::write_u_baud_rate(unsigned)
                          DCD      0x00000000
0001a0  0300              DCB      0x03,0x00
0001a2  0811              DCW      0x0811
                          DCD      Access
                          DCD      _ZN12TDevHandlers10read_u_parEj ; TDevHandlers::read_u_par(unsigned)
                          DCD      0x00000000
0001b0  0600              DCB      0x06,0x00
0001b2  0811              DCW      0x0811
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers11write_u_parEj ; TDevHandlers::write_u_par(unsigned)
                          DCD      0x00000000
0001c0  0300              DCB      0x03,0x00
0001c2  0812              DCW      0x0812
                          DCD      Access
                          DCD      _ZN12TDevHandlers12read_mb_addrEj ; TDevHandlers::read_mb_addr(unsigned)
                          DCD      0x00000000
0001d0  0600              DCB      0x06,0x00
0001d2  0812              DCW      0x0812
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers13write_mb_addrEj ; TDevHandlers::write_mb_addr(unsigned)
                          DCD      0x00000000
0001e0  0400              DCB      0x04,0x00
0001e2  0974              DCW      0x0974
                          DCD      Access
                          DCD      _ZN12TDevHandlers13read_prog_nbrEj ; TDevHandlers::read_prog_nbr(unsigned)
                          DCD      0x00000000
0001f0  0300              DCB      0x03,0x00
0001f2  097a              DCW      0x097a
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers16read_adm_pswd_loEj ; TDevHandlers::read_adm_pswd_lo(unsigned)
                          DCD      0x00000000
000200  0300              DCB      0x03,0x00
000202  097b              DCW      0x097b
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers16read_adm_pswd_hiEj ; TDevHandlers::read_adm_pswd_hi(unsigned)
                          DCD      0x00000000
000210  1000              DCB      0x10,0x00
000212  097a              DCW      0x097a
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_adm_pswd_loEj ; TDevHandlers::write_adm_pswd_lo(unsigned)
                          DCD      0x00000000
000220  1000              DCB      0x10,0x00
000222  097b              DCW      0x097b
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_adm_pswd_hiEj ; TDevHandlers::write_adm_pswd_hi(unsigned)
                          DCD      0x00000000
000230  0300              DCB      0x03,0x00
000232  097c              DCW      0x097c
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers18read_super_pswd_loEj ; TDevHandlers::read_super_pswd_lo(unsigned)
                          DCD      0x00000000
000240  0300              DCB      0x03,0x00
000242  097d              DCW      0x097d
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers18read_super_pswd_hiEj ; TDevHandlers::read_super_pswd_hi(unsigned)
                          DCD      0x00000000
000250  1000              DCB      0x10,0x00
000252  097c              DCW      0x097c
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers19write_super_pswd_loEj ; TDevHandlers::write_super_pswd_lo(unsigned)
                          DCD      0x00000000
000260  1000              DCB      0x10,0x00
000262  097d              DCW      0x097d
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers19write_super_pswd_hiEj ; TDevHandlers::write_super_pswd_hi(unsigned)
                          DCD      0x00000000
000270  0300              DCB      0x03,0x00
000272  0bb8              DCW      0x0bb8
                          DCD      Access
                          DCD      _ZN12TDevHandlers18read_calib_processEj ; TDevHandlers::read_calib_process(unsigned)
                          DCD      0x00000000
000280  0600              DCB      0x06,0x00
000282  0bb8              DCW      0x0bb8
                          DCD      Access
                          DCD      _ZN12TDevHandlers19write_calib_processEj ; TDevHandlers::write_calib_process(unsigned)
                          DCD      0x00000000
000290  0300              DCB      0x03,0x00
000292  0bb9              DCW      0x0bb9
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_parameter_loEj ; TDevHandlers::read_parameter_lo(unsigned)
                          DCD      0x00000000
0002a0  0300              DCB      0x03,0x00
0002a2  0bba              DCW      0x0bba
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_parameter_hiEj ; TDevHandlers::read_parameter_hi(unsigned)
                          DCD      0x00000000
0002b0  1000              DCB      0x10,0x00
0002b2  0bb9              DCW      0x0bb9
                          DCD      Access
                          DCD      _ZN12TDevHandlers18write_parameter_loEj ; TDevHandlers::write_parameter_lo(unsigned)
                          DCD      0x00000000
0002c0  1000              DCB      0x10,0x00
0002c2  0bba              DCW      0x0bba
                          DCD      Access
                          DCD      _ZN12TDevHandlers18write_parameter_hiEj ; TDevHandlers::write_parameter_hi(unsigned)
                          DCD      0x00000000
0002d0  0400              DCB      0x04,0x00
0002d2  1b58              DCW      0x1b58
                          DCD      Access
                          DCD      _ZN12TDevHandlers13read_my_angleEj ; TDevHandlers::read_my_angle(unsigned)
                          DCD      0x00000000
0002e0  0400              DCB      0x04,0x00
0002e2  1b59              DCW      0x1b59
                          DCD      Access
                          DCD      _ZN12TDevHandlers15read_sens_angleEj ; TDevHandlers::read_sens_angle(unsigned)
                          DCD      0x00000000
0002f0  0400              DCB      0x04,0x00
0002f2  1b5a              DCW      0x1b5a
                          DCD      Access
                          DCD      _ZN12TDevHandlers12read_code_swEj ; TDevHandlers::read_code_sw(unsigned)
                          DCD      0x00000000
000300  0400              DCB      0x04,0x00
000302  1b5b              DCW      0x1b5b
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_sens_code_swEj ; TDevHandlers::read_sens_code_sw(unsigned)
                          DCD      0x00000000
000310  0400              DCB      0x04,0x00
000312  1b5c              DCW      0x1b5c
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers18read_sens_prog_nbrEj ; TDevHandlers::read_sens_prog_nbr(unsigned)
                          DCD      0x00000000
000320  0400              DCB      0x04,0x00
000322  1b5d              DCW      0x1b5d
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers26read_sens_pitch_bias_angleEj ; TDevHandlers::read_sens_pitch_bias_angle(unsigned)
                          DCD      0x00000000
000330  0400              DCB      0x04,0x00
000332  1b5e              DCW      0x1b5e
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers25read_sens_roll_bias_angleEj ; TDevHandlers::read_sens_roll_bias_angle(unsigned)
                          DCD      0x00000000
000340  0200              DCB      0x02,0x00
000342  1b62              DCW      0x1b62
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers22read_sample_valid_signEj ; TDevHandlers::read_sample_valid_sign(unsigned)
                          DCD      0x00000000
000350  0200              DCB      0x02,0x00
000352  1b63              DCW      0x1b63
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers27read_sens_sample_valid_signEj ; TDevHandlers::read_sens_sample_valid_sign(unsigned)
                          DCD      0x00000000
000360  0200              DCB      0x02,0x00
000362  1b64              DCW      0x1b64
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers10read_calibEj ; TDevHandlers::read_calib(unsigned)
                          DCD      0x00000000
000370  0200              DCB      0x02,0x00
000372  1b65              DCW      0x1b65
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers15read_sens_calibEj ; TDevHandlers::read_sens_calib(unsigned)
                          DCD      0x00000000
000380  0200              DCB      0x02,0x00
000382  1b66              DCW      0x1b66
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers14read_base_memsEj ; TDevHandlers::read_base_mems(unsigned)
                          DCD      0x00000000
000390  0200              DCB      0x02,0x00
000392  1b67              DCW      0x1b67
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers12read_hc_memsEj ; TDevHandlers::read_hc_mems(unsigned)
                          DCD      0x00000000
0003a0  0300              DCB      0x03,0x00
0003a2  1f50              DCW      0x1f50
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers19read_pd_pressure_loEj ; TDevHandlers::read_pd_pressure_lo(unsigned)
                          DCD      0x00000000
0003b0  0300              DCB      0x03,0x00
0003b2  1f51              DCW      0x1f51
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers19read_pd_pressure_hiEj ; TDevHandlers::read_pd_pressure_hi(unsigned)
                          DCD      0x00000000
                  BaseToSensPDU
0003c0  0400              DCB      0x04,0x00
0003c2  1b59              DCW      0x1b59
                          DCD      Access
                          DCD      _ZN12TDevHandlers18my_read_sens_angleEj ; TDevHandlers::my_read_sens_angle(unsigned)
                          DCD      0x00000000
0003d0  0400              DCB      0x04,0x00
0003d2  1b5a              DCW      0x1b5a
                          DCD      Access
                          DCD      _ZN12TDevHandlers25my_read_sample_valid_signEj ; TDevHandlers::my_read_sample_valid_sign(unsigned)
                          DCD      0x00000000
0003e0  0400              DCB      0x04,0x00
0003e2  1b5b              DCW      0x1b5b
                          DCD      Access
                          DCD      _ZN12TDevHandlers20my_read_sens_code_swEj ; TDevHandlers::my_read_sens_code_sw(unsigned)
                          DCD      0x00000000
0003f0  0400              DCB      0x04,0x00
0003f2  1b5c              DCW      0x1b5c
                          DCD      Access
                          DCD      _ZN12TDevHandlers21my_read_sens_prog_nbrEj ; TDevHandlers::my_read_sens_prog_nbr(unsigned)
                          DCD      0x00000000
000400  0400              DCB      0x04,0x00
000402  1b5d              DCW      0x1b5d
                          DCD      Access
                          DCD      _ZN12TDevHandlers18my_read_sens_calibEj ; TDevHandlers::my_read_sens_calib(unsigned)
                          DCD      0x00000000
000410  0400              DCB      0x04,0x00
000412  1b5e              DCW      0x1b5e
                          DCD      Access
                          DCD      _ZN12TDevHandlers24my_read_sens_axis_rotateEj ; TDevHandlers::my_read_sens_axis_rotate(unsigned)
                          DCD      0x00000000
000420  0400              DCB      0x04,0x00
000422  1b5f              DCW      0x1b5f
                          DCD      Access
                          DCD      _ZN12TDevHandlers29my_read_sens_pitch_bias_angleEj ; TDevHandlers::my_read_sens_pitch_bias_angle(unsigned)
                          DCD      0x00000000
000430  0400              DCB      0x04,0x00
000432  1b60              DCW      0x1b60
                          DCD      Access
                          DCD      _ZN12TDevHandlers28my_read_sens_roll_bias_angleEj ; TDevHandlers::my_read_sens_roll_bias_angle(unsigned)
                          DCD      0x00000000
000440  0500              DCB      0x05,0x00
000442  1b62              DCW      0x1b62
                          DCD      Access
                          DCD      _ZN12TDevHandlers23my_write_start_meas_cmdEj ; TDevHandlers::my_write_start_meas_cmd(unsigned)
                          DCD      0x00000000
000450  0600              DCB      0x06,0x00
000452  1b6c              DCW      0x1b6c
                          DCD      Access
                          DCD      _ZN12TDevHandlers25my_write_sens_axis_rotateEj ; TDevHandlers::my_write_sens_axis_rotate(unsigned)
                          DCD      0x00000000
000460  0300              DCB      0x03,0x00
000462  03f8              DCW      0x03f8
                          DCD      Access
                          DCD      _ZN12TDevHandlers20write_pd_pressure_loEj ; TDevHandlers::write_pd_pressure_lo(unsigned)
                          DCD      0x00000000
000470  0300              DCB      0x03,0x00
000472  03f9              DCW      0x03f9
                          DCD      Access
                          DCD      _ZN12TDevHandlers20write_pd_pressure_hiEj ; TDevHandlers::write_pd_pressure_hi(unsigned)
                          DCD      0x00000000
                  SensToBasePDU
000480  0200              DCB      0x02,0x00
000482  03ea              DCW      0x03ea
                          DCD      Access
                          DCD      _ZN12TDevHandlers7read_hcEj ; TDevHandlers::read_hc(unsigned)
                          DCD      0x00000000
000490  0200              DCB      0x02,0x00
000492  03eb              DCW      0x03eb
                          DCD      Access
                          DCD      _ZN12TDevHandlers15read_hc_pos_errEj ; TDevHandlers::read_hc_pos_err(unsigned)
                          DCD      0x00000000
0004a0  0400              DCB      0x04,0x00
0004a2  03f3              DCW      0x03f3
                          DCD      Access
                          DCD      _ZN12TDevHandlers10read_stateEj ; TDevHandlers::read_state(unsigned)
                          DCD      0x00000000
0004b0  0400              DCB      0x04,0x00
0004b2  03f4              DCW      0x03f4
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers21read_pitch_bias_angleEj ; TDevHandlers::read_pitch_bias_angle(unsigned)
                          DCD      0x00000000
0004c0  0400              DCB      0x04,0x00
0004c2  03f5              DCW      0x03f5
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers20read_roll_bias_angleEj ; TDevHandlers::read_roll_bias_angle(unsigned)
                          DCD      0x00000000
0004d0  0100              DCB      0x01,0x00
0004d2  07d1              DCW      0x07d1
                          DCD      Access
                          DCD      _ZN12TDevHandlers14read_interconnEj ; TDevHandlers::read_interconn(unsigned)
                          DCD      0x00000000
0004e0  0500              DCB      0x05,0x00
0004e2  07d1              DCW      0x07d1
                          DCD      Access
                          DCD      _ZN12TDevHandlers15write_interconnEj ; TDevHandlers::write_interconn(unsigned)
                          DCD      0x00000000
0004f0  0300              DCB      0x03,0x00
0004f2  07d4              DCW      0x07d4
                          DCD      Access
                          DCD      _ZN12TDevHandlers16read_axis_rotateEj ; TDevHandlers::read_axis_rotate(unsigned)
                          DCD      0x00000000
000500  0600              DCB      0x06,0x00
000502  07d4              DCW      0x07d4
                          DCD      Access
                          DCD      _ZN12TDevHandlers17write_axis_rotateEj ; TDevHandlers::write_axis_rotate(unsigned)
                          DCD      0x00000000
000510  0300              DCB      0x03,0x00
000512  0810              DCW      0x0810
                          DCD      Access
                          DCD      _ZN12TDevHandlers16read_u_baud_rateEj ; TDevHandlers::read_u_baud_rate(unsigned)
                          DCD      0x00000000
000520  0600              DCB      0x06,0x00
000522  0810              DCW      0x0810
                          DCD      Access
                          DCD      _ZN12TDevHandlers17write_u_baud_rateEj ; TDevHandlers::write_u_baud_rate(unsigned)
                          DCD      0x00000000
000530  0300              DCB      0x03,0x00
000532  0811              DCW      0x0811
                          DCD      Access
                          DCD      _ZN12TDevHandlers10read_u_parEj ; TDevHandlers::read_u_par(unsigned)
                          DCD      0x00000000
000540  0600              DCB      0x06,0x00
000542  0811              DCW      0x0811
                          DCD      Access
                          DCD      _ZN12TDevHandlers11write_u_parEj ; TDevHandlers::write_u_par(unsigned)
                          DCD      0x00000000
000550  0300              DCB      0x03,0x00
000552  0812              DCW      0x0812
                          DCD      Access
                          DCD      _ZN12TDevHandlers12read_mb_addrEj ; TDevHandlers::read_mb_addr(unsigned)
                          DCD      0x00000000
000560  0600              DCB      0x06,0x00
000562  0812              DCW      0x0812
                          DCD      Access
                          DCD      _ZN12TDevHandlers13write_mb_addrEj ; TDevHandlers::write_mb_addr(unsigned)
                          DCD      0x00000000
000570  0400              DCB      0x04,0x00
000572  0974              DCW      0x0974
                          DCD      Access
                          DCD      _ZN12TDevHandlers13read_prog_nbrEj ; TDevHandlers::read_prog_nbr(unsigned)
                          DCD      0x00000000
000580  0300              DCB      0x03,0x00
000582  0bb8              DCW      0x0bb8
                          DCD      Access
                          DCD      _ZN12TDevHandlers18read_calib_processEj ; TDevHandlers::read_calib_process(unsigned)
                          DCD      0x00000000
000590  0600              DCB      0x06,0x00
000592  0bb8              DCW      0x0bb8
                          DCD      Access
                          DCD      _ZN12TDevHandlers19write_calib_processEj ; TDevHandlers::write_calib_process(unsigned)
                          DCD      0x00000000
0005a0  0300              DCB      0x03,0x00
0005a2  0bb9              DCW      0x0bb9
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_parameter_loEj ; TDevHandlers::read_parameter_lo(unsigned)
                          DCD      0x00000000
0005b0  0300              DCB      0x03,0x00
0005b2  0bba              DCW      0x0bba
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_parameter_hiEj ; TDevHandlers::read_parameter_hi(unsigned)
                          DCD      0x00000000
0005c0  1000              DCB      0x10,0x00
0005c2  0bb9              DCW      0x0bb9
                          DCD      Access
                          DCD      _ZN12TDevHandlers18write_parameter_loEj ; TDevHandlers::write_parameter_lo(unsigned)
                          DCD      0x00000000
0005d0  1000              DCB      0x10,0x00
0005d2  0bba              DCW      0x0bba
                          DCD      Access
                          DCD      _ZN12TDevHandlers18write_parameter_hiEj ; TDevHandlers::write_parameter_hi(unsigned)
                          DCD      0x00000000
0005e0  0400              DCB      0x04,0x00
0005e2  1b59              DCW      0x1b59
                          DCD      Access
                          DCD      _ZN12TDevHandlers13read_my_angleEj ; TDevHandlers::read_my_angle(unsigned)
                          DCD      0x00000000
0005f0  0400              DCB      0x04,0x00
0005f2  1b5a              DCW      0x1b5a
                          DCD      Access
                          DCD      _ZN12TDevHandlers22read_sample_valid_signEj ; TDevHandlers::read_sample_valid_sign(unsigned)
                          DCD      0x00000000
000600  0400              DCB      0x04,0x00
000602  1b5b              DCW      0x1b5b
                          DCD      Access
                          DCD      _ZN12TDevHandlers12read_code_swEj ; TDevHandlers::read_code_sw(unsigned)
                          DCD      0x00000000
000610  0400              DCB      0x04,0x00
000612  1b5c              DCW      0x1b5c
                          DCD      Access
                          DCD      _ZN12TDevHandlers13read_prog_nbrEj ; TDevHandlers::read_prog_nbr(unsigned)
                          DCD      0x00000000
000620  0400              DCB      0x04,0x00
000622  1b5d              DCW      0x1b5d
                          DCD      Access
                          DCD      _ZN12TDevHandlers10read_calibEj ; TDevHandlers::read_calib(unsigned)
                          DCD      0x00000000
000630  0400              DCB      0x04,0x00
000632  1b5e              DCW      0x1b5e
                          DCD      Access
                          DCD      _ZN12TDevHandlers16read_axis_rotateEj ; TDevHandlers::read_axis_rotate(unsigned)
                          DCD      0x00000000
000640  0400              DCB      0x04,0x00
000642  1b5f              DCW      0x1b5f
                          DCD      Access
                          DCD      _ZN12TDevHandlers21read_pitch_bias_angleEj ; TDevHandlers::read_pitch_bias_angle(unsigned)
                          DCD      0x00000000
000650  0400              DCB      0x04,0x00
000652  1b60              DCW      0x1b60
                          DCD      Access
                          DCD      _ZN12TDevHandlers20read_roll_bias_angleEj ; TDevHandlers::read_roll_bias_angle(unsigned)
                          DCD      0x00000000
000660  0500              DCB      0x05,0x00
000662  1b62              DCW      0x1b62
                          DCD      Access
                          DCD      _ZN12TDevHandlers20write_start_meas_cmdEj ; TDevHandlers::write_start_meas_cmd(unsigned)
                          DCD      0x00000000
000670  0200              DCB      0x02,0x00
000672  1b62              DCW      0x1b62
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers22read_sample_valid_signEj ; TDevHandlers::read_sample_valid_sign(unsigned)
                          DCD      0x00000000
000680  0200              DCB      0x02,0x00
000682  1b64              DCW      0x1b64
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers10read_calibEj ; TDevHandlers::read_calib(unsigned)
                          DCD      0x00000000
000690  0200              DCB      0x02,0x00
000692  1b67              DCW      0x1b67
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers12read_hc_memsEj ; TDevHandlers::read_hc_mems(unsigned)
                          DCD      0x00000000
0006a0  0600              DCB      0x06,0x00
0006a2  1b6c              DCW      0x1b6c
                          DCD      Access
                          DCD      _ZN12TDevHandlers17write_axis_rotateEj ; TDevHandlers::write_axis_rotate(unsigned)
                          DCD      0x00000000
                  SensToPcPDU
0006b0  0200              DCB      0x02,0x00
0006b2  03ea              DCW      0x03ea
                          DCD      Access
                          DCD      _ZN12TDevHandlers7read_hcEj ; TDevHandlers::read_hc(unsigned)
                          DCD      0x00000000
0006c0  0200              DCB      0x02,0x00
0006c2  03eb              DCW      0x03eb
                          DCD      Access
                          DCD      _ZN12TDevHandlers15read_hc_pos_errEj ; TDevHandlers::read_hc_pos_err(unsigned)
                          DCD      0x00000000
0006d0  0200              DCB      0x02,0x00
0006d2  03ec              DCW      0x03ec
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
0006e0  0200              DCB      0x02,0x00
0006e2  03ed              DCW      0x03ed
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
0006f0  0200              DCB      0x02,0x00
0006f2  03ee              DCW      0x03ee
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000700  0200              DCB      0x02,0x00
000702  03ef              DCW      0x03ef
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000710  0200              DCB      0x02,0x00
000712  03f0              DCW      0x03f0
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000720  0200              DCB      0x02,0x00
000722  03f1              DCW      0x03f1
                          DCD      Access
                          DCD      _ZN12TDevHandlers11rdi_placeboEj ; TDevHandlers::rdi_placebo(unsigned)
                          DCD      0x00000000
000730  0400              DCB      0x04,0x00
000732  03f3              DCW      0x03f3
                          DCD      Access
                          DCD      _ZN12TDevHandlers10read_stateEj ; TDevHandlers::read_state(unsigned)
                          DCD      0x00000000
000740  0400              DCB      0x04,0x00
000742  03f4              DCW      0x03f4
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers21read_pitch_bias_angleEj ; TDevHandlers::read_pitch_bias_angle(unsigned)
                          DCD      0x00000000
000750  0400              DCB      0x04,0x00
000752  03f5              DCW      0x03f5
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers20read_roll_bias_angleEj ; TDevHandlers::read_roll_bias_angle(unsigned)
                          DCD      0x00000000
000760  0100              DCB      0x01,0x00
000762  07d0              DCW      0x07d0
                          DCD      Access
                          DCD      _ZN12TDevHandlers7read_doEj ; TDevHandlers::read_do(unsigned)
                          DCD      0x00000000
000770  0500              DCB      0x05,0x00
000772  07d0              DCW      0x07d0
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers8write_doEj ; TDevHandlers::write_do(unsigned)
                          DCD      0x00000000
000780  0100              DCB      0x01,0x00
000782  07d1              DCW      0x07d1
                          DCD      Access
                          DCD      _ZN12TDevHandlers14read_interconnEj ; TDevHandlers::read_interconn(unsigned)
                          DCD      0x00000000
000790  0500              DCB      0x05,0x00
000792  07d1              DCW      0x07d1
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers15write_interconnEj ; TDevHandlers::write_interconn(unsigned)
                          DCD      0x00000000
0007a0  0300              DCB      0x03,0x00
0007a2  07d4              DCW      0x07d4
                          DCD      Access
                          DCD      _ZN12TDevHandlers16read_axis_rotateEj ; TDevHandlers::read_axis_rotate(unsigned)
                          DCD      0x00000000
0007b0  0600              DCB      0x06,0x00
0007b2  07d4              DCW      0x07d4
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_axis_rotateEj ; TDevHandlers::write_axis_rotate(unsigned)
                          DCD      0x00000000
0007c0  0300              DCB      0x03,0x00
0007c2  0810              DCW      0x0810
                          DCD      Access
                          DCD      _ZN12TDevHandlers16read_u_baud_rateEj ; TDevHandlers::read_u_baud_rate(unsigned)
                          DCD      0x00000000
0007d0  0600              DCB      0x06,0x00
0007d2  0810              DCW      0x0810
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_u_baud_rateEj ; TDevHandlers::write_u_baud_rate(unsigned)
                          DCD      0x00000000
0007e0  0300              DCB      0x03,0x00
0007e2  0811              DCW      0x0811
                          DCD      Access
                          DCD      _ZN12TDevHandlers10read_u_parEj ; TDevHandlers::read_u_par(unsigned)
                          DCD      0x00000000
0007f0  0600              DCB      0x06,0x00
0007f2  0811              DCW      0x0811
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers11write_u_parEj ; TDevHandlers::write_u_par(unsigned)
                          DCD      0x00000000
000800  0300              DCB      0x03,0x00
000802  0812              DCW      0x0812
                          DCD      Access
                          DCD      _ZN12TDevHandlers12read_mb_addrEj ; TDevHandlers::read_mb_addr(unsigned)
                          DCD      0x00000000
000810  0600              DCB      0x06,0x00
000812  0812              DCW      0x0812
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers13write_mb_addrEj ; TDevHandlers::write_mb_addr(unsigned)
                          DCD      0x00000000
000820  0400              DCB      0x04,0x00
000822  0974              DCW      0x0974
                          DCD      Access
                          DCD      _ZN12TDevHandlers13read_prog_nbrEj ; TDevHandlers::read_prog_nbr(unsigned)
                          DCD      0x00000000
000830  0300              DCB      0x03,0x00
000832  097a              DCW      0x097a
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers16read_adm_pswd_loEj ; TDevHandlers::read_adm_pswd_lo(unsigned)
                          DCD      0x00000000
000840  0300              DCB      0x03,0x00
000842  097b              DCW      0x097b
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers16read_adm_pswd_hiEj ; TDevHandlers::read_adm_pswd_hi(unsigned)
                          DCD      0x00000000
000850  1000              DCB      0x10,0x00
000852  097a              DCW      0x097a
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_adm_pswd_loEj ; TDevHandlers::write_adm_pswd_lo(unsigned)
                          DCD      0x00000000
000860  1000              DCB      0x10,0x00
000862  097b              DCW      0x097b
                          DCD      Access+0x1
                          DCD      _ZN12TDevHandlers17write_adm_pswd_hiEj ; TDevHandlers::write_adm_pswd_hi(unsigned)
                          DCD      0x00000000
000870  0300              DCB      0x03,0x00
000872  097c              DCW      0x097c
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers18read_super_pswd_loEj ; TDevHandlers::read_super_pswd_lo(unsigned)
                          DCD      0x00000000
000880  0300              DCB      0x03,0x00
000882  097d              DCW      0x097d
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers18read_super_pswd_hiEj ; TDevHandlers::read_super_pswd_hi(unsigned)
                          DCD      0x00000000
000890  1000              DCB      0x10,0x00
000892  097c              DCW      0x097c
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers19write_super_pswd_loEj ; TDevHandlers::write_super_pswd_lo(unsigned)
                          DCD      0x00000000
0008a0  1000              DCB      0x10,0x00
0008a2  097d              DCW      0x097d
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers19write_super_pswd_hiEj ; TDevHandlers::write_super_pswd_hi(unsigned)
                          DCD      0x00000000
0008b0  0300              DCB      0x03,0x00
0008b2  0bb8              DCW      0x0bb8
                          DCD      Access
                          DCD      _ZN12TDevHandlers18read_calib_processEj ; TDevHandlers::read_calib_process(unsigned)
                          DCD      0x00000000
0008c0  0600              DCB      0x06,0x00
0008c2  0bb8              DCW      0x0bb8
                          DCD      Access
                          DCD      _ZN12TDevHandlers19write_calib_processEj ; TDevHandlers::write_calib_process(unsigned)
                          DCD      0x00000000
0008d0  0300              DCB      0x03,0x00
0008d2  0bb9              DCW      0x0bb9
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_parameter_loEj ; TDevHandlers::read_parameter_lo(unsigned)
                          DCD      0x00000000
0008e0  0300              DCB      0x03,0x00
0008e2  0bba              DCW      0x0bba
                          DCD      Access
                          DCD      _ZN12TDevHandlers17read_parameter_hiEj ; TDevHandlers::read_parameter_hi(unsigned)
                          DCD      0x00000000
0008f0  1000              DCB      0x10,0x00
0008f2  0bb9              DCW      0x0bb9
                          DCD      Access
                          DCD      _ZN12TDevHandlers18write_parameter_loEj ; TDevHandlers::write_parameter_lo(unsigned)
                          DCD      0x00000000
000900  1000              DCB      0x10,0x00
000902  0bba              DCW      0x0bba
                          DCD      Access
                          DCD      _ZN12TDevHandlers18write_parameter_hiEj ; TDevHandlers::write_parameter_hi(unsigned)
                          DCD      0x00000000
000910  0400              DCB      0x04,0x00
000912  1b59              DCW      0x1b59
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers13read_my_angleEj ; TDevHandlers::read_my_angle(unsigned)
                          DCD      0x00000000
000920  0400              DCB      0x04,0x00
000922  1b5b              DCW      0x1b5b
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers12read_code_swEj ; TDevHandlers::read_code_sw(unsigned)
                          DCD      0x00000000
000930  0200              DCB      0x02,0x00
000932  1b62              DCW      0x1b62
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers22read_sample_valid_signEj ; TDevHandlers::read_sample_valid_sign(unsigned)
                          DCD      0x00000000
000940  0200              DCB      0x02,0x00
000942  1b64              DCW      0x1b64
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers10read_calibEj ; TDevHandlers::read_calib(unsigned)
                          DCD      0x00000000
000950  0200              DCB      0x02,0x00
000952  1b67              DCW      0x1b67
                          DCD      Access+0x2
                          DCD      _ZN12TDevHandlers12read_hc_memsEj ; TDevHandlers::read_hc_mems(unsigned)
                          DCD      0x00000000
                  BaseToPcPduHandler
                          DCD      BaseToPcPDU
000964  003c              DCW      0x003c
000966  0000              DCB      0x00,0x00
                  BaseToSensPduHandler
                          DCD      BaseToSensPDU
00096c  000c              DCW      0x000c
00096e  0000              DCB      0x00,0x00
                  SensToBasePduHandler
                          DCD      SensToBasePDU
000974  0023              DCW      0x0023
000976  0000              DCB      0x00,0x00
                  SensToPcPduHandler
                          DCD      SensToPcPDU
00097c  002b              DCW      0x002b
00097e  0000              DCB      0x00,0x00
                  _ZN12TDevHandlers4ID17E ; TDevHandlers::ID17
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x8

;*** Start embedded assembler ***

#line 1 "Source\\Protocols\\src\\dev_handlers.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_dev_handlers_cpp_d8922d61___ZN38_INTERNAL_16_dev_handlers_cpp_d8922d617__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___16_dev_handlers_cpp_d8922d61___ZN38_INTERNAL_16_dev_handlers_cpp_d8922d617__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_dev_handlers_cpp_d8922d61___ZN38_INTERNAL_16_dev_handlers_cpp_d8922d617__REVSHEi|
#line 402
|__asm___16_dev_handlers_cpp_d8922d61___ZN38_INTERNAL_16_dev_handlers_cpp_d8922d617__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_dev_handlers_cpp_d8922d61___ZN38_INTERNAL_16_dev_handlers_cpp_d8922d615__RRXEj|
#line 587
|__asm___16_dev_handlers_cpp_d8922d61___ZN38_INTERNAL_16_dev_handlers_cpp_d8922d615__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
