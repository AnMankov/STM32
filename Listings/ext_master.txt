; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\ext_master.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ext_master.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I.\Source\Ext_Dev\inc\AT45 -I.\Objects -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\ext_master.crf Source\Protocols\src\ext_master.cpp]
                          THUMB

                          AREA ||i._ZN10TExtMaster10all_pkt_txEPKht||, CODE, READONLY, ALIGN=1

                  _ZN10TExtMaster10all_pkt_txEPKht PROC ; TExtMaster::all_pkt_tx(const unsigned char*, unsigned short)
;;;149    
;;;150    const uint8_t *TExtMaster::all_pkt_tx( const uint8_t *Data, uint16_t Qty )
000000  b570              PUSH     {r4-r6,lr}
;;;151    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;152      start_wrap_tx( Data, Qty );                                       //Data и Qty в функции не используются
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN10TExtMaster13start_wrap_txEPKht ; TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)
;;;153      std::copy( 
000012  4628              MOV      r0,r5
000014  19aa              ADDS     r2,r5,r6
000016  f104011e          ADD      r1,r4,#0x1e
00001a  e003              B        |L1.36|
                  |L1.28|
00001c  7803              LDRB     r3,[r0,#0]
00001e  700b              STRB     r3,[r1,#0]
000020  1c40              ADDS     r0,r0,#1
000022  1c49              ADDS     r1,r1,#1
                  |L1.36|
000024  4290              CMP      r0,r2
000026  d1f9              BNE      |L1.28|
000028  bf00              NOP      
;;;154                Data, 
;;;155                Data + Qty, 
;;;156                Tx + sizeof( TStartPkt ) 
;;;157               );
;;;158      Tx[ sizeof( TStartPkt ) + Qty ] = POSTAMBLE;
00002a  225a              MOVS     r2,#0x5a
00002c  1cb0              ADDS     r0,r6,#2
00002e  f104011c          ADD      r1,r4,#0x1c
000032  540a              STRB     r2,[r1,r0]
;;;159      
;;;160      return Tx;
000034  4608              MOV      r0,r1
;;;161    }
000036  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i._ZN10TExtMaster10no_wrap_txEPKht||, CODE, READONLY, ALIGN=1

                  _ZN10TExtMaster10no_wrap_txEPKht PROC ; TExtMaster::no_wrap_tx(const unsigned char*, unsigned short)
;;;125    
;;;126    const uint8_t *TExtMaster::no_wrap_tx( const uint8_t *Data, uint16_t Qty )
000000  4603              MOV      r3,r0
;;;127    {
;;;128    //  auto Last = Data + Qty;
;;;129    //  
;;;130    //  std::copy( Data, Last, Tx );
;;;131      return Data;
000002  4608              MOV      r0,r1
;;;132    }
000004  4770              BX       lr
;;;133    
                          ENDP


                          AREA ||i._ZN10TExtMaster13start_wrap_txEPKht||, CODE, READONLY, ALIGN=1

                  _ZN10TExtMaster13start_wrap_txEPKht PROC ; TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)
;;;133    
;;;134    const uint8_t *TExtMaster::start_wrap_tx( const uint8_t *Data, uint16_t Qty )
000000  b5ff              PUSH     {r0-r7,lr}
;;;135    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;136      TStartPkt *pStart = reinterpret_cast< TStartPkt * >( Tx );
000008  f104051c          ADD      r5,r4,#0x1c
;;;137      pStart->PreAmble  = PREAMBLE;
00000c  20a5              MOVS     r0,#0xa5
00000e  7028              STRB     r0,[r5,#0]
;;;138      pStart->Cmd       = get_data().Cmd;
000010  4621              MOV      r1,r4
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       _ZN10TExtMaster8get_dataEv ; TExtMaster::get_data()
000018  e9dd0100          LDRD     r0,r1,[sp,#0]
00001c  e9cd0102          STRD     r0,r1,[sp,#8]
000020  f89d0008          LDRB     r0,[sp,#8]
000024  7068              STRB     r0,[r5,#1]
;;;139      
;;;140      return Tx;
000026  f104001c          ADD      r0,r4,#0x1c
;;;141    }
00002a  b004              ADD      sp,sp,#0x10
00002c  bdf0              POP      {r4-r7,pc}
;;;142    
                          ENDP


                          AREA ||i._ZN10TExtMaster14finish_wrap_txEPKht||, CODE, READONLY, ALIGN=1

                  _ZN10TExtMaster14finish_wrap_txEPKht PROC ; TExtMaster::finish_wrap_tx(const unsigned char*, unsigned short)
;;;142    
;;;143    const uint8_t *TExtMaster::finish_wrap_tx( const uint8_t *Data, uint16_t Qty )
000000  4603              MOV      r3,r0
;;;144    {
;;;145      Tx[ 0U ] = POSTAMBLE;
000002  205a              MOVS     r0,#0x5a
000004  7718              STRB     r0,[r3,#0x1c]
;;;146      
;;;147      return Tx;
000006  f103001c          ADD      r0,r3,#0x1c
;;;148    }
00000a  4770              BX       lr
;;;149    
                          ENDP


                          AREA ||i._ZN10TExtMaster7tx_dataEPKhtNS_11TWrapTxSignE||, CODE, READONLY, ALIGN=2

                  _ZN10TExtMaster7tx_dataEPKhtNS_11TWrapTxSignE PROC ; TExtMaster::tx_data(const unsigned char*, unsigned short, TExtMaster::TWrapTxSign)
;;;93     
;;;94     void TExtMaster::tx_data( const uint8_t *Data, const uint16_t Size, TWrapTxSign WrapTxSign  )
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;95     {  
000004  b091              SUB      sp,sp,#0x44
000006  4605              MOV      r5,r0
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;96       typedef const uint8_t *( TExtMaster::*TFormHandler )( const uint8_t *Data, uint16_t Qty );
;;;97       
;;;98       struct TFormPkt
;;;99       {
;;;100        TFormHandler FormHandler;
;;;101        TWrapTxSign  WrapTxSign;
;;;102        uint8_t      WrapQty;
;;;103      };
;;;104    
;;;105      TFormPkt FormPkt[] =
00000c  2230              MOVS     r2,#0x30
00000e  491c              LDR      r1,|L5.128|
000010  a805              ADD      r0,sp,#0x14
000012  f7fffffe          BL       __aeabi_memcpy4
;;;106      {   
;;;107        { &TExtMaster::no_wrap_tx,     TWrapTxSign::__NO_WRAP_TX    , 0U                   }, //__NO_WRAP_TX
;;;108        { &TExtMaster::start_wrap_tx,  TWrapTxSign::__START_WRAP_TX , sizeof( TStartPkt )  }, //__START_WRAP_TX
;;;109        { &TExtMaster::finish_wrap_tx, TWrapTxSign::__FINISH_WRAP_TX, sizeof( TFinishPkt ) }, //__FINISH_WRAP_TX
;;;110        { &TExtMaster::all_pkt_tx,     TWrapTxSign::__ALL_WRAP_TX   , sizeof( TWrapPkt )   }, //__ALL_WRAP_TX
;;;111      };
;;;112      
;;;113      for ( auto item : FormPkt )
000016  f10d0814          ADD      r8,sp,#0x14
00001a  4644              MOV      r4,r8
00001c  f1080030          ADD      r0,r8,#0x30
000020  9004              STR      r0,[sp,#0x10]
000022  e026              B        |L5.114|
                  |L5.36|
000024  e8940007          LDM      r4,{r0-r2}
000028  ab01              ADD      r3,sp,#4
00002a  c307              STM      r3!,{r0-r2}
;;;114      {
;;;115        if ( item.WrapTxSign == WrapTxSign )
00002c  f89d000c          LDRB     r0,[sp,#0xc]
000030  42b8              CMP      r0,r7
000032  d11d              BNE      |L5.112|
;;;116        {
;;;117          const uint8_t *TxBufAddr = ( this->*item.FormHandler )( Data, Size ); //формирование буфера на отправку
000034  9802              LDR      r0,[sp,#8]
000036  eb050960          ADD      r9,r5,r0,ASR #1
00003a  f0000001          AND      r0,r0,#1
00003e  b908              CBNZ     r0,|L5.68|
000040  9801              LDR      r0,[sp,#4]
000042  e006              B        |L5.82|
                  |L5.68|
000044  f8d90000          LDR      r0,[r9,#0]
000048  9901              LDR      r1,[sp,#4]
00004a  eb000a01          ADD      r10,r0,r1
00004e  f8da0000          LDR      r0,[r10,#0]
                  |L5.82|
000052  4683              MOV      r11,r0
000054  4632              MOV      r2,r6
000056  4648              MOV      r0,r9
000058  9912              LDR      r1,[sp,#0x48]
00005a  47d8              BLX      r11
00005c  9000              STR      r0,[sp,#0]
;;;118        
;;;119          write_burst( TxBufAddr, Size + item.WrapQty );                  //отправка сформированного буфера
00005e  f89d000d          LDRB     r0,[sp,#0xd]
000062  4430              ADD      r0,r0,r6
000064  b282              UXTH     r2,r0
000066  4628              MOV      r0,r5
000068  9900              LDR      r1,[sp,#0]
00006a  f7fffffe          BL       _ZN6TUsart11write_burstEPKht ; TUsart::write_burst(const unsigned char*, unsigned short)
;;;120          
;;;121          break;
00006e  e003              B        |L5.120|
                  |L5.112|
;;;122        }
000070  340c              ADDS     r4,r4,#0xc
                  |L5.114|
000072  9804              LDR      r0,[sp,#0x10]
000074  4284              CMP      r4,r0
000076  d1d5              BNE      |L5.36|
                  |L5.120|
000078  bf00              NOP                            ;121
;;;123      }
;;;124    }
00007a  b015              ADD      sp,sp,#0x54
00007c  e8bd8ff0          POP      {r4-r11,pc}
;;;125    
                          ENDP

                  |L5.128|
                          DCD      ||.constdata||+0xc

                          AREA ||i._ZN10TExtMaster8get_dataEv||, CODE, READONLY, ALIGN=1

                  _ZN10TExtMaster8get_dataEv PROC ; TExtMaster::get_data()
;;;88     
;;;89     TExtMaster::TData TExtMaster::get_data()
000000  6aca              LDR      r2,[r1,#0x2c]
;;;90     {
;;;91       return ReqPkt->Data;
000002  f8d23001          LDR      r3,[r2,#1]
000006  6003              STR      r3,[r0,#0]
000008  7952              LDRB     r2,[r2,#5]
00000a  7102              STRB     r2,[r0,#4]
;;;92     }
00000c  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i._ZN10TExtMaster9parse_pktEv||, CODE, READONLY, ALIGN=1

                  _ZN10TExtMaster9parse_pktEv PROC ; TExtMaster::parse_pkt()
;;;26     
;;;27     void TExtMaster::parse_pkt()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;28     { 
000004  4605              MOV      r5,r0
;;;29       uint8_t Byte = 0U;
000006  2400              MOVS     r4,#0
;;;30       
;;;31       enum TRxState
;;;32       {
;;;33         __PRE  = 0U,
;;;34         __DATA = 1U,
;;;35         __POST = 2U,
;;;36         __END  = 3U,
;;;37       };
;;;38       
;;;39       TRxState RxState = TRxState::__PRE;
000008  2700              MOVS     r7,#0
;;;40       
;;;41       uint8_t Ctr = 0U; //счетчик принятых байтов
00000a  2600              MOVS     r6,#0
;;;42       
;;;43       enable_rx();
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       _ZN6TUsart9enable_rxEv ; TUsart::enable_rx()
;;;44       
;;;45       do 
000012  bf00              NOP      
                  |L7.20|
;;;46       {
;;;47         Byte = read_byte();
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       _ZN6TUsart9read_byteEv ; TUsart::read_byte()
00001a  4604              MOV      r4,r0
;;;48         
;;;49         switch ( RxState )
00001c  b127              CBZ      r7,|L7.40|
00001e  2f01              CMP      r7,#1
000020  d00c              BEQ      |L7.60|
000022  2f02              CMP      r7,#2
000024  d11e              BNE      |L7.100|
000026  e013              B        |L7.80|
                  |L7.40|
;;;50         {
;;;51           case TRxState::__PRE:
;;;52                if ( Byte == PREAMBLE )
000028  2ca5              CMP      r4,#0xa5
00002a  d106              BNE      |L7.58|
;;;53                {
;;;54                  RxState = TRxState::__DATA;
00002c  2701              MOVS     r7,#1
;;;55                  Rx[ Ctr++ ] = Byte;
00002e  4630              MOV      r0,r6
000030  1c71              ADDS     r1,r6,#1
000032  b2ce              UXTB     r6,r1
000034  f1050115          ADD      r1,r5,#0x15
000038  540c              STRB     r4,[r1,r0]
                  |L7.58|
;;;56                }
;;;57                
;;;58                break;
00003a  e014              B        |L7.102|
                  |L7.60|
;;;59           case TRxState::__DATA:
;;;60                Rx[ Ctr++ ] = Byte;           
00003c  4630              MOV      r0,r6
00003e  1c71              ADDS     r1,r6,#1
000040  b2ce              UXTB     r6,r1
000042  f1050115          ADD      r1,r5,#0x15
000046  540c              STRB     r4,[r1,r0]
;;;61                if ( Ctr >= ( sizeof(TReqPkt) - 1 ) )
000048  2e06              CMP      r6,#6
00004a  d300              BCC      |L7.78|
;;;62                {
;;;63                  RxState = TRxState::__POST;
00004c  2702              MOVS     r7,#2
                  |L7.78|
;;;64                }
;;;65           
;;;66                break;
00004e  e00a              B        |L7.102|
                  |L7.80|
;;;67           case TRxState::__POST:
;;;68                if ( Byte == POSTAMBLE )
000050  2c5a              CMP      r4,#0x5a
000052  d104              BNE      |L7.94|
;;;69                {
;;;70                  Rx[ Ctr ] = Byte;
000054  f1050015          ADD      r0,r5,#0x15
000058  5584              STRB     r4,[r0,r6]
;;;71                  RxState   = TRxState::__END;
00005a  2703              MOVS     r7,#3
00005c  e001              B        |L7.98|
                  |L7.94|
;;;72                }
;;;73                else //пакет считается невалидным, ожидаем приема заново
;;;74                {
;;;75                  RxState = TRxState::__PRE;
00005e  2700              MOVS     r7,#0
;;;76                  Ctr = 0U;
000060  2600              MOVS     r6,#0
                  |L7.98|
;;;77                }
;;;78                
;;;79                break;
000062  e000              B        |L7.102|
                  |L7.100|
;;;80           default:
;;;81                
;;;82                break;
000064  bf00              NOP      
                  |L7.102|
000066  bf00              NOP                            ;58
;;;83         }
;;;84       } while ( RxState != __END );
000068  2f03              CMP      r7,#3
00006a  d1d3              BNE      |L7.20|
;;;85       
;;;86       disable_rx();
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       _ZN6TUsart10disable_rxEv ; TUsart::disable_rx()
;;;87     }
000072  e8bd81f0          POP      {r4-r8,pc}
;;;88     
                          ENDP


                          AREA ||i._ZN10TExtMasterC1ERK9TUsart_HW||, CODE, READONLY, ALIGN=2

                  _ZN10TExtMasterC2ERK9TUsart_HW                  ; Alternate entry point ; TExtMaster::TExtMaster__sub_object(const TUsart_HW&)
                  _ZN10TExtMasterC1ERK9TUsart_HW PROC ; TExtMaster::TExtMaster(const TUsart_HW&)
;;;4      
;;;5      TExtMaster::TExtMaster(
;;;6                             const TUsart_HW &Usart_HW 
;;;7                            )
;;;8      :
;;;9      TUsart( 
;;;10            Usart_HW,
;;;11            {
;;;12             TBaudRate::_500000,
;;;13             TParity::_NONE,
;;;14             TStops::_STOPBITS_1
;;;15            }       
;;;16           ),
;;;17     ReqPkt( reinterpret_cast< TReqPkt * >( Rx ) )
;;;18     {
;;;19     
;;;20     }
;;;21               
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4a08              LDR      r2,|L8.40|
000008  ca07              LDM      r2,{r0-r2}
00000a  e88d0007          STM      sp,{r0-r2}
00000e  2300              MOVS     r3,#0
000010  466a              MOV      r2,sp
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6TUsartC1ERK9TUsart_HWRKNS_5TSetsENS_5TModeE ; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
00001a  4604              MOV      r4,r0
00001c  f1040015          ADD      r0,r4,#0x15
000020  62e0              STR      r0,[r4,#0x2c]
000022  4620              MOV      r0,r4
000024  bd3e              POP      {r1-r5,pc}
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      ||.constdata||

                          AREA ||i._ZN10TExtMasterD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN10TExtMasterD2Ev                  ; Alternate entry point ; TExtMaster::~TExtMaster__sub_object()
                  _ZN10TExtMasterD1Ev PROC ; TExtMaster::~TExtMaster()
;;;21               
;;;22     TExtMaster::~TExtMaster()
;;;23     {
;;;24     
;;;25     }
;;;26     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN6TUsartD1Ev ; TUsart::~TUsart()
00000a  4604              MOV      r4,r0
00000c  4620              MOV      r0,r4
00000e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN10TExtMasterC1ERK9TUsart_HW||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMasterC1ERK9TUsart_HW||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN10TExtMasterD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMasterD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN10TExtMaster9parse_pktEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMaster9parse_pktEv||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN10TExtMaster8get_dataEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMaster8get_dataEv||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN10TExtMaster7tx_dataEPKhtNS_11TWrapTxSignE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMaster7tx_dataEPKhtNS_11TWrapTxSignE||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i._ZN10TExtMaster10no_wrap_txEPKht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMaster10no_wrap_txEPKht||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN10TExtMaster13start_wrap_txEPKht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMaster13start_wrap_txEPKht||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN10TExtMaster14finish_wrap_txEPKht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMaster14finish_wrap_txEPKht||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN10TExtMaster10all_pkt_txEPKht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN10TExtMaster10all_pkt_txEPKht||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x0007a120
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      _ZN10TExtMaster10no_wrap_txEPKht ; TExtMaster::no_wrap_tx(const unsigned char*, unsigned short)
                          DCD      0x00000000
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      _ZN10TExtMaster13start_wrap_txEPKht ; TExtMaster::start_wrap_tx(const unsigned char*, unsigned short)
                          DCD      0x00000000
000020  01020000          DCB      0x01,0x02,0x00,0x00
                          DCD      _ZN10TExtMaster14finish_wrap_txEPKht ; TExtMaster::finish_wrap_tx(const unsigned char*, unsigned short)
                          DCD      0x00000000
00002c  02010000          DCB      0x02,0x01,0x00,0x00
                          DCD      _ZN10TExtMaster10all_pkt_txEPKht ; TExtMaster::all_pkt_tx(const unsigned char*, unsigned short)
                          DCD      0x00000000
000038  03030000          DCB      0x03,0x03,0x00,0x00

;*** Start embedded assembler ***

#line 1 "Source\\Protocols\\src\\ext_master.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_ext_master_cpp_1bd2570e___ZN36_INTERNAL_14_ext_master_cpp_1bd2570e7__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___14_ext_master_cpp_1bd2570e___ZN36_INTERNAL_14_ext_master_cpp_1bd2570e7__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_ext_master_cpp_1bd2570e___ZN36_INTERNAL_14_ext_master_cpp_1bd2570e7__REVSHEi|
#line 402
|__asm___14_ext_master_cpp_1bd2570e___ZN36_INTERNAL_14_ext_master_cpp_1bd2570e7__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_ext_master_cpp_1bd2570e___ZN36_INTERNAL_14_ext_master_cpp_1bd2570e5__RRXEj|
#line 587
|__asm___14_ext_master_cpp_1bd2570e___ZN36_INTERNAL_14_ext_master_cpp_1bd2570e5__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
