; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\modbus_link.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\modbus_link.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\modbus_link.crf Source\Protocols\src\modbus_link.cpp]
                          THUMB

                          AREA ||i.DMA1_Channel4_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel4_IRQHandler PROC
;;;525    
;;;526    extern "C" void DMA1_Channel4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;527    {
;;;528      if ( LL_DMA_IsActiveFlag_TC4( DMA1 ) )             //проверка флага transfer complete
000002  bf00              NOP      
000004  480a              LDR      r0,|L1.48|
000006  6800              LDR      r0,[r0,#0]
000008  f3c03040          UBFX     r0,r0,#13,#1
00000c  b148              CBZ      r0,|L1.34|
;;;529      {
;;;530        LL_DMA_ClearFlag_TC4( DMA1 );
00000e  bf00              NOP      
000010  f44f5000          MOV      r0,#0x2000
000014  4906              LDR      r1,|L1.48|
000016  6048              STR      r0,[r1,#4]
000018  bf00              NOP      
;;;531        LL_DMA_DisableChannel( DMA1, LL_DMA_CHANNEL_4 );
00001a  2104              MOVS     r1,#4
00001c  4804              LDR      r0,|L1.48|
00001e  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
                  |L1.34|
;;;532      }
;;;533      set_eof( DMA1, LL_DMA_CHANNEL_4, false );
000022  2200              MOVS     r2,#0
000024  2104              MOVS     r1,#4
000026  4802              LDR      r0,|L1.48|
000028  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb ; [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
;;;534    //  Do.closed();
;;;535    }
00002c  bd10              POP      {r4,pc}
;;;536    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x40020000

                          AREA ||i.DMA1_Channel7_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel7_IRQHandler PROC
;;;503    
;;;504    extern "C" void DMA1_Channel7_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;505    {
;;;506      if ( LL_DMA_IsActiveFlag_TC7( DMA1 ) )             //проверка флага transfer complete
000002  bf00              NOP      
000004  480a              LDR      r0,|L2.48|
000006  6800              LDR      r0,[r0,#0]
000008  f3c06040          UBFX     r0,r0,#25,#1
00000c  b148              CBZ      r0,|L2.34|
;;;507      {
;;;508        LL_DMA_ClearFlag_TC7( DMA1 );
00000e  bf00              NOP      
000010  f04f7000          MOV      r0,#0x2000000
000014  4906              LDR      r1,|L2.48|
000016  6048              STR      r0,[r1,#4]
000018  bf00              NOP      
;;;509        LL_DMA_DisableChannel( DMA1, LL_DMA_CHANNEL_7 );
00001a  2107              MOVS     r1,#7
00001c  4804              LDR      r0,|L2.48|
00001e  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
                  |L2.34|
;;;510      }
;;;511      set_eof( DMA1, LL_DMA_CHANNEL_7, false );
000022  2200              MOVS     r2,#0
000024  2107              MOVS     r1,#7
000026  4802              LDR      r0,|L2.48|
000028  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb ; [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
;;;512    }
00002c  bd10              POP      {r4,pc}
;;;513    
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40020000

                          AREA ||i.DMA2_Channel6_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Channel6_IRQHandler PROC
;;;513    
;;;514    extern "C" void DMA2_Channel6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;515    {
;;;516      if ( LL_DMA_IsActiveFlag_TC6( DMA2 ) )             //проверка флага transfer complete
000002  bf00              NOP      
000004  480a              LDR      r0,|L3.48|
000006  6800              LDR      r0,[r0,#0]
000008  f3c05040          UBFX     r0,r0,#21,#1
00000c  b148              CBZ      r0,|L3.34|
;;;517      {
;;;518        LL_DMA_ClearFlag_TC6( DMA2 );
00000e  bf00              NOP      
000010  f44f1000          MOV      r0,#0x200000
000014  4906              LDR      r1,|L3.48|
000016  6048              STR      r0,[r1,#4]
000018  bf00              NOP      
;;;519        LL_DMA_DisableChannel( DMA2, LL_DMA_CHANNEL_6 );
00001a  2106              MOVS     r1,#6
00001c  4804              LDR      r0,|L3.48|
00001e  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
                  |L3.34|
;;;520        
;;;521    //    Do.open();
;;;522      }
;;;523      set_eof( DMA2, LL_DMA_CHANNEL_6, false );
000022  2200              MOVS     r2,#0
000024  2106              MOVS     r1,#6
000026  4802              LDR      r0,|L3.48|
000028  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb ; [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
;;;524    }
00002c  bd10              POP      {r4,pc}
;;;525    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x40020400

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;479    
;;;480    extern "C" void USART1_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;481    {
000002  b085              SUB      sp,sp,#0x14
;;;482      TUsartInt UsartInt{
000004  2214              MOVS     r2,#0x14
000006  4904              LDR      r1,|L4.24|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;483                         USART1,
;;;484                         &SlaveRTOHigherPriorityTaskWoken,
;;;485                         &SlaveCommErrHigherPriorityTaskWoken,
;;;486                         &SlaveRtoTrigSem,
;;;487                         &SlaveCommErrSem,
;;;488                        };
;;;489      usart_int_handler( &UsartInt );
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof17usart_int_handlerEP9TUsartInt ; [local to modbus_link_cpp]::usart_int_handler(TUsartInt*)
;;;490    }
000014  b005              ADD      sp,sp,#0x14
000016  bd00              POP      {pc}
;;;491    
                          ENDP

                  |L4.24|
                          DCD      ||.constdata||+0x88

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;491    
;;;492    extern "C" void USART2_IRQHandler(void)
000000  b500              PUSH     {lr}
;;;493    {
000002  b085              SUB      sp,sp,#0x14
;;;494      TUsartInt UsartInt{
000004  2214              MOVS     r2,#0x14
000006  4904              LDR      r1,|L5.24|
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;495                         USART2,
;;;496                         &MasterRTOHigherPriorityTaskWoken,
;;;497                         &MasterCommErrHigherPriorityTaskWoken,
;;;498                         &MasterRtoTrigSem,
;;;499                         &MasterCommErrSem,
;;;500                        };
;;;501      usart_int_handler( &UsartInt ); 
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof17usart_int_handlerEP9TUsartInt ; [local to modbus_link_cpp]::usart_int_handler(TUsartInt*)
;;;502    }
000014  b005              ADD      sp,sp,#0x14
000016  bd00              POP      {pc}
;;;503    
                          ENDP

                  |L5.24|
                          DCD      ||.constdata||+0x9c

                          AREA ||i._Z7get_eofhN11TModbusLink9TProcTypeE||, CODE, READONLY, ALIGN=2

                  _Z7get_eofhN11TModbusLink9TProcTypeE PROC ; get_eof(unsigned char, TModbusLink::TProcType)
;;;610    
;;;611    bool get_eof( uint8_t StrIx, TModbusLink::TProcType ProcType )
000000  b510              PUSH     {r4,lr}
;;;612    {
000002  4602              MOV      r2,r0
;;;613      bool Flag = false;
000004  2000              MOVS     r0,#0
;;;614      
;;;615      __disable_irq();
000006  b672              CPSID    i
;;;616        Flag = Eof[ StrIx ][ ProcType ].Flag;
000008  eb020342          ADD      r3,r2,r2,LSL #1
00000c  4c04              LDR      r4,|L6.32|
00000e  eb0403c3          ADD      r3,r4,r3,LSL #3
000012  eb010441          ADD      r4,r1,r1,LSL #1
000016  eb030384          ADD      r3,r3,r4,LSL #2
00001a  7a18              LDRB     r0,[r3,#8]
;;;617      __enable_irq();  
00001c  b662              CPSIE    i
;;;618      
;;;619      return Flag;
;;;620    }
00001e  bd10              POP      {r4,pc}
;;;621    
                          ENDP

                  |L6.32|
                          DCD      Eof

                          AREA ||i._Z7set_eofhN11TModbusLink9TProcTypeEb||, CODE, READONLY, ALIGN=2

                  _Z7set_eofhN11TModbusLink9TProcTypeEb PROC ; set_eof(unsigned char, TModbusLink::TProcType, bool)
;;;621    
;;;622    void set_eof( uint8_t StrIx, TModbusLink::TProcType ProcType, bool NewVal ) //для вызова из методов класса
000000  b510              PUSH     {r4,lr}
;;;623    {
;;;624      __disable_irq(); 
000002  b672              CPSID    i
;;;625        Eof[ StrIx ][ ProcType ].Flag = NewVal;
000004  eb000340          ADD      r3,r0,r0,LSL #1
000008  4c04              LDR      r4,|L7.28|
00000a  eb0403c3          ADD      r3,r4,r3,LSL #3
00000e  eb010441          ADD      r4,r1,r1,LSL #1
000012  eb030384          ADD      r3,r3,r4,LSL #2
000016  721a              STRB     r2,[r3,#8]
;;;626      __enable_irq();
000018  b662              CPSIE    i
;;;627    }
00001a  bd10              POP      {r4,pc}
;;;628    
                          ENDP

                  |L7.28|
                          DCD      Eof

                          AREA ||i._ZN11TModbusLink12handle_frameEPKht||, CODE, READONLY, ALIGN=1

                  _ZN11TModbusLink12handle_frameEPKht PROC ; TModbusLink::handle_frame(const unsigned char*, unsigned short)
;;;131    
;;;132    bool TModbusLink::handle_frame( const uint8_t *Buf, uint16_t BUF_SIZE )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;133    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;134    //  constexpr uint16_t DLY_MS = 50U;
;;;135      TFrameState FrameState;
;;;136      
;;;137      if ( BUF_SIZE < 2U ) //защита на минимальный размер для подсчета CRC
00000a  2e02              CMP      r6,#2
00000c  d201              BCS      |L8.18|
;;;138      {
;;;139        FrameState = TFrameState::_FRAME_NOK;
00000e  2501              MOVS     r5,#1
000010  e005              B        |L8.30|
                  |L8.18|
;;;140      }
;;;141      else
;;;142      {
;;;143        FrameState = chk_frame( Buf, BUF_SIZE ); //проверка контрольной суммы пакета и адреса в пакете, \
000012  4632              MOV      r2,r6
000014  4639              MOV      r1,r7
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _ZN11TModbusLink9chk_frameEPKht ; TModbusLink::chk_frame(const unsigned char*, unsigned short)
00001c  4605              MOV      r5,r0
                  |L8.30|
;;;144                                                   если они кривые, то ответ мастеру не отправляется
;;;145      }
;;;146    
;;;147      dis_eob_detect(); //отключение RTO, запрет прерываний
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       _ZN6TUsart14dis_eob_detectEv ; TUsart::dis_eob_detect()
;;;148      vTaskDelay( pdMS_TO_TICKS( _2_ch_cnt() ) );
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN11TModbusLink9_2_ch_cntEv ; TModbusLink::_2_ch_cnt()
00002a  f44f717a          MOV      r1,#0x3e8
00002e  4348              MULS     r0,r1,r0
000030  fbb0f8f1          UDIV     r8,r0,r1
000034  4640              MOV      r0,r8
000036  f7fffffe          BL       vTaskDelay
;;;149      
;;;150      if (
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       _ZN11TModbusLink19get_rx_dma_data_qtyEv ; TModbusLink::get_rx_dma_data_qty()
000040  f2402133          MOV      r1,#0x233
000044  5d09              LDRB     r1,[r1,r4]
000046  4288              CMP      r0,r1
000048  d10f              BNE      |L8.106|
;;;151    //      xSemaphoreTake( SlaveRtoTrigSem, DLY_MS ) == pdPASS
;;;152    //      &&
;;;153          IxSlice.Head == get_rx_dma_data_qty()               //если новых символов за 3.5Ch принято не было 
;;;154          &&                                                  //и ...
;;;155          FrameState != TFrameState::_FRAME_NOK               //кадр ранее не был признан ошибочным
00004a  2d01              CMP      r5,#1
00004c  d00d              BEQ      |L8.106|
;;;156         )
;;;157      {
;;;158        //кадр можно обрабатывать \
;;;159          и отправлять ответ на запрос
;;;160    //	  State = TState::__PROCESSING_REQUIRED_ACTION;
;;;161    		
;;;162        if ( ProcType == TProcType::__SLAVE ) //для слейв-устройства следующий прием возможен только после отправки ответа \
00004e  f8940234          LDRB     r0,[r4,#0x234]
000052  2801              CMP      r0,#1
000054  d106              BNE      |L8.100|
;;;163                                                мастер на прием ответа ничего не отвечает, а только использует полученные данные
;;;164        {
;;;165          set_eof( StrIx, ProcType, true );
000056  f8941234          LDRB     r1,[r4,#0x234]
00005a  f8940227          LDRB     r0,[r4,#0x227]
00005e  2201              MOVS     r2,#1
000060  f7fffffe          BL       _Z7set_eofhN11TModbusLink9TProcTypeEb ; set_eof(unsigned char, TModbusLink::TProcType, bool)
                  |L8.100|
;;;166        }
;;;167    		return true;
000064  2001              MOVS     r0,#1
                  |L8.102|
;;;168      }
;;;169      else
;;;170      {
;;;171        //EOF в true не устанавливается, т.к. на кривой пакет отвечать не надо
;;;172        stop_receive();                     //при приеме пакета произошли ошибки связи => пакет отбрасывается, ответ мастеру не возвращается
;;;173    //    State = TState::__IDLE;
;;;174    		
;;;175    		return false;
;;;176      }
;;;177    }
000066  e8bd81f0          POP      {r4-r8,pc}
                  |L8.106|
00006a  4620              MOV      r0,r4                 ;172
00006c  f7fffffe          BL       _ZN11TModbusLink12stop_receiveEv ; TModbusLink::stop_receive()
000070  2000              MOVS     r0,#0                 ;175
000072  e7f8              B        |L8.102|
;;;178    
                          ENDP


                          AREA ||i._ZN11TModbusLink12start_handleEv||, CODE, READONLY, ALIGN=2

                  _ZN11TModbusLink12start_handleEv PROC ; TModbusLink::start_handle()
;;;121    
;;;122    void TModbusLink::start_handle()
000000  b510              PUSH     {r4,lr}
;;;123    {
000002  4604              MOV      r4,r0
;;;124    //  if ( ProcType == TProcType::__SLAVE ) Do.closed();
;;;125      en_eob_detect(  TModbusLink::_1_5_CH_BITS_NBR  );             //включить определение конца блока и прерываний USART
000004  2111              MOVS     r1,#0x11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _ZN6TUsart13en_eob_detectEh ; TUsart::en_eob_detect(unsigned char)
;;;126      LL_DMA_EnableChannel(                                         //включение приемного DMA - канала
00000c  f8942227          LDRB     r2,[r4,#0x227]
000010  4b0a              LDR      r3,|L9.60|
000012  eb031282          ADD      r2,r3,r2,LSL #6
000016  f8943234          LDRB     r3,[r4,#0x234]
00001a  eb021243          ADD      r2,r2,r3,LSL #5
00001e  6911              LDR      r1,[r2,#0x10]
000020  f8942227          LDRB     r2,[r4,#0x227]
000024  4b05              LDR      r3,|L9.60|
000026  eb031282          ADD      r2,r3,r2,LSL #6
00002a  f8943234          LDRB     r3,[r4,#0x234]
00002e  eb021243          ADD      r2,r2,r3,LSL #5
000032  6810              LDR      r0,[r2,#0]
000034  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
;;;127                           Dma[ StrIx ][ ProcType ].Periph.Nbr,
;;;128                           Dma[ StrIx ][ ProcType ].RxChannel.Nbr
;;;129                          );
;;;130    }
000038  bd10              POP      {r4,pc}
;;;131    
                          ENDP

00003a  0000              DCW      0x0000
                  |L9.60|
                          DCD      ||Dma||

                          AREA ||i._ZN11TModbusLink12stop_receiveEv||, CODE, READONLY, ALIGN=2

                  _ZN11TModbusLink12stop_receiveEv PROC ; TModbusLink::stop_receive()
;;;109    
;;;110    void TModbusLink::stop_receive()
000000  b510              PUSH     {r4,lr}
;;;111    {  
000002  4604              MOV      r4,r0
;;;112    //  if ( ProcType == TProcType::__SLAVE ) Do.open();
;;;113      dis_eob_detect();                                              //отключение RTO, запрет прерываний
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN6TUsart14dis_eob_detectEv ; TUsart::dis_eob_detect()
;;;114      LL_DMA_DisableChannel(                                         //отключение приемного DMA - канала
00000a  f8942227          LDRB     r2,[r4,#0x227]
00000e  4b0f              LDR      r3,|L10.76|
000010  eb031282          ADD      r2,r3,r2,LSL #6
000014  f8943234          LDRB     r3,[r4,#0x234]
000018  eb021243          ADD      r2,r2,r3,LSL #5
00001c  6911              LDR      r1,[r2,#0x10]
00001e  f8942227          LDRB     r2,[r4,#0x227]
000022  4b0a              LDR      r3,|L10.76|
000024  eb031282          ADD      r2,r3,r2,LSL #6
000028  f8943234          LDRB     r3,[r4,#0x234]
00002c  eb021243          ADD      r2,r2,r3,LSL #5
000030  6810              LDR      r0,[r2,#0]
000032  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
;;;115                            Dma[ StrIx ][ ProcType ].Periph.Nbr,
;;;116                            Dma[ StrIx ][ ProcType ].RxChannel.Nbr
;;;117                           );
;;;118      IxSlice.Head = get_rx_dma_data_qty(); //голова буфера
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       _ZN11TModbusLink19get_rx_dma_data_qtyEv ; TModbusLink::get_rx_dma_data_qty()
00003c  b2c1              UXTB     r1,r0
00003e  f2402033          MOV      r0,#0x233
000042  5501              STRB     r1,[r0,r4]
;;;119      IxSlice.Tail = IxSlice.Head;          //хвост буфера
000044  5d00              LDRB     r0,[r0,r4]
000046  f8840232          STRB     r0,[r4,#0x232]
;;;120    }
00004a  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  |L10.76|
                          DCD      ||Dma||

                          AREA ||i._ZN11TModbusLink14start_transmitEh||, CODE, READONLY, ALIGN=2

                  _ZN11TModbusLink14start_transmitEh PROC ; TModbusLink::start_transmit(unsigned char)
;;;96     
;;;97     void TModbusLink::start_transmit( uint8_t NbrBytes )
000000  b570              PUSH     {r4-r6,lr}
;;;98     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;99     //  Do.open();
;;;100      LL_DMA_SetDataLength(
000006  f2042427          ADD      r4,r4,#0x227
00000a  7822              LDRB     r2,[r4,#0]
00000c  4b21              LDR      r3,|L11.148|
00000e  eb031282          ADD      r2,r3,r2,LSL #6
000012  7b63              LDRB     r3,[r4,#0xd]
000014  eb021243          ADD      r2,r2,r3,LSL #5
000018  6810              LDR      r0,[r2,#0]
00001a  7822              LDRB     r2,[r4,#0]
00001c  4b1d              LDR      r3,|L11.148|
00001e  eb031282          ADD      r2,r3,r2,LSL #6
000022  7b63              LDRB     r3,[r4,#0xd]
000024  eb021243          ADD      r2,r2,r3,LSL #5
000028  6991              LDR      r1,[r2,#0x18]
00002a  1e4a              SUBS     r2,r1,#1
00002c  4b1a              LDR      r3,|L11.152|
00002e  5c9a              LDRB     r2,[r3,r2]
000030  4402              ADD      r2,r2,r0
000032  6852              LDR      r2,[r2,#4]
000034  f36f020f          BFC      r2,#0,#16
000038  432a              ORRS     r2,r2,r5
00003a  1e4b              SUBS     r3,r1,#1
00003c  4e16              LDR      r6,|L11.152|
00003e  5cf3              LDRB     r3,[r6,r3]
000040  4403              ADD      r3,r3,r0
000042  605a              STR      r2,[r3,#4]
000044  bf00              NOP      
;;;101                           Dma[ StrIx ][ ProcType ].Periph.Nbr,
;;;102                           Dma[ StrIx ][ ProcType ].TxChannel.Nbr,
;;;103                           NbrBytes
;;;104                          );
;;;105    
;;;106      Dma[ StrIx ][ ProcType ].Periph.clr_flag_tc_fnct( Dma[ StrIx ][ ProcType ].Periph.Nbr );
000046  7822              LDRB     r2,[r4,#0]
000048  4b12              LDR      r3,|L11.148|
00004a  eb031282          ADD      r2,r3,r2,LSL #6
00004e  7b63              LDRB     r3,[r4,#0xd]
000050  eb021243          ADD      r2,r2,r3,LSL #5
000054  6810              LDR      r0,[r2,#0]
000056  7822              LDRB     r2,[r4,#0]
000058  4b0e              LDR      r3,|L11.148|
00005a  eb031282          ADD      r2,r3,r2,LSL #6
00005e  7b63              LDRB     r3,[r4,#0xd]
000060  eb021243          ADD      r2,r2,r3,LSL #5
000064  68d1              LDR      r1,[r2,#0xc]
000066  4788              BLX      r1
;;;107      LL_DMA_EnableChannel( Dma[ StrIx ][ ProcType ].Periph.Nbr, Dma[ StrIx ][ ProcType ].TxChannel.Nbr );
000068  7822              LDRB     r2,[r4,#0]
00006a  4b0a              LDR      r3,|L11.148|
00006c  eb031282          ADD      r2,r3,r2,LSL #6
000070  7b63              LDRB     r3,[r4,#0xd]
000072  eb021243          ADD      r2,r2,r3,LSL #5
000076  6991              LDR      r1,[r2,#0x18]
000078  7822              LDRB     r2,[r4,#0]
00007a  4b06              LDR      r3,|L11.148|
00007c  eb031282          ADD      r2,r3,r2,LSL #6
000080  7b63              LDRB     r3,[r4,#0xd]
000082  f2a42427          SUB      r4,r4,#0x227
000086  eb021243          ADD      r2,r2,r3,LSL #5
00008a  6810              LDR      r0,[r2,#0]
00008c  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
;;;108    }
000090  bd70              POP      {r4-r6,pc}
;;;109    
                          ENDP

000092  0000              DCW      0x0000
                  |L11.148|
                          DCD      ||Dma||
                  |L11.152|
                          DCD      CHANNEL_OFFSET_TAB

                          AREA ||i._ZN11TModbusLink19get_rx_dma_data_qtyEv||, CODE, READONLY, ALIGN=2

                  _ZN11TModbusLink19get_rx_dma_data_qtyEv PROC ; TModbusLink::get_rx_dma_data_qty()
;;;357    
;;;358    uint16_t TModbusLink::get_rx_dma_data_qty()
000000  b510              PUSH     {r4,lr}
;;;359    {
000002  4601              MOV      r1,r0
;;;360      CNDTR = LL_DMA_GetDataLength(
000004  f2012127          ADD      r1,r1,#0x227
000008  780b              LDRB     r3,[r1,#0]
00000a  4c0d              LDR      r4,|L12.64|
00000c  eb041383          ADD      r3,r4,r3,LSL #6
000010  7b4c              LDRB     r4,[r1,#0xd]
000012  eb031344          ADD      r3,r3,r4,LSL #5
000016  6818              LDR      r0,[r3,#0]
000018  780b              LDRB     r3,[r1,#0]
00001a  4c09              LDR      r4,|L12.64|
00001c  eb041383          ADD      r3,r4,r3,LSL #6
000020  7b4c              LDRB     r4,[r1,#0xd]
000022  eb031344          ADD      r3,r3,r4,LSL #5
000026  691a              LDR      r2,[r3,#0x10]
000028  1e53              SUBS     r3,r2,#1
00002a  4c06              LDR      r4,|L12.68|
00002c  5ce3              LDRB     r3,[r4,r3]
00002e  4403              ADD      r3,r3,r0
000030  685b              LDR      r3,[r3,#4]
000032  728b              STRB     r3,[r1,#0xa]
;;;361                                   Dma[ StrIx ][ ProcType ].Periph.Nbr,
;;;362                                   Dma[ StrIx ][ ProcType ].RxChannel.Nbr
;;;363                                  );
;;;364      
;;;365      return ( 
000034  7a88              LDRB     r0,[r1,#0xa]
000036  f2a12127          SUB      r1,r1,#0x227
00003a  f1c000ff          RSB      r0,r0,#0xff
;;;366              sizeof RxBuf - CNDTR
;;;367             );
;;;368    }
00003e  bd10              POP      {r4,pc}
;;;369    
                          ENDP

                  |L12.64|
                          DCD      ||Dma||
                  |L12.68|
                          DCD      CHANNEL_OFFSET_TAB

                          AREA ||i._ZN11TModbusLink8get_addrEv||, CODE, READONLY, ALIGN=1

                  _ZN11TModbusLink8get_addrEv PROC ; TModbusLink::get_addr()
;;;441    
;;;442    uint8_t TModbusLink::get_addr()
000000  4601              MOV      r1,r0
;;;443    {
;;;444      return Addr;
000002  f8910236          LDRB     r0,[r1,#0x236]
;;;445    }
000006  4770              BX       lr
;;;446    
                          ENDP


                          AREA ||i._ZN11TModbusLink8init_dmaEv||, CODE, READONLY, ALIGN=2

                  _ZN11TModbusLink8init_dmaEv PROC ; TModbusLink::init_dma()
;;;274    
;;;275    void TModbusLink::init_dma()
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;276    {	
000004  b095              SUB      sp,sp,#0x54
000006  4604              MOV      r4,r0
;;;277      TChannelSets Rx =
000008  2214              MOVS     r2,#0x14
00000a  49a0              LDR      r1,|L14.652|
00000c  a810              ADD      r0,sp,#0x40
00000e  f7fffffe          BL       __aeabi_memcpy4
000012  6860              LDR      r0,[r4,#4]
000014  6800              LDR      r0,[r0,#0]
000016  3024              ADDS     r0,r0,#0x24
000018  9010              STR      r0,[sp,#0x40]
00001a  f1040015          ADD      r0,r4,#0x15
00001e  9011              STR      r0,[sp,#0x44]
;;;278      {
;;;279        (uint32_t)&HW.If->RDR,
;;;280        (uint32_t)RxBuf,
;;;281        LL_DMA_DIRECTION_PERIPH_TO_MEMORY,
;;;282        LL_DMA_MODE_CIRCULAR,
;;;283        RX_BUF_SIZE,
;;;284      };
;;;285      
;;;286      TChannelSets Tx =
000020  2214              MOVS     r2,#0x14
000022  499a              LDR      r1,|L14.652|
000024  3114              ADDS     r1,r1,#0x14
000026  a80b              ADD      r0,sp,#0x2c
000028  f7fffffe          BL       __aeabi_memcpy4
00002c  6860              LDR      r0,[r4,#4]
00002e  6800              LDR      r0,[r0,#0]
000030  3028              ADDS     r0,r0,#0x28
000032  900b              STR      r0,[sp,#0x2c]
000034  f504708a          ADD      r0,r4,#0x114
000038  900c              STR      r0,[sp,#0x30]
;;;287      {
;;;288        (uint32_t)&HW.If->TDR,
;;;289        (uint32_t)TxBuf,
;;;290        LL_DMA_DIRECTION_MEMORY_TO_PERIPH,
;;;291        LL_DMA_MODE_NORMAL,
;;;292        TX_BUF_SIZE,
;;;293      };
;;;294      
;;;295      Dma[ StrIx ][ ProcType ].Periph.en_clk( Dma[ StrIx ][ ProcType ].Periph.ClkMask );
00003a  f8942227          LDRB     r2,[r4,#0x227]
00003e  4b94              LDR      r3,|L14.656|
000040  eb031282          ADD      r2,r3,r2,LSL #6
000044  f8943234          LDRB     r3,[r4,#0x234]
000048  eb021243          ADD      r2,r2,r3,LSL #5
00004c  6890              LDR      r0,[r2,#8]
00004e  f8942227          LDRB     r2,[r4,#0x227]
000052  4b8f              LDR      r3,|L14.656|
000054  eb031282          ADD      r2,r3,r2,LSL #6
000058  f8943234          LDRB     r3,[r4,#0x234]
00005c  eb021243          ADD      r2,r2,r3,LSL #5
000060  6851              LDR      r1,[r2,#4]
000062  4788              BLX      r1
;;;296    
;;;297      LL_DMA_InitTypeDef DMA_Init;
;;;298      
;;;299    	DMA_Init.PeriphOrM2MSrcAddress  = Tx.PeriphAddr;             //базовый адрес источника
000064  980b              LDR      r0,[sp,#0x2c]
000066  9000              STR      r0,[sp,#0]
;;;300    	DMA_Init.MemoryOrM2MDstAddress  = Tx.MemAddr;                //базовый адрес места назначения
000068  980c              LDR      r0,[sp,#0x30]
00006a  9001              STR      r0,[sp,#4]
;;;301    	DMA_Init.Direction              = Tx.Direction;              //направление трансфера
00006c  980d              LDR      r0,[sp,#0x34]
00006e  9002              STR      r0,[sp,#8]
;;;302    	DMA_Init.Mode                   = Tx.Mode;                   //режим работы DMA (нормальный или кольцевой)
000070  980e              LDR      r0,[sp,#0x38]
000072  9003              STR      r0,[sp,#0xc]
;;;303    	DMA_Init.PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT; //инкремент блоков источника данных (периферии или ОЗУ)
000074  2000              MOVS     r0,#0
000076  9004              STR      r0,[sp,#0x10]
;;;304    	DMA_Init.MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_INCREMENT;   //инкремент блоков места назначения данных (периферии или ОЗУ)
000078  2080              MOVS     r0,#0x80
00007a  9005              STR      r0,[sp,#0x14]
;;;305    	DMA_Init.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;    //выравнивание данных источника данных (периферии или ОЗУ)
00007c  2000              MOVS     r0,#0
00007e  9006              STR      r0,[sp,#0x18]
;;;306    	DMA_Init.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;    //выравнивание данных места назначения данных (периферии или ОЗУ)
000080  9007              STR      r0,[sp,#0x1c]
;;;307    	DMA_Init.NbData                 = Tx.NbData;                 //количество блоков данных для обмена - перезаписывается под актуальный буфер
000082  980f              LDR      r0,[sp,#0x3c]
000084  9008              STR      r0,[sp,#0x20]
;;;308    	DMA_Init.PeriphRequest          = LL_DMA_REQUEST_2;          //запрос периферии
000086  2002              MOVS     r0,#2
000088  9009              STR      r0,[sp,#0x24]
;;;309    	DMA_Init.Priority               = LL_DMA_PRIORITY_MEDIUM;  //приоритет DMA канала
00008a  02c0              LSLS     r0,r0,#11
00008c  900a              STR      r0,[sp,#0x28]
;;;310      
;;;311      do { } while ( 
00008e  bf00              NOP      
                  |L14.144|
;;;312                    LL_DMA_Init( 
000090  f8942227          LDRB     r2,[r4,#0x227]
000094  4b7e              LDR      r3,|L14.656|
000096  eb031282          ADD      r2,r3,r2,LSL #6
00009a  f8943234          LDRB     r3,[r4,#0x234]
00009e  eb021243          ADD      r2,r2,r3,LSL #5
0000a2  6991              LDR      r1,[r2,#0x18]
0000a4  f8942227          LDRB     r2,[r4,#0x227]
0000a8  4b79              LDR      r3,|L14.656|
0000aa  eb031282          ADD      r2,r3,r2,LSL #6
0000ae  f8943234          LDRB     r3,[r4,#0x234]
0000b2  eb021243          ADD      r2,r2,r3,LSL #5
0000b6  6810              LDR      r0,[r2,#0]
0000b8  466a              MOV      r2,sp
0000ba  f7fffffe          BL       LL_DMA_Init
0000be  2800              CMP      r0,#0
0000c0  d1e6              BNE      |L14.144|
;;;313                                Dma[ StrIx ][ ProcType ].Periph.Nbr,
;;;314                                Dma[ StrIx ][ ProcType ].TxChannel.Nbr,
;;;315                                &DMA_Init
;;;316                               ) != SUCCESS           
;;;317                   );
;;;318                   
;;;319    	DMA_Init.PeriphOrM2MSrcAddress  = Rx.PeriphAddr;    //базовый адрес источника
0000c2  9810              LDR      r0,[sp,#0x40]
0000c4  9000              STR      r0,[sp,#0]
;;;320    	DMA_Init.MemoryOrM2MDstAddress  = Rx.MemAddr;       //базовый адрес места назначения
0000c6  9811              LDR      r0,[sp,#0x44]
0000c8  9001              STR      r0,[sp,#4]
;;;321    	DMA_Init.Direction              = Rx.Direction;     //направление трансфера
0000ca  9812              LDR      r0,[sp,#0x48]
0000cc  9002              STR      r0,[sp,#8]
;;;322    	DMA_Init.Mode                   = Rx.Mode;          //режим работы DMA (нормальный или кольцевой)
0000ce  9813              LDR      r0,[sp,#0x4c]
0000d0  9003              STR      r0,[sp,#0xc]
;;;323    	DMA_Init.NbData                 = Rx.NbData;        //количество блоков данных для обмена
0000d2  9814              LDR      r0,[sp,#0x50]
0000d4  9008              STR      r0,[sp,#0x20]
;;;324    	DMA_Init.PeriphRequest          = LL_DMA_REQUEST_2; //запрос периферии
0000d6  2002              MOVS     r0,#2
0000d8  9009              STR      r0,[sp,#0x24]
;;;325      
;;;326      do { } while ( 
0000da  bf00              NOP      
                  |L14.220|
;;;327                    LL_DMA_Init( 
0000dc  f8942227          LDRB     r2,[r4,#0x227]
0000e0  4b6b              LDR      r3,|L14.656|
0000e2  eb031282          ADD      r2,r3,r2,LSL #6
0000e6  f8943234          LDRB     r3,[r4,#0x234]
0000ea  eb021243          ADD      r2,r2,r3,LSL #5
0000ee  6911              LDR      r1,[r2,#0x10]
0000f0  f8942227          LDRB     r2,[r4,#0x227]
0000f4  4b66              LDR      r3,|L14.656|
0000f6  eb031282          ADD      r2,r3,r2,LSL #6
0000fa  f8943234          LDRB     r3,[r4,#0x234]
0000fe  eb021243          ADD      r2,r2,r3,LSL #5
000102  6810              LDR      r0,[r2,#0]
000104  466a              MOV      r2,sp
000106  f7fffffe          BL       LL_DMA_Init
00010a  2800              CMP      r0,#0
00010c  d1e6              BNE      |L14.220|
;;;328                                Dma[ StrIx ][ ProcType ].Periph.Nbr,
;;;329                                Dma[ StrIx ][ ProcType ].RxChannel.Nbr,
;;;330                                &DMA_Init
;;;331                               ) != SUCCESS           
;;;332                   );
;;;333    
;;;334      //настройка NVIC
;;;335      NVIC_SetPriority( 
00010e  f8940227          LDRB     r0,[r4,#0x227]
000112  4b5f              LDR      r3,|L14.656|
000114  eb031080          ADD      r0,r3,r0,LSL #6
000118  f8943234          LDRB     r3,[r4,#0x234]
00011c  eb001043          ADD      r0,r0,r3,LSL #5
000120  f990101c          LDRSB    r1,[r0,#0x1c]
000124  4b5b              LDR      r3,|L14.660|
000126  681b              LDR      r3,[r3,#0]
000128  f3c32002          UBFX     r0,r3,#8,#3
00012c  2505              MOVS     r5,#5
00012e  2600              MOVS     r6,#0
000130  4603              MOV      r3,r0
000132  f1c30807          RSB      r8,r3,#7
000136  f1b80f04          CMP      r8,#4
00013a  d902              BLS      |L14.322|
00013c  f04f0804          MOV      r8,#4
000140  e001              B        |L14.326|
                  |L14.322|
000142  f1c30807          RSB      r8,r3,#7
                  |L14.326|
000146  46c4              MOV      r12,r8
000148  f1030804          ADD      r8,r3,#4
00014c  f1b80f07          CMP      r8,#7
000150  d202              BCS      |L14.344|
000152  f04f0800          MOV      r8,#0
000156  e001              B        |L14.348|
                  |L14.344|
000158  f1a30803          SUB      r8,r3,#3
                  |L14.348|
00015c  4647              MOV      r7,r8
00015e  f04f0801          MOV      r8,#1
000162  fa08f80c          LSL      r8,r8,r12
000166  f1a80801          SUB      r8,r8,#1
00016a  ea080805          AND      r8,r8,r5
00016e  fa08f807          LSL      r8,r8,r7
000172  f04f0901          MOV      r9,#1
000176  fa09f907          LSL      r9,r9,r7
00017a  f1a90901          SUB      r9,r9,#1
00017e  ea090906          AND      r9,r9,r6
000182  ea480209          ORR      r2,r8,r9
000186  bf00              NOP      
000188  2900              CMP      r1,#0
00018a  da08              BGE      |L14.414|
00018c  0710              LSLS     r0,r2,#28
00018e  0e05              LSRS     r5,r0,#24
000190  4840              LDR      r0,|L14.660|
000192  300c              ADDS     r0,r0,#0xc
000194  f001030f          AND      r3,r1,#0xf
000198  1f1b              SUBS     r3,r3,#4
00019a  54c5              STRB     r5,[r0,r3]
00019c  e003              B        |L14.422|
                  |L14.414|
00019e  0710              LSLS     r0,r2,#28
0001a0  0e03              LSRS     r3,r0,#24
0001a2  483d              LDR      r0,|L14.664|
0001a4  5443              STRB     r3,[r0,r1]
                  |L14.422|
0001a6  bf00              NOP      
;;;336                       Dma[ StrIx ][ ProcType ].TxChannel.IRQ, 
;;;337                       NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0) 
;;;338                      );                                                     //5 - максимальный уровень приоритета для прерывания \
;;;339                                                                               из которого можно вызывать API функции FreeRTOS 
;;;340      NVIC_EnableIRQ( Dma[ StrIx ][ ProcType ].TxChannel.IRQ );            //прерывания при передаче через USART
0001a8  f8941227          LDRB     r1,[r4,#0x227]
0001ac  4a38              LDR      r2,|L14.656|
0001ae  eb021181          ADD      r1,r2,r1,LSL #6
0001b2  f8942234          LDRB     r2,[r4,#0x234]
0001b6  eb011142          ADD      r1,r1,r2,LSL #5
0001ba  f991001c          LDRSB    r0,[r1,#0x1c]
0001be  f000021f          AND      r2,r0,#0x1f
0001c2  2101              MOVS     r1,#1
0001c4  4091              LSLS     r1,r1,r2
0001c6  0942              LSRS     r2,r0,#5
0001c8  0092              LSLS     r2,r2,#2
0001ca  f10222e0          ADD      r2,r2,#0xe000e000
0001ce  f8c21100          STR      r1,[r2,#0x100]
0001d2  bf00              NOP      
;;;341      
;;;342    	LL_DMA_EnableIT_TC(
0001d4  f8942227          LDRB     r2,[r4,#0x227]
0001d8  4b2d              LDR      r3,|L14.656|
0001da  eb031282          ADD      r2,r3,r2,LSL #6
0001de  f8943234          LDRB     r3,[r4,#0x234]
0001e2  eb021243          ADD      r2,r2,r3,LSL #5
0001e6  6810              LDR      r0,[r2,#0]
0001e8  f8942227          LDRB     r2,[r4,#0x227]
0001ec  4b28              LDR      r3,|L14.656|
0001ee  eb031282          ADD      r2,r3,r2,LSL #6
0001f2  f8943234          LDRB     r3,[r4,#0x234]
0001f6  eb021243          ADD      r2,r2,r3,LSL #5
0001fa  6991              LDR      r1,[r2,#0x18]
0001fc  1e4a              SUBS     r2,r1,#1
0001fe  4b27              LDR      r3,|L14.668|
000200  5c9a              LDRB     r2,[r3,r2]
000202  5882              LDR      r2,[r0,r2]
000204  f0420302          ORR      r3,r2,#2
000208  1e4a              SUBS     r2,r1,#1
00020a  4d24              LDR      r5,|L14.668|
00020c  5caa              LDRB     r2,[r5,r2]
00020e  5083              STR      r3,[r0,r2]
000210  bf00              NOP      
;;;343                         Dma[ StrIx ][ ProcType ].Periph.Nbr, 
;;;344                         Dma[ StrIx ][ ProcType ].TxChannel.Nbr 
;;;345                        );                                                   //Transfer complete interrupt
;;;346        
;;;347      LL_USART_EnableDMAReq_RX( HW.If );                                     //включение DMA режима для приема через USART
000212  6861              LDR      r1,[r4,#4]
000214  6808              LDR      r0,[r1,#0]
000216  6881              LDR      r1,[r0,#8]
000218  f0410140          ORR      r1,r1,#0x40
00021c  6081              STR      r1,[r0,#8]
00021e  bf00              NOP      
;;;348      LL_USART_EnableDMAReq_TX( HW.If );                                     //включение DMA режима для передачи через USART
000220  6861              LDR      r1,[r4,#4]
000222  6808              LDR      r0,[r1,#0]
000224  6881              LDR      r1,[r0,#8]
000226  f0410180          ORR      r1,r1,#0x80
00022a  6081              STR      r1,[r0,#8]
00022c  bf00              NOP      
;;;349    
;;;350    	//активация DMA каналов
;;;351      LL_DMA_EnableChannel( Dma[ StrIx ][ ProcType ].Periph.Nbr, Dma[ StrIx ][ ProcType ].RxChannel.Nbr ); //канал включен => канал контроллера DMA может \
00022e  f8942227          LDRB     r2,[r4,#0x227]
000232  4b17              LDR      r3,|L14.656|
000234  eb031282          ADD      r2,r3,r2,LSL #6
000238  f8943234          LDRB     r3,[r4,#0x234]
00023c  eb021243          ADD      r2,r2,r3,LSL #5
000240  6911              LDR      r1,[r2,#0x10]
000242  f8942227          LDRB     r2,[r4,#0x227]
000246  4b12              LDR      r3,|L14.656|
000248  eb031282          ADD      r2,r3,r2,LSL #6
00024c  f8943234          LDRB     r3,[r4,#0x234]
000250  eb021243          ADD      r2,r2,r3,LSL #5
000254  6810              LDR      r0,[r2,#0]
000256  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
;;;352                                                                                                             обработать запрос от периферии, \
;;;353    	                                                                                                       подключенной к этому каналу
;;;354    	LL_DMA_DisableChannel( Dma[ StrIx ][ ProcType ].Periph.Nbr, Dma[ StrIx ][ ProcType ].TxChannel.Nbr );
00025a  f8942227          LDRB     r2,[r4,#0x227]
00025e  4b0c              LDR      r3,|L14.656|
000260  eb031282          ADD      r2,r3,r2,LSL #6
000264  f8943234          LDRB     r3,[r4,#0x234]
000268  eb021243          ADD      r2,r2,r3,LSL #5
00026c  6991              LDR      r1,[r2,#0x18]
00026e  f8942227          LDRB     r2,[r4,#0x227]
000272  4b07              LDR      r3,|L14.656|
000274  eb031282          ADD      r2,r3,r2,LSL #6
000278  f8943234          LDRB     r3,[r4,#0x234]
00027c  eb021243          ADD      r2,r2,r3,LSL #5
000280  6810              LDR      r0,[r2,#0]
000282  f7fffffe          BL       _ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj ; [local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
;;;355    	
;;;356    }
000286  b015              ADD      sp,sp,#0x54
000288  e8bd83f0          POP      {r4-r9,pc}
;;;357    
                          ENDP

                  |L14.652|
                          DCD      ||.constdata||+0xb4
                  |L14.656|
                          DCD      ||Dma||
                  |L14.660|
                          DCD      0xe000ed0c
                  |L14.664|
                          DCD      0xe000e400
                  |L14.668|
                          DCD      CHANNEL_OFFSET_TAB

                          AREA ||i._ZN11TModbusLink8set_addrEh||, CODE, READONLY, ALIGN=1

                  _ZN11TModbusLink8set_addrEh PROC ; TModbusLink::set_addr(unsigned char)
;;;436    
;;;437    void TModbusLink::set_addr( uint8_t _Addr )
000000  f8801236          STRB     r1,[r0,#0x236]
;;;438    {
;;;439      Addr = _Addr;
;;;440    }
000004  4770              BX       lr
;;;441    
                          ENDP


                          AREA ||i._ZN11TModbusLink9_2_ch_cntEv||, CODE, READONLY, ALIGN=1

                  _ZN11TModbusLink9_2_ch_cntEv PROC ; TModbusLink::_2_ch_cnt()
;;;178    
;;;179    uint16_t TModbusLink::_2_ch_cnt()
000000  b50e              PUSH     {r1-r3,lr}
;;;180    {
000002  4601              MOV      r1,r0
;;;181      volatile uint16_t Numerator   = 22U;
000004  2016              MOVS     r0,#0x16
000006  9002              STR      r0,[sp,#8]
;;;182      volatile uint16_t Denominator = ( static_cast<uint16_t>(Sets.BaudRate) + 1000U / 2 ) / 1000U;
000008  8908              LDRH     r0,[r1,#8]
00000a  b280              UXTH     r0,r0
00000c  f50070fa          ADD      r0,r0,#0x1f4
000010  f44f727a          MOV      r2,#0x3e8
000014  fbb0f0f2          UDIV     r0,r0,r2
000018  b280              UXTH     r0,r0
00001a  9001              STR      r0,[sp,#4]
;;;183      volatile uint16_t Res         = Numerator / Denominator;
00001c  f8bd0008          LDRH     r0,[sp,#8]
000020  f8bd2004          LDRH     r2,[sp,#4]
000024  fb90f0f2          SDIV     r0,r0,r2
000028  b280              UXTH     r0,r0
00002a  9000              STR      r0,[sp,#0]
;;;184    
;;;185      return ( Res < 1U ) ? 1U
00002c  f8bd0000          LDRH     r0,[sp,#0]
000030  b908              CBNZ     r0,|L16.54|
000032  2001              MOVS     r0,#1
                  |L16.52|
;;;186                          : Res;
;;;187    }
000034  bd0e              POP      {r1-r3,pc}
                  |L16.54|
000036  f8bd0000          LDRH     r0,[sp,#0]            ;186
00003a  e7fb              B        |L16.52|
;;;188    
                          ENDP


                          AREA ||i._ZN11TModbusLink9chk_frameEPKht||, CODE, READONLY, ALIGN=1

                  _ZN11TModbusLink9chk_frameEPKht PROC ; TModbusLink::chk_frame(const unsigned char*, unsigned short)
;;;188    
;;;189    TModbusLink::TFrameState TModbusLink::chk_frame( const uint8_t *Buf, uint16_t BUF_SIZE )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;190    {  
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;191      const uint16_t MSG_SIZE = BUF_SIZE - 2U;
00000a  1eb0              SUBS     r0,r6,#2
00000c  b287              UXTH     r7,r0
;;;192      uint16_t Crc16 = CRC16( Buf, MSG_SIZE ); //контрольная сумма в принятом пакете \
00000e  4639              MOV      r1,r7
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       CRC16
000016  4680              MOV      r8,r0
;;;193                                                 расчитывается без учета 2-х последних байтов \
;;;194                                                 В любом Modbus RTU сообщении 2 последних байта - CRC
;;;195      union TCRC
;;;196      {
;;;197        struct
;;;198        {
;;;199          uint8_t Low;
;;;200          uint8_t High;     
;;;201        };
;;;202        uint16_t Crc;
;;;203      };
;;;204      
;;;205      uint16_t BufCrc = (( TCRC * )&Buf[ MSG_SIZE ])->Crc;
000018  f8349007          LDRH     r9,[r4,r7]
;;;206        
;;;207      return (
00001c  45c8              CMP      r8,r9
00001e  d106              BNE      |L17.46|
000020  7820              LDRB     r0,[r4,#0]
000022  f8951236          LDRB     r1,[r5,#0x236]
000026  4288              CMP      r0,r1
000028  d004              BEQ      |L17.52|
00002a  7820              LDRB     r0,[r4,#0]
00002c  b110              CBZ      r0,|L17.52|
                  |L17.46|
;;;208              Crc16 == BufCrc
;;;209              &&
;;;210              (
;;;211               Buf[0] == Addr //проверка поля с адресом. В любом Modbus RTU сообщении 1-ый байт - Address
;;;212               ||
;;;213               Buf[0] == 0U //нулевой адрес для работы с программой "Настройка устройств Modbus" \
;;;214                              для работы с другими мастерами так делать ЗАПРЕЩЕНО протоколом
;;;215    //           ||
;;;216    //           (
;;;217    //            Buf[0] == 4U   //тестовый код (под СЕНС ПД)
;;;218    //            &&
;;;219    //            ProcType == TProcType::__MASTER
;;;220    //           )
;;;221              )
;;;222             )
;;;223             ? TFrameState::_FRAME_OK   //кадр может быть обработан
;;;224             : TFrameState::_FRAME_NOK; //кадр отбрасывается
00002e  2001              MOVS     r0,#1
                  |L17.48|
;;;225    }
000030  e8bd87f0          POP      {r4-r10,pc}
                  |L17.52|
000034  2000              MOVS     r0,#0                 ;223
000036  e7fb              B        |L17.48|
;;;226    //-----------------------------------------------
                          ENDP


                          AREA ||i._ZN11TModbusLinkC1ERK9TUsart_HWNS_9TProcTypeEPPvS5_||, CODE, READONLY, ALIGN=2

                  _ZN11TModbusLinkC2ERK9TUsart_HWNS_9TProcTypeEPPvS5_                  ; Alternate entry point ; TModbusLink::TModbusLink__sub_object(const TUsart_HW&, TModbusLink::TProcType, void**, void**)
                  _ZN11TModbusLinkC1ERK9TUsart_HWNS_9TProcTypeEPPvS5_ PROC ; TModbusLink::TModbusLink(const TUsart_HW&, TModbusLink::TProcType, void**, void**)
;;;73       
;;;74     TModbusLink::TModbusLink(
;;;75                              const TUsart_HW &Usart_HW,
;;;76                              TProcType _ProcType,
;;;77                              SemaphoreHandle_t *_RtoTrigSem,
;;;78                              SemaphoreHandle_t *_CommErrSem
;;;79                             )
;;;80     :
;;;81     TUsart( Usart_HW ),
;;;82     StrIx( 0U ),
;;;83     RtoTrigSem( _RtoTrigSem ),
;;;84     CommErrSem( _CommErrSem ),
;;;85     State( __IDLE ),
;;;86     IxSlice( { 0U, 0U } ),
;;;87     ProcType( _ProcType )
;;;88     {
;;;89     //  init_tmr();
;;;90     }
;;;91     
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
000010  2306              MOVS     r3,#6
000012  4a0d              LDR      r2,|L18.72|
000014  4639              MOV      r1,r7
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _ZN6TUsartC1ERK9TUsart_HWRKNS_5TSetsENS_5TModeE ; TUsart::TUsart(const TUsart_HW&, const TUsart::TSets&, TUsart::TMode)
00001c  4604              MOV      r4,r0
00001e  2000              MOVS     r0,#0
000020  f8840227          STRB     r0,[r4,#0x227]
000024  f8c46228          STR      r6,[r4,#0x228]
000028  f8c4822c          STR      r8,[r4,#0x22c]
00002c  f8840230          STRB     r0,[r4,#0x230]
000030  f5047000          ADD      r0,r4,#0x200
000034  4905              LDR      r1,|L18.76|
000036  8809              LDRH     r1,[r1,#0]  ; <Data1>
000038  f8a41232          STRH     r1,[r4,#0x232]
00003c  f8845234          STRB     r5,[r4,#0x234]
000040  4620              MOV      r0,r4
000042  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      _ZN6TUsart8DEF_SETSE ; TUsart::DEF_SETS
                  |L18.76|
                          DCD      ||<Data1>||

                          AREA ||i._ZN11TModbusLinkD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN11TModbusLinkD2Ev                  ; Alternate entry point ; TModbusLink::~TModbusLink__sub_object()
                  _ZN11TModbusLinkD1Ev PROC ; TModbusLink::~TModbusLink()
;;;91     
;;;92     TModbusLink::~TModbusLink()
;;;93     {
;;;94     
;;;95     }
;;;96     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN6TUsartD1Ev ; TUsart::~TUsart()
00000a  4604              MOV      r4,r0
00000c  4620              MOV      r0,r4
00000e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof17usart_int_handlerEP9TUsartInt||, CODE, READONLY, ALIGN=2

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof17usart_int_handlerEP9TUsartInt PROC ; [local to modbus_link_cpp]::usart_int_handler(TUsartInt*)
;;;537    //----- Вспомогательные функции обработчиков прерываний --------------------------------------------------
;;;538    static void usart_int_handler( TUsartInt *UsartInt )
000000  b510              PUSH     {r4,lr}
;;;539    {
000002  4604              MOV      r4,r0
;;;540      if ( 
000004  6820              LDR      r0,[r4,#0]
000006  69c1              LDR      r1,[r0,#0x1c]
000008  f3c121c0          UBFX     r1,r1,#11,#1
00000c  b309              CBZ      r1,|L20.82|
;;;541          LL_USART_IsActiveFlag_RTO( UsartInt->If )
;;;542          &&
;;;543          LL_USART_IsEnabledIT_RTO( UsartInt->If )     
00000e  6820              LDR      r0,[r4,#0]
000010  6801              LDR      r1,[r0,#0]
000012  f3c16180          UBFX     r1,r1,#26,#1
000016  b1e1              CBZ      r1,|L20.82|
;;;544         )                                    //прерывание по таймауту прихода байтов
;;;545      {    
;;;546    //    Do.toggle();
;;;547    		if ( UsartInt->If == USART1 )
;;;548        {
;;;549    //      Do.closed();
;;;550        }
;;;551        
;;;552        *UsartInt->RTOHigherPriorityTaskWoken = pdFALSE;
000018  2000              MOVS     r0,#0
00001a  6861              LDR      r1,[r4,#4]
00001c  6008              STR      r0,[r1,#0]
;;;553    		if ( xSemaphoreGiveFromISR( *UsartInt->RtoTrigSem, UsartInt->RTOHigherPriorityTaskWoken ) == pdFAIL ) //отправить семафор окончания записи
00001e  68e2              LDR      r2,[r4,#0xc]
000020  6861              LDR      r1,[r4,#4]
000022  6810              LDR      r0,[r2,#0]
000024  f7fffffe          BL       xQueueGiveFromISR
;;;554        {
;;;555          //семафор уже был доступен, т.е. ранее отдан другой задачей или прерыванием
;;;556        }  
;;;557    	  if ( *UsartInt->RTOHigherPriorityTaskWoken == pdPASS )
000028  6860              LDR      r0,[r4,#4]
00002a  6800              LDR      r0,[r0,#0]
00002c  2801              CMP      r0,#1
00002e  d10a              BNE      |L20.70|
;;;558    	  {
;;;559           portYIELD_FROM_ISR( *UsartInt->RTOHigherPriorityTaskWoken ); //принудительное переключение контекста для разблокировки задачи - обработчика
000030  6860              LDR      r0,[r4,#4]
000032  6800              LDR      r0,[r0,#0]
000034  b138              CBZ      r0,|L20.70|
000036  f04f5080          MOV      r0,#0x10000000
00003a  4929              LDR      r1,|L20.224|
00003c  6008              STR      r0,[r1,#0]
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
                  |L20.70|
;;;560    	  }
;;;561        
;;;562        LL_USART_ClearFlag_RTO( UsartInt->If ); 
000046  6820              LDR      r0,[r4,#0]
000048  f44f6100          MOV      r1,#0x800
00004c  6201              STR      r1,[r0,#0x20]
00004e  bf00              NOP      
000050  bf00              NOP      
                  |L20.82|
;;;563      }
;;;564      
;;;565      if (
000052  6820              LDR      r0,[r4,#0]
000054  69c1              LDR      r1,[r0,#0x1c]
000056  f0010101          AND      r1,r1,#1
00005a  b121              CBZ      r1,|L20.102|
;;;566          ( 
;;;567           LL_USART_IsActiveFlag_PE( UsartInt->If )
;;;568           &&
;;;569           LL_USART_IsEnabledIT_PE( UsartInt->If )     
00005c  6820              LDR      r0,[r4,#0]
00005e  6801              LDR      r1,[r0,#0]
000060  f3c12100          UBFX     r1,r1,#8,#1
000064  b9a1              CBNZ     r1,|L20.144|
                  |L20.102|
;;;570          )
;;;571          ||
;;;572          (
;;;573            LL_USART_IsEnabledIT_ERROR( UsartInt->If )
000066  6820              LDR      r0,[r4,#0]
000068  6881              LDR      r1,[r0,#8]
00006a  f0010101          AND      r1,r1,#1
00006e  2900              CMP      r1,#0
000070  d035              BEQ      |L20.222|
;;;574            &&
;;;575            (
;;;576             LL_USART_IsActiveFlag_NE( UsartInt->If )
000072  6820              LDR      r0,[r4,#0]
000074  69c1              LDR      r1,[r0,#0x1c]
000076  f3c10180          UBFX     r1,r1,#2,#1
00007a  b949              CBNZ     r1,|L20.144|
;;;577             ||
;;;578             LL_USART_IsActiveFlag_ORE( UsartInt->If )
00007c  6820              LDR      r0,[r4,#0]
00007e  69c1              LDR      r1,[r0,#0x1c]
000080  f3c101c0          UBFX     r1,r1,#3,#1
000084  b921              CBNZ     r1,|L20.144|
;;;579             ||
;;;580             LL_USART_IsActiveFlag_FE( UsartInt->If )
000086  6820              LDR      r0,[r4,#0]
000088  69c1              LDR      r1,[r0,#0x1c]
00008a  f3c10140          UBFX     r1,r1,#1,#1
00008e  b331              CBZ      r1,|L20.222|
                  |L20.144|
;;;581            )
;;;582          )
;;;583         )                                    //USART Parity Error Interrupt
;;;584      {
;;;585        //сбросить все флаги ошибок и выдать семафор ошибки связи через USART
;;;586        if ( UsartInt->If == USART1 )
;;;587        {
;;;588    //      Do.closed();
;;;589    //    Do.open();
;;;590    //      Do.toggle();
;;;591        }
;;;592        
;;;593        LL_USART_ClearFlag_PE( UsartInt->If );
000090  6820              LDR      r0,[r4,#0]
000092  2101              MOVS     r1,#1
000094  6201              STR      r1,[r0,#0x20]
000096  bf00              NOP      
;;;594        LL_USART_ClearFlag_NE( UsartInt->If );
000098  6820              LDR      r0,[r4,#0]
00009a  2104              MOVS     r1,#4
00009c  6201              STR      r1,[r0,#0x20]
00009e  bf00              NOP      
;;;595        LL_USART_ClearFlag_ORE( UsartInt->If );
0000a0  6820              LDR      r0,[r4,#0]
0000a2  2108              MOVS     r1,#8
0000a4  6201              STR      r1,[r0,#0x20]
0000a6  bf00              NOP      
;;;596        LL_USART_ClearFlag_FE( UsartInt->If );
0000a8  6820              LDR      r0,[r4,#0]
0000aa  2102              MOVS     r1,#2
0000ac  6201              STR      r1,[r0,#0x20]
0000ae  bf00              NOP      
;;;597        
;;;598    		*UsartInt->CommErrHigherPriorityTaskWoken = pdFALSE;
0000b0  2000              MOVS     r0,#0
0000b2  68a1              LDR      r1,[r4,#8]
0000b4  6008              STR      r0,[r1,#0]
;;;599    		if ( xSemaphoreGiveFromISR( *UsartInt->CommErrSem, UsartInt->CommErrHigherPriorityTaskWoken ) == pdFAIL ) //отправить семафор окончания записи
0000b6  6922              LDR      r2,[r4,#0x10]
0000b8  68a1              LDR      r1,[r4,#8]
0000ba  6810              LDR      r0,[r2,#0]
0000bc  f7fffffe          BL       xQueueGiveFromISR
;;;600        {
;;;601          //семафор уже был доступен, т.е. ранее отдан другой задачей или прерыванием
;;;602        }  
;;;603    	  if ( *UsartInt->CommErrHigherPriorityTaskWoken == pdPASS )
0000c0  68a0              LDR      r0,[r4,#8]
0000c2  6800              LDR      r0,[r0,#0]
0000c4  2801              CMP      r0,#1
0000c6  d10a              BNE      |L20.222|
;;;604    	  {
;;;605           portYIELD_FROM_ISR( *UsartInt->CommErrHigherPriorityTaskWoken ); //принудительное переключение контекста для разблокировки задачи - обработчика
0000c8  68a0              LDR      r0,[r4,#8]
0000ca  6800              LDR      r0,[r0,#0]
0000cc  b138              CBZ      r0,|L20.222|
0000ce  f04f5080          MOV      r0,#0x10000000
0000d2  4903              LDR      r1,|L20.224|
0000d4  6008              STR      r0,[r1,#0]
0000d6  f3bf8f4f          DSB      
0000da  f3bf8f6f          ISB      
                  |L20.222|
;;;606    	  }
;;;607      }
;;;608    }
0000de  bd10              POP      {r4,pc}
;;;609    
                          ENDP

                  |L20.224|
                          DCD      0xe000ed04

                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC4EP11DMA_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC4EP11DMA_TypeDef PROC ; [local to modbus_link_cpp]::LL_DMA_ClearFlag_TC4(DMA_TypeDef*)
;;;2069     */
;;;2070   __STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
000000  f44f5100          MOV      r1,#0x2000
;;;2071   {
;;;2072     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
000004  6041              STR      r1,[r0,#4]
;;;2073   }
000006  4770              BX       lr
;;;2074   
                          ENDP


                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC6EP11DMA_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC6EP11DMA_TypeDef PROC ; [local to modbus_link_cpp]::LL_DMA_ClearFlag_TC6(DMA_TypeDef*)
;;;2091     */
;;;2092   __STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
000000  f44f1100          MOV      r1,#0x200000
;;;2093   {
;;;2094     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
000004  6041              STR      r1,[r0,#4]
;;;2095   }
000006  4770              BX       lr
;;;2096   
                          ENDP


                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC7EP11DMA_TypeDef||, CODE, READONLY, ALIGN=1

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC7EP11DMA_TypeDef PROC ; [local to modbus_link_cpp]::LL_DMA_ClearFlag_TC7(DMA_TypeDef*)
;;;2102     */
;;;2103   __STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
000000  f04f7100          MOV      r1,#0x2000000
;;;2104   {
;;;2105     WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
000004  6041              STR      r1,[r0,#4]
;;;2106   }
000006  4770              BX       lr
;;;2107   
                          ENDP


                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj||, CODE, READONLY, ALIGN=2

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj PROC ; [local to modbus_link_cpp]::LL_DMA_EnableChannel(DMA_TypeDef*, unsigned)
;;;672      */
;;;673    __STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
000000  b510              PUSH     {r4,lr}
;;;674    {
;;;675      SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
000002  1e4a              SUBS     r2,r1,#1
000004  4b04              LDR      r3,|L24.24|
000006  5c9a              LDRB     r2,[r3,r2]
000008  5882              LDR      r2,[r0,r2]
00000a  f0420301          ORR      r3,r2,#1
00000e  1e4a              SUBS     r2,r1,#1
000010  4c01              LDR      r4,|L24.24|
000012  5ca2              LDRB     r2,[r4,r2]
000014  5083              STR      r3,[r0,r2]
;;;676    }
000016  bd10              POP      {r4,pc}
;;;677    
                          ENDP

                  |L24.24|
                          DCD      CHANNEL_OFFSET_TAB

                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj||, CODE, READONLY, ALIGN=2

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj PROC ; [local to modbus_link_cpp]::LL_DMA_DisableChannel(DMA_TypeDef*, unsigned)
;;;691      */
;;;692    __STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
000000  b510              PUSH     {r4,lr}
;;;693    {
;;;694      CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
000002  1e4a              SUBS     r2,r1,#1
000004  4b04              LDR      r3,|L25.24|
000006  5c9a              LDRB     r2,[r3,r2]
000008  5882              LDR      r2,[r0,r2]
00000a  f0220301          BIC      r3,r2,#1
00000e  1e4a              SUBS     r2,r1,#1
000010  4c01              LDR      r4,|L25.24|
000012  5ca2              LDRB     r2,[r4,r2]
000014  5083              STR      r3,[r0,r2]
;;;695    }
000016  bd10              POP      {r4,pc}
;;;696    
                          ENDP

                  |L25.24|
                          DCD      CHANNEL_OFFSET_TAB

                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj||, CODE, READONLY, ALIGN=2

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj PROC ; [local to modbus_link_cpp]::LL_AHB1_GRP1_EnableClock(unsigned)
;;;341    */
;;;342    __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
000000  b508              PUSH     {r3,lr}
;;;343    {
;;;344      __IO uint32_t tmpreg;
;;;345      SET_BIT(RCC->AHB1ENR, Periphs);
000002  4905              LDR      r1,|L26.24|
000004  6c89              LDR      r1,[r1,#0x48]
000006  4301              ORRS     r1,r1,r0
000008  4a03              LDR      r2,|L26.24|
00000a  6491              STR      r1,[r2,#0x48]
;;;346      /* Delay after an RCC peripheral clock enabling */
;;;347      tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
00000c  4611              MOV      r1,r2
00000e  6c89              LDR      r1,[r1,#0x48]
000010  4001              ANDS     r1,r1,r0
000012  9100              STR      r1,[sp,#0]
;;;348      (void)tmpreg;
000014  bf00              NOP      
;;;349    }
000016  bd08              POP      {r3,pc}
;;;350    
                          ENDP

                  |L26.24|
                          DCD      0x40021000

                          AREA ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb||, CODE, READONLY, ALIGN=2

                  _ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb PROC ; [local to modbus_link_cpp]::set_eof(DMA_TypeDef*, unsigned, bool)
;;;628    
;;;629    static void set_eof( DMA_TypeDef *DMA, uint32_t TxChannel, bool NewVal ) //для вызова из обработчиков прерываний
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;630    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;631      if ( 
;;;632          DMA2 == DMA 
;;;633          &&
;;;634          TxChannel == LL_DMA_CHANNEL_6
;;;635         )
;;;636      {
;;;637    //     Do.closed();
;;;638      }
;;;639      
;;;640      __disable_irq();
00000a  b672              CPSID    i
;;;641      for ( auto &row : Eof )
00000c  4f0f              LDR      r7,|L27.76|
00000e  4638              MOV      r0,r7
000010  f1070830          ADD      r8,r7,#0x30
000014  e014              B        |L27.64|
                  |L27.22|
000016  4602              MOV      r2,r0
;;;642      {
;;;643        for ( auto &item : row )
000018  4694              MOV      r12,r2
00001a  4661              MOV      r1,r12
00001c  f10c0918          ADD      r9,r12,#0x18
000020  e00b              B        |L27.58|
                  |L27.34|
000022  460b              MOV      r3,r1
;;;644        {
;;;645          if (
000024  f8d3a000          LDR      r10,[r3,#0]
000028  45a2              CMP      r10,r4
00002a  d105              BNE      |L27.56|
;;;646              DMA == item.DMA
;;;647              &&
;;;648              TxChannel == item.TxChannel
00002c  f8d3a004          LDR      r10,[r3,#4]
000030  45aa              CMP      r10,r5
000032  d101              BNE      |L27.56|
;;;649             )
;;;650          {
;;;651            item.Flag = NewVal;
000034  721e              STRB     r6,[r3,#8]
;;;652            
;;;653            goto EXIT;
000036  e006              B        |L27.70|
                  |L27.56|
000038  310c              ADDS     r1,r1,#0xc
                  |L27.58|
00003a  4549              CMP      r1,r9
00003c  d1f1              BNE      |L27.34|
00003e  3018              ADDS     r0,r0,#0x18
                  |L27.64|
000040  4540              CMP      r0,r8
000042  d1e8              BNE      |L27.22|
;;;654          }
;;;655        }
;;;656      }
;;;657      
;;;658      EXIT: __enable_irq();
000044  bf00              NOP      
                  |L27.70|
000046  b662              CPSIE    i
;;;659    }
000048  e8bd87f0          POP      {r4-r10,pc}
;;;660    //--------------------------------------------------------------------------------------------------------
                          ENDP

                  |L27.76|
                          DCD      Eof

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC4EP11DMA_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC4EP11DMA_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC6EP11DMA_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC6EP11DMA_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC7EP11DMA_TypeDef||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC7EP11DMA_TypeDef||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof17usart_int_handlerEP9TUsartInt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof17usart_int_handlerEP9TUsartInt||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i.USART1_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.USART1_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i.USART2_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.USART2_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof7set_eofEP11DMA_TypeDefjb||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i.DMA1_Channel7_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.DMA1_Channel7_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i.DMA2_Channel6_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.DMA2_Channel6_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i.DMA1_Channel4_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.DMA1_Channel4_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z7get_eofhN11TModbusLink9TProcTypeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7get_eofhN11TModbusLink9TProcTypeE||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._Z7set_eofhN11TModbusLink9TProcTypeEb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z7set_eofhN11TModbusLink9TProcTypeEb||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._ZN11TModbusLinkC1ERK9TUsart_HWNS_9TProcTypeEPPvS5_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLinkC1ERK9TUsart_HWNS_9TProcTypeEPPvS5_||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._ZN11TModbusLinkD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLinkD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._ZN11TModbusLink8init_dmaEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink8init_dmaEv||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN11TModbusLink8set_addrEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink8set_addrEh||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN11TModbusLink8get_addrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink8get_addrEv||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN11TModbusLink14start_transmitEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink14start_transmitEh||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN11TModbusLink19get_rx_dma_data_qtyEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink19get_rx_dma_data_qtyEv||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN11TModbusLink12stop_receiveEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink12stop_receiveEv||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN11TModbusLink12start_handleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink12start_handleEv||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZN11TModbusLink9_2_ch_cntEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink9_2_ch_cntEv||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZN11TModbusLink9chk_frameEPKht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink9chk_frameEPKht||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZN11TModbusLink12handle_frameEPKht||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN11TModbusLink12handle_frameEPKht||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_EnableChannelEP11DMA_TypeDefj||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN32_INTERNAL_15_modbus_link_cpp_Eof21LL_DMA_DisableChannelEP11DMA_TypeDefj||
                          DCD      0x00000001

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CHANNEL_OFFSET_TAB
000000  081c3044          DCB      0x08,0x1c,0x30,0x44
000004  586c8000          DCB      0x58,0x6c,0x80,0x00
                  ||Dma||
                          DCD      0x40020000
                          DCD      _ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj ; [local to modbus_link_cpp]::LL_AHB1_GRP1_EnableClock(unsigned)
                          DCD      0x00000001
                          DCD      _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC7EP11DMA_TypeDef ; [local to modbus_link_cpp]::LL_DMA_ClearFlag_TC7(DMA_TypeDef*)
                          DCD      0x00000006
00001c  10000000          DCB      0x10,0x00,0x00,0x00
                          DCD      0x00000007
000024  11000000          DCB      0x11,0x00,0x00,0x00
                          DCD      0x40020400
                          DCD      _ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj ; [local to modbus_link_cpp]::LL_AHB1_GRP1_EnableClock(unsigned)
                          DCD      0x00000002
                          DCD      _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC6EP11DMA_TypeDef ; [local to modbus_link_cpp]::LL_DMA_ClearFlag_TC6(DMA_TypeDef*)
                          DCD      0x00000007
00003c  45000000          DCB      0x45,0x00,0x00,0x00
                          DCD      0x00000006
000044  44000000          DCB      0x44,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00005c  45000000          DCB      0x45,0x00,0x00,0x00
                          DCD      0x00000000
000064  44000000          DCB      0x44,0x00,0x00,0x00
                          DCD      0x40020000
                          DCD      _ZN32_INTERNAL_15_modbus_link_cpp_Eof24LL_AHB1_GRP1_EnableClockEj ; [local to modbus_link_cpp]::LL_AHB1_GRP1_EnableClock(unsigned)
                          DCD      0x00000001
                          DCD      _ZN32_INTERNAL_15_modbus_link_cpp_Eof20LL_DMA_ClearFlag_TC4EP11DMA_TypeDef ; [local to modbus_link_cpp]::LL_DMA_ClearFlag_TC4(DMA_TypeDef*)
                          DCD      0x00000005
00007c  0f000000          DCB      0x0f,0x00,0x00,0x00
                          DCD      0x00000004
000084  0e000000          DCB      0x0e,0x00,0x00,0x00
                          DCD      0x40013800
                          DCD      SlaveRTOHigherPriorityTaskWoken
                          DCD      SlaveCommErrHigherPriorityTaskWoken
                          DCD      SlaveRtoTrigSem
                          DCD      SlaveCommErrSem
                          DCD      0x40004400
                          DCD      MasterRTOHigherPriorityTaskWoken
                          DCD      MasterCommErrHigherPriorityTaskWoken
                          DCD      MasterRtoTrigSem
                          DCD      MasterCommErrSem
                  ||<Data1>||
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x000000ff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x00000000
                          DCD      0x00000014

                          AREA ||.data||, DATA, ALIGN=2

                  SlaveRTOHigherPriorityTaskWoken
                          DCD      0x00000000
                  SlaveCommErrHigherPriorityTaskWoken
                          DCD      0x00000000
                  MasterRTOHigherPriorityTaskWoken
                          DCD      0x00000000
                  MasterCommErrHigherPriorityTaskWoken
                          DCD      0x00000000
                  Eof
                          DCD      0x40020000
                          DCD      0x00000007
000018  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x40020400
                          DCD      0x00000006
000024  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
000030  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x40020000
                          DCD      0x00000004
00003c  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "Source\\Protocols\\src\\modbus_link.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_modbus_link_cpp_Eof___ZN32_INTERNAL_15_modbus_link_cpp_Eof7__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___15_modbus_link_cpp_Eof___ZN32_INTERNAL_15_modbus_link_cpp_Eof7__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_modbus_link_cpp_Eof___ZN32_INTERNAL_15_modbus_link_cpp_Eof7__REVSHEi|
#line 402
|__asm___15_modbus_link_cpp_Eof___ZN32_INTERNAL_15_modbus_link_cpp_Eof7__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_modbus_link_cpp_Eof___ZN32_INTERNAL_15_modbus_link_cpp_Eof5__RRXEj|
#line 587
|__asm___15_modbus_link_cpp_Eof___ZN32_INTERNAL_15_modbus_link_cpp_Eof5__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
