; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\sensproc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sensproc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I"..\Lib\CRC Modbus\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I..\Lib\Objects -I.\Source\Ext_Dev\inc\AT45 -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\sensproc.crf Source\Line\src\SensProc.c]
                          THUMB

                          AREA ||i.CheckPSWD||, CODE, READONLY, ALIGN=2

                  CheckPSWD PROC
;;;135    // 2 - если переход запрещен
;;;136    uint8_t CheckPSWD(__packed uint8_t * buf, float sp)
000000  b510              PUSH     {r4,lr}
;;;137    {
000002  4604              MOV      r4,r0
000004  eef00a40          VMOV.F32 s1,s0
;;;138      if (sp == 0)
000008  eef50ac0          VCMPE.F32 s1,#0.0
00000c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000010  d101              BNE      |L1.22|
;;;139      {
;;;140        return 0; // Без пароля
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;141      }
;;;142    
;;;143      if (buf[0] < 5)
;;;144      {
;;;145        return 1; // Не введен пароль
;;;146      }
;;;147    
;;;148      pp  = S3BToFloat(buf + 5);
;;;149      dlt = sp - pp;
;;;150    
;;;151      if (dlt < 0)
;;;152      {
;;;153        dlt = -dlt;
;;;154      }
;;;155    
;;;156      if (pp < 0) 
;;;157      {
;;;158        pp = -pp;
;;;159      }
;;;160    
;;;161      if (dlt < (pp / 10000))
;;;162      {
;;;163        return 0;
;;;164      }
;;;165    
;;;166      return 2;
;;;167    }
000014  bd10              POP      {r4,pc}
                  |L1.22|
000016  7820              LDRB     r0,[r4,#0]            ;143
000018  2805              CMP      r0,#5                 ;143
00001a  da01              BGE      |L1.32|
00001c  2001              MOVS     r0,#1                 ;145
00001e  e7f9              B        |L1.20|
                  |L1.32|
000020  1d60              ADDS     r0,r4,#5              ;148
000022  f7fffffe          BL       S3BToFloat
000026  481c              LDR      r0,|L1.152|
000028  ed800a00          VSTR     s0,[r0,#0]            ;148
00002c  ed900a00          VLDR     s0,[r0,#0]            ;149
000030  ee300ac0          VSUB.F32 s0,s1,s0              ;149
000034  4819              LDR      r0,|L1.156|
000036  ed800a00          VSTR     s0,[r0,#0]            ;149
00003a  ed900a00          VLDR     s0,[r0,#0]            ;151
00003e  eeb50ac0          VCMPE.F32 s0,#0.0               ;151
000042  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;151
000046  d205              BCS      |L1.84|
000048  ed900a00          VLDR     s0,[r0,#0]            ;153
00004c  eeb10a40          VNEG.F32 s0,s0                 ;153
000050  ed800a00          VSTR     s0,[r0,#0]            ;153
                  |L1.84|
000054  4810              LDR      r0,|L1.152|
000056  ed900a00          VLDR     s0,[r0,#0]            ;156
00005a  eeb50ac0          VCMPE.F32 s0,#0.0               ;156
00005e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;156
000062  d205              BCS      |L1.112|
000064  ed900a00          VLDR     s0,[r0,#0]            ;158
000068  eeb10a40          VNEG.F32 s0,s0                 ;158
00006c  ed800a00          VSTR     s0,[r0,#0]            ;158
                  |L1.112|
000070  4809              LDR      r0,|L1.152|
000072  ed900a00          VLDR     s0,[r0,#0]            ;161
000076  ed9f1a0a          VLDR     s2,|L1.160|
00007a  eec01a01          VDIV.F32 s3,s0,s2              ;161
00007e  4807              LDR      r0,|L1.156|
000080  ed900a00          VLDR     s0,[r0,#0]            ;161
000084  eef41ac0          VCMPE.F32 s3,s0                 ;161
000088  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;161
00008c  dd01              BLE      |L1.146|
00008e  2000              MOVS     r0,#0                 ;163
000090  e7c0              B        |L1.20|
                  |L1.146|
000092  2002              MOVS     r0,#2                 ;166
000094  e7be              B        |L1.20|
;;;168    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      ||pp||
                  |L1.156|
                          DCD      ||dlt||
                  |L1.160|
0000a0  461c4000          DCFS     0x461c4000 ; 10000

                          AREA ||i.FindParam||, CODE, READONLY, ALIGN=2

                  FindParam PROC
;;;83     
;;;84     const SensOneParam * FindParam(uint8_t idp) {
000000  4602              MOV      r2,r0
;;;85       const SensOneParam * pp;
;;;86       pp=Params;
000002  4906              LDR      r1,|L2.28|
;;;87       while (pp->ID) {
000004  e005              B        |L2.18|
                  |L2.6|
;;;88         if (pp->ID==idp) return pp;
000006  7808              LDRB     r0,[r1,#0]
000008  4290              CMP      r0,r2
00000a  d101              BNE      |L2.16|
00000c  4608              MOV      r0,r1
                  |L2.14|
;;;89         pp++;
;;;90       }
;;;91       return 0;
;;;92     };
00000e  4770              BX       lr
                  |L2.16|
000010  1d89              ADDS     r1,r1,#6              ;89
                  |L2.18|
000012  7808              LDRB     r0,[r1,#0]            ;87
000014  2800              CMP      r0,#0                 ;87
000016  d1f6              BNE      |L2.6|
000018  bf00              NOP                            ;91
00001a  e7f8              B        |L2.14|
;;;93     
                          ENDP

                  |L2.28|
                          DCD      Params

                          AREA ||i.FloatToS3B||, CODE, READONLY, ALIGN=1

                  FloatToS3B PROC
;;;106    // Преобразование Float -> 3 байта
;;;107    void FloatToS3B(__packed uint8_t*buf,float inf) {
000000  b501              PUSH     {r0,lr}
000002  ed2d0b02          VPUSH    {d0}
;;;108      __packed uint8_t * p;
;;;109      p=((__packed uint8_t*)(&inf)+1);
000006  f10d0101          ADD      r1,sp,#1
;;;110      *(buf++)=*(p++);
00000a  f8112b01          LDRB     r2,[r1],#1
00000e  f8002b01          STRB     r2,[r0],#1
;;;111      *(buf++)=*(p++);
000012  f8112b01          LDRB     r2,[r1],#1
000016  f8002b01          STRB     r2,[r0],#1
;;;112      *(buf++)=*(p++); 
00001a  f8112b01          LDRB     r2,[r1],#1
00001e  f8002b01          STRB     r2,[r0],#1
;;;113    }
000022  bd0e              POP      {r1-r3,pc}
;;;114    
                          ENDP


                          AREA ||i.GetAccessMode||, CODE, READONLY, ALIGN=2

                  GetAccessMode PROC
;;;45     // Возвращает текущий уровень доступа
;;;46     uint8_t GetAccessMode(void)
000000  4801              LDR      r0,|L4.8|
;;;47     {
;;;48       return Access;
000002  7800              LDRB     r0,[r0,#0]  ; Access
;;;49     }
000004  4770              BX       lr
;;;50     // Переключает на пользовательский режим без сохранения изменений
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      Access

                          AREA ||i.GetReadOnly||, CODE, READONLY, ALIGN=1

                  GetReadOnly PROC
;;;687    // Возвращает 1 если запись запрещена
;;;688    static uint8_t GetReadOnly(void) 
000000  2000              MOVS     r0,#0
;;;689    {
;;;690      return 0x00;
;;;691    }
000002  4770              BX       lr
;;;692    
                          ENDP


                          AREA ||i.ReadInt16||, CODE, READONLY, ALIGN=1

                  ReadInt16 PROC
;;;114    
;;;115    uint16_t ReadInt16(__packed uint8_t * buf) {
000000  b508              PUSH     {r3,lr}
000002  4601              MOV      r1,r0
;;;116      uint16_t rez=0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;117      __packed uint8_t * p;
;;;118      p=(__packed uint8_t*)&rez;
000008  466a              MOV      r2,sp
;;;119      *(p++)=*(buf++);
00000a  f8110b01          LDRB     r0,[r1],#1
00000e  f8020b01          STRB     r0,[r2],#1
;;;120      *(p)=*(buf);
000012  7808              LDRB     r0,[r1,#0]
000014  7010              STRB     r0,[r2,#0]
;;;121      return rez;
000016  f8bd0000          LDRH     r0,[sp,#0]
;;;122    }
00001a  bd08              POP      {r3,pc}
;;;123    
                          ENDP


                          AREA ||i.ResetAccess||, CODE, READONLY, ALIGN=2

                  ResetAccess PROC
;;;50     // Переключает на пользовательский режим без сохранения изменений
;;;51     void ResetAccess(void)
000000  b510              PUSH     {r4,lr}
;;;52     {
;;;53       LoadConst();
000002  f7fffffe          BL       LoadConst
;;;54       
;;;55       Access = USERMODE;
000006  2002              MOVS     r0,#2
000008  4901              LDR      r1,|L7.16|
00000a  7008              STRB     r0,[r1,#0]
;;;56     }
00000c  bd10              POP      {r4,pc}
;;;57     
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      Access

                          AREA ||i.S3BToFloat||, CODE, READONLY, ALIGN=2

                  S3BToFloat PROC
;;;94     // Преобразование 3 байта -> float
;;;95     float S3BToFloat(__packed uint8_t * buf) {
000000  b508              PUSH     {r3,lr}
;;;96       float r=0;
000002  ed9f0a0c          VLDR     s0,|L8.52|
000006  ed8d0a00          VSTR     s0,[sp,#0]
;;;97       __packed uint8_t * p;
;;;98       p=(__packed uint8_t*)(&r);
00000a  4669              MOV      r1,sp
;;;99       *(p)=(*buf&0x01)?0xFF:0x00;
00000c  7802              LDRB     r2,[r0,#0]
00000e  f0020201          AND      r2,r2,#1
000012  b10a              CBZ      r2,|L8.24|
000014  22ff              MOVS     r2,#0xff
000016  e000              B        |L8.26|
                  |L8.24|
000018  2200              MOVS     r2,#0
                  |L8.26|
00001a  700a              STRB     r2,[r1,#0]
;;;100      *(p+1)=*(buf++);
00001c  f8102b01          LDRB     r2,[r0],#1
000020  704a              STRB     r2,[r1,#1]
;;;101      *(p+2)=*(buf++);
000022  f8102b01          LDRB     r2,[r0],#1
000026  708a              STRB     r2,[r1,#2]
;;;102      *(p+3)=*(buf++);
000028  f8102b01          LDRB     r2,[r0],#1
00002c  70ca              STRB     r2,[r1,#3]
;;;103      return r;  
00002e  ed9d0a00          VLDR     s0,[sp,#0]
;;;104    }
000032  bd08              POP      {r3,pc}
;;;105    
                          ENDP

                  |L8.52|
000034  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.SensAnswerPkg||, CODE, READONLY, ALIGN=2

                  SensAnswerPkg PROC
;;;183    
;;;184    char SensAnswerPkg(uint8_t *buf) 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;185    {
000004  4604              MOV      r4,r0
;;;186      uint32_t cmd = buf[2] & 0x1F;;
000006  78a0              LDRB     r0,[r4,#2]
000008  f000001f          AND      r0,r0,#0x1f
00000c  9003              STR      r0,[sp,#0xc]
;;;187      uint32_t len = buf[0];
00000e  f8948000          LDRB     r8,[r4,#0]
;;;188      uint8_t  prm;
;;;189      
;;;190      __packed uint8_t *indt;
;;;191      __packed uint8_t *outdt;
;;;192      __packed uint8_t *enddt;  //указатель на последний блок буфера
;;;193      __packed uint8_t *pdt;    //указатель для работы с данными
;;;194    
;;;195      const SensOneParam *fp;
;;;196      const SensTable    *tbl;
;;;197    
;;;198      if (len < 2)
000012  f1b80f02          CMP      r8,#2
000016  d203              BCS      |L9.32|
;;;199      {
;;;200        return 1;
000018  2001              MOVS     r0,#1
                  |L9.26|
;;;201      } 
;;;202      if (buf[2] & 0x80)
;;;203      {
;;;204        return 2;
;;;205      }
;;;206    
;;;207      switch (cmd) 
;;;208      {
;;;209        case (CMD_SETPOINT):
;;;210             switch (buf[3]) //выполнение команд - выясняем номер команды
;;;211             {
;;;212               case (230):   //переход на пользовательский уровень
;;;213                    Access = USERMODE;
;;;214                    if (SaveData)
;;;215                    {
;;;216                      SaveConst(0);
;;;217                    } 
;;;218                    SaveData=0;
;;;219                    buf[4] = buf[3];
;;;220                    buf[3] = 0x5A;
;;;221                    buf[0] = 4;
;;;222                    break;
;;;223               case (231):  //переход на администраторский уровень
;;;224               case (232):  //переход на супервайзерский уровень
;;;225                    if (!SaveData) 
;;;226                    {
;;;227                      LoadConst();
;;;228                    }
;;;229                    switch (CheckPSWD(buf, (buf[3] == 231) ? (HardDSt.PswAdmin) : (HardDSt.PswSuper))) 
;;;230                    {
;;;231                      case (0):
;;;232                           Access = ((buf[3] == 231) ? ADMINMODE : SUPERMODE);
;;;233                           if (SaveData) 
;;;234                           {
;;;235                             SaveConst(0);
;;;236                           }
;;;237                           SaveData = 0;
;;;238                           buf[4]   = buf[3];
;;;239                           buf[3]   = 0x5A;
;;;240                           buf[0]   = 4;
;;;241                           break;
;;;242                      case (1): //дозапрос пароля
;;;243                           buf[0] = 8;
;;;244                           buf[4] = buf[3];
;;;245                           buf[5] = ((buf[3] == 231) ? PASSWD1 : PASSWD2);
;;;246                           buf[3] = 0x20;  // После этих ^^^
;;;247                           buf[6] = 0;
;;;248                           buf[7] = 0;
;;;249                           buf[8] = 0;
;;;250                           break;
;;;251                      default:  //отказ в выполнении
;;;252                           buf[4] = buf[3];
;;;253                           buf[3] = 0x00;
;;;254                           buf[0] = 4;
;;;255                           break;              
;;;256                    }
;;;257                    break;
;;;258               case (235): //СБРОС ПАРОЛЕЙ 
;;;259                    if (GetAccessMode() == USERMODE)
;;;260                    {
;;;261                      DSt.PswAdmin = 0;
;;;262                    }
;;;263                    if (GetAccessMode() == ADMINMODE)
;;;264                    {
;;;265                      DSt.PswSuper = 31.41;
;;;266                    }
;;;267                    SaveConst(0);
;;;268                    buf[4] = buf[3];
;;;269                    buf[3] = 0x5A;
;;;270                    buf[0] = 4;
;;;271                    break;
;;;272               default:
;;;273    //			       SetTCPnt(buf);
;;;274                    switch (SetTCPnt(buf)) 
;;;275                    {
;;;276                      case (0):          //выполнена
;;;277    //                       buf[4] = buf[3];
;;;278    //                       buf[3] = 0x5A;
;;;279    //                       buf[0] = 4;
;;;280                           break;
;;;281                      case (1):          //отказ
;;;282                           buf[4] = buf[3];
;;;283                           buf[3] = 0x00;
;;;284                           buf[0] = 4;
;;;285                           break;
;;;286                      case (8):
;;;287                           return 0;     //дозапрос параметров
;;;288                      default:
;;;289                           return 4;
;;;290                    }
;;;291             }
;;;292             break;
;;;293        case (CMD_START):      // Команда принудительного измерения - приравнивается к CMD_GETPI
;;;294             len = 4;
;;;295             FloatToS3B(buf + 3, CMD_GETPI);   //
;;;296        case (CMD_MENULEV):
;;;297             if (len < 4) 
;;;298             {
;;;299               return 3;
;;;300             }
;;;301             cmd = (uint8_t)S3BToFloat(buf + 3);
;;;302        case (CMD_GETPI):
;;;303        case (CMD_GETPS):
;;;304        case (CMD_GETTN):
;;;305             len = ThePredef(cmd, buf); // Считываем соответствующие пункты
;;;306        case (CMD_GETPR):
;;;307             if (len > 17)
;;;308             {
;;;309               len = 17;
;;;310             } 
;;;311             outdt  = buf + 3 + (len - 3) * 4;
;;;312             enddt  = outdt;
;;;313             indt   = buf + len;
;;;314             len   -= 2;           //количество параметров
;;;315             buf[0] = len * 4 + 2; //длина ответного пакета
;;;316             while (len) 
;;;317             {
;;;318               // Ищем очередной параметр
;;;319               prm = *(indt--);
;;;320               if ((len > 1) ? ((*indt) == MENUMOD) : 0) 
;;;321               {
;;;322                 // Это - меню!
;;;323                 --indt;
;;;324                 --len;
;;;325                 // Весь буфер надо сдвинуть на 4 байта ближе к началу
;;;326                 outdt -= 4;     // vv Строки поменяны местами в версии 0.8
;;;327                 pdt    = outdt; // ^^
;;;328                 do 
;;;329                 {
;;;330                   *(pdt) = *(pdt + 4);
;;;331                   ++pdt;
;;;332                 } while (pdt != enddt);
;;;333                 enddt  -= 4;
;;;334                 buf[0] -= 4;
;;;335                 // Формируем указатель на пункт меню
;;;336                 *(outdt) = MENUMOD;
;;;337                 FloatToS3B(outdt + 1, (float)prm);
;;;338               } 
;;;339               else 
;;;340               {
;;;341                 // Работаем как с обычным параметром - это не меню
;;;342                 *(outdt) = prm;
;;;343                 fp = FindParam(prm);
;;;344                 if (fp == 0) 
;;;345                 {
;;;346                   *(outdt+1) = 0xFF;
;;;347                   *(outdt+2) = 0xFF;
;;;348                   *(outdt+3) = 0xFF;
;;;349                 } 
;;;350                 else 
;;;351                 {
;;;352                   if (((fp->Type & 0xC0) >> 6) < (Access + 1)) 
;;;353                   {
;;;354                     // Доступ закрыт
;;;355                     *(outdt+1) = 0xFF;
;;;356                     *(outdt+2) = 0xFF;
;;;357                     *(outdt+3) = 0xFF;
;;;358                   } 
;;;359                   else 
;;;360                   {
;;;361                     switch (fp->Type & 0x0F) 
;;;362                     {
;;;363                       case (S_FLOAT):
;;;364                            FloatToS3B(outdt + 1, *((__packed float *)(fp->Pointer)));
;;;365                            break;
;;;366                       case (S_BYTE):
;;;367                            FloatToS3B(outdt+1, *((__packed uint8_t *)(fp->Pointer)));
;;;368                            break;
;;;369                       case (S_BITS):
;;;370                       case (S_PROGNUM):
;;;371                            *(outdt + 1) = *((__packed uint8_t *)(fp->Pointer));
;;;372                            *(outdt + 2) = *((__packed uint8_t *)(fp->Pointer) + 1);
;;;373                            *(outdt + 3) = *((__packed uint8_t *)(fp->Pointer) + 2);
;;;374                            break;
;;;375                       case (S_ADDR):
;;;376                            *(outdt + 1) = *(outdt + 2) = *(outdt + 3) = *((uint8_t *)(fp->Pointer));
;;;377                            break;
;;;378                       case (S_EIZM):
;;;379    			   						   FloatToS3B(outdt + 1, *((__packed float *)(fp->Pointer)));
;;;380                            break;
;;;381                       case (S_TABLE):
;;;382                            FloatToS3B(outdt + 1, ((SensTable *)(fp->Pointer))->Length);
;;;383                            break;
;;;384                       case (S_VARFLOATTBL): 
;;;385                            {
;;;386                              float pl;
;;;387                              if (((SensTable *)(fp->Pointer))->VarLength) 
;;;388                              {
;;;389                                pl = *((SensTable *)(fp->Pointer))->VarLength;
;;;390                              } 
;;;391                              else 
;;;392                              {
;;;393                                pl = 0;
;;;394                              }
;;;395                              if (pl > ((SensTable *)(fp->Pointer))->Length)
;;;396                              {
;;;397                                pl = ((SensTable *)(fp->Pointer))->Length;
;;;398                              } 
;;;399                              FloatToS3B(outdt + 1, pl * 3);
;;;400                            }
;;;401                            break;
;;;402                       case (S_FLOATTBL):
;;;403                            FloatToS3B(outdt + 1,((SensTable *)(fp->Pointer))->Length * 3);
;;;404                            break;
;;;405                       case (S_FRAMTABLE):
;;;406                            break;
;;;407                       default:
;;;408                            *(outdt + 1) = 0xFF;
;;;409                            *(outdt + 2) = 0xFF;
;;;410                            *(outdt + 3) = 0xFF;
;;;411                     }
;;;412                   }
;;;413                 }
;;;414               }
;;;415               outdt -= 4;
;;;416               --len;
;;;417             }
;;;418             break;
;;;419        case (CMD_SETPR):
;;;420             outdt  = (buf + 3);
;;;421             indt   = (buf + 3);
;;;422             len    = (buf[0] - 2) / 4;
;;;423             buf[0] = 2;               // Длина ответного пакета
;;;424             if (GetReadOnly()) 
;;;425             {
;;;426               break; // Если запись запрещена - не выполняем
;;;427             }
;;;428             while (len) 
;;;429             {
;;;430               // Ищем очередной параметр
;;;431               prm = *(indt++);
;;;432               fp  = FindParam(prm);
;;;433               if (fp != 0) 
;;;434               {
;;;435                 if (((fp->Type & 0x30) >> 4) >= (Access + 1)) //по значению больше, а по правам меньше
;;;436                 {
;;;437                   *(outdt++) = prm;
;;;438                   switch (fp->Type & 0x0F) 
;;;439                   {
;;;440                     case (S_FLOAT):
;;;441                          *((__packed float*)(fp->Pointer)) = S3BToFloat(indt);
;;;442                          buf[0]++;
;;;443                          break;
;;;444                     case (S_BYTE):
;;;445                          *((__packed uint8_t*)(fp->Pointer)) = S3BToFloat(indt);
;;;446                          buf[0]++;
;;;447                          break;
;;;448                     case (S_BITS):
;;;449                          *((__packed uint8_t*)(fp->Pointer))   = *(indt);
;;;450                          *((__packed uint8_t*)(fp->Pointer)+1) = *(indt + 1);
;;;451                          buf[0]++;
;;;452                          break;
;;;453                     case (S_ADDR):
;;;454                          if ((*(indt) == *(indt + 1)) && (*(indt + 1) == *(indt + 2))) 
;;;455                          {
;;;456                            *((uint8_t *)(fp->Pointer)) = *indt;
;;;457                            buf[0]++;
;;;458                          }
;;;459    			   			 break;
;;;460                     case (S_EIZM):
;;;461    //			   					    if ((*(indt) >= MIN_EIZM) && (*(indt) <= MAX_EIZM) \
;;;462    //			   					    		&& (MIN_EIZM == *(indt + 1)) && (MAX_EIZM == *(indt + 2)))
;;;463    //			   					    {
;;;464    //			   					    	*((__packed float *)(fp->Pointer)) = S3BToFloat(indt);
;;;465    //			   					    	buf[0]++;
;;;466    //			   					    }
;;;467                          break;
;;;468                     case (S_TABLE):
;;;469                     case (S_FRAMTABLE):
;;;470                     case (S_VARFLOATTBL):
;;;471                     case (S_FLOATTBL):
;;;472                          break;
;;;473                   }
;;;474                   SaveData=1;
;;;475                 }
;;;476               }
;;;477               indt += 3;
;;;478               --len;
;;;479             }
;;;480             break;
;;;481        //таблицы
;;;482        case (CMD_GETTBL):
;;;483              if (buf[0] >= 7) 
;;;484              {
;;;485                tbladr = ReadInt16(buf + 4);
;;;486                tblnum = ReadInt16(buf + 6);
;;;487                prm    = buf[3];
;;;488                fp     = FindParam(prm);
;;;489                if (((fp != 0) && (tblnum < 59)) ? (((fp->Type & 0xC0) >> 6) >= (Access + 1)) : 0) 
;;;490                {
;;;491                  switch (fp->Type & 0x0F) 
;;;492                  {
;;;493                    case (S_TABLE):
;;;494                         //да, таблица есть и доступна
;;;495                         tbl = (const SensTable*) fp->Pointer;
;;;496                         if ((tbladr+tblnum)>tbl->Length)
;;;497                         {
;;;498                           tblnum=tbl->Length-tbladr;
;;;499                         } 
;;;500                         //копируем кучу байтов
;;;501                         indt  = (uint8_t *)tbl->Data + tbladr;
;;;502                         outdt = buf + 6;
;;;503                         for (len = 0; len < tblnum; len++) 
;;;504                         {
;;;505                           *(outdt++) = *(indt++);
;;;506                         }
;;;507                         buf[0] = tblnum + 5;
;;;508                         break;
;;;509                    case (S_FRAMTABLE):
;;;510                         if (!fp->Pointer) 
;;;511                         {
;;;512                           //buf[0]=GTTableToByte(buf+6,tbladr,tblnum)+5;
;;;513                         }
;;;514                         break;
;;;515                    case (S_VARFLOATTBL):
;;;516                    case (S_FLOATTBL): 
;;;517                         {
;;;518                           float *flp;
;;;519                           uint8_t btflp;
;;;520                           //да, таблица есть и доступна, нужно преобразовывать во Float при обращении
;;;521                           tbl = (const SensTable *)fp->Pointer;
;;;522                           if ((tbladr + tblnum) > (tbl->Length * 3))
;;;523                           {
;;;524                             tblnum = (tbl->Length * 3) - tbladr;
;;;525                           } 
;;;526                           //копируем кучу байтов
;;;527                           flp   = (float *)(tbl->Data) + tbladr / 3;
;;;528                           btflp = tbladr % 3;
;;;529                           outdt = buf + 6;
;;;530                           for (len = 0; len < tblnum; len++) 
;;;531                           {
;;;532                             *(outdt++) = *(((uint8_t *)flp) + btflp + 1);
;;;533                             ++btflp;
;;;534                             if (btflp > 2) 
;;;535                             {
;;;536                               btflp = 0;
;;;537                               ++flp;
;;;538                             }
;;;539                           }
;;;540                           buf[0] = tblnum + 5;
;;;541                         } 
;;;542                         break;
;;;543                    default:
;;;544                         buf[0] = 5;
;;;545                  }
;;;546                } 
;;;547                else 
;;;548                {
;;;549                  buf[0] = 5; // Возвращаем типа пустые данные
;;;550                }
;;;551              } 
;;;552              else 
;;;553              {
;;;554                return 3;
;;;555              }
;;;556              break;
;;;557        case (CMD_SETTBL):
;;;558    		     if (GetReadOnly())  // Если запись запрещена - не выполняем 
;;;559    		     {
;;;560    		       buf[6] = 0;
;;;561    		       buf[7] = 0;
;;;562    		       buf[0] = 7;
;;;563    		       break;   
;;;564    		     }
;;;565             if (buf[0] >= 6) 
;;;566             {
;;;567               //ищем очередной параметр
;;;568               tbladr  = ReadInt16(buf + 4);
;;;569               tblnum  = buf[0];
;;;570               tblnum -= 5;
;;;571               prm     = buf[3];
;;;572               fp      = FindParam(prm);
;;;573    
;;;574               if ((fp != 0) ? (((fp->Type & 0x30) >> 4) >= (Access + 1)) : 0) 
;;;575               {
;;;576                 //да, таблица есть и доступна
;;;577                 switch (fp->Type & 0x0F) 
;;;578                 {
;;;579                   case (S_TABLE):
;;;580                        tbl = (const SensTable *)fp->Pointer;
;;;581                        if ((tbladr + tblnum) >= tbl->Length)
;;;582                        {
;;;583                          tblnum = tbl->Length-tbladr;          
;;;584                        } 
;;;585                        //копируем кучу байтов
;;;586                        indt  = buf + 6;
;;;587                        outdt = (uint8_t *)tbl->Data + tbladr;
;;;588                        for (len = 0; len < tblnum; len++)
;;;589                        {
;;;590                          *(outdt++) = *(indt++);
;;;591                        } 
;;;592                        WriteInt16(buf + 6, tblnum);
;;;593                        buf[0]   = 7;
;;;594                        SaveData = 1;
;;;595                        break;
;;;596                   case (S_FRAMTABLE):
;;;597                        if (!fp->Pointer) 
;;;598                        {
;;;599                          //WriteInt16(buf + 6, GTByteToTable(buf + 6, tbladr, tblnum)); // Считывает со смещения adr num байт в градуировочную таблицу из буфера
;;;600                        } 
;;;601                        else 
;;;602                        {
;;;603                          buf[6] = 0;
;;;604                          buf[7] = 0;
;;;605                        }
;;;606                        buf[0] = 7;
;;;607                        break;
;;;608                   case (S_VARFLOATTBL):
;;;609                   case (S_FLOATTBL): 
;;;610                        {
;;;611                          float *flp;
;;;612                          uint8_t btflp;
;;;613                          
;;;614                          tbl = (const SensTable *)fp->Pointer;
;;;615                          if ((tbladr + tblnum) > (tbl->Length * 3))
;;;616                          {
;;;617                            tblnum=(tbl->Length * 3) - tbladr;
;;;618                          } 
;;;619                          // Копируем кучу байтов
;;;620                          indt  = buf + 6;
;;;621                          flp   = (float *)tbl->Data + tbladr / 3;
;;;622                          btflp = tbladr % 3;
;;;623                          for (len = 0; len < tblnum; len++) 
;;;624                          {
;;;625                            *(((uint8_t *)flp) + btflp + 1)= *(indt++);
;;;626                            ++btflp;                  
;;;627                            if (btflp > 2) 
;;;628                            {
;;;629                              *((uint8_t *)flp) = 0;
;;;630                              btflp = 0;
;;;631                              ++flp;
;;;632                            } 
;;;633                          }
;;;634                          WriteInt16(buf + 6, tblnum);
;;;635                          buf[0]   = 7;
;;;636                          SaveData = 1;
;;;637                        }
;;;638                        break;
;;;639                   default:
;;;640                        buf[6] = 0;
;;;641                        buf[7] = 0;
;;;642                        buf[0] = 7; // Возвращаем типа ничего не записано              
;;;643                        break;
;;;644                 }
;;;645               } 
;;;646               else 
;;;647               {
;;;648                 buf[6] = 0;
;;;649                 buf[7] = 0;
;;;650                 buf[0] = 7; // Возвращаем типа ничего не записано
;;;651               }
;;;652             }
;;;653             break;    
;;;654             // Команда получения байта состояния
;;;655        case (CMD_GETSTATE):
;;;656    //#################### Линия СЕНС #######################
;;;657    #ifdef __SENS	
;;;658             if (!GetBSBuf(buf)) 
;;;659             {  // Если нет пакета - формируется пустой
;;;660    #endif
;;;661    //^^^^^^^^^^^^^^^^^^^^^ Линия СЕНС ^^^^^^^^^^^^^^^^^^^^^^
;;;662               buf[0]  = 3;
;;;663               buf[2] |= 0x80;
;;;664               buf[3]  = 0;
;;;665    //#################### Линия СЕНС #######################
;;;666    #ifdef __SENS	
;;;667             }
;;;668    #endif
;;;669    //^^^^^^^^^^^^^^^^^^^^^ Линия СЕНС ^^^^^^^^^^^^^^^^^^^^^^			
;;;670             break;  
;;;671        default:
;;;672             return 4;
;;;673      }
;;;674    
;;;675    	if (SaveData /*&&(Access==USERMODE)*/ ) 
;;;676    	{
;;;677        // Данные записываются сразу после изменения. Всегда.
;;;678         SaveConst(buf[3]);
;;;679         SaveData = 0;
;;;680    	}
;;;681    // Тут должен быть сформирован весь буфер. Остается выставить флаг ответа
;;;682      buf[2] |= 0x80;
;;;683      return 0;
;;;684    }
00001a  b004              ADD      sp,sp,#0x10
00001c  e8bd9ff0          POP      {r4-r12,pc}
                  |L9.32|
000020  78a0              LDRB     r0,[r4,#2]            ;202
000022  f0000080          AND      r0,r0,#0x80           ;202
000026  b108              CBZ      r0,|L9.44|
000028  2002              MOVS     r0,#2                 ;204
00002a  e7f6              B        |L9.26|
                  |L9.44|
00002c  9803              LDR      r0,[sp,#0xc]          ;207
00002e  280a              CMP      r0,#0xa               ;207
000030  d070              BEQ      |L9.276|
000032  dc0c              BGT      |L9.78|
000034  2809              CMP      r0,#9                 ;207
000036  d26e              BCS      |L9.278|
000038  e8dff010          TBH      [pc,r0,LSL #1]        ;207
00003c  03cf00d5          DCW      0x03cf,0x00d5
000040  00d600d7          DCW      0x00d6,0x00d7
000044  006d006d          DCW      0x006d,0x006d
000048  006d006d          DCW      0x006d,0x006d
00004c  00c6              DCW      0x00c6
                  |L9.78|
00004e  2811              CMP      r0,#0x11              ;207
000050  d074              BEQ      |L9.316|
000052  dc04              BGT      |L9.94|
000054  280f              CMP      r0,#0xf               ;207
000056  d072              BEQ      |L9.318|
000058  2810              CMP      r0,#0x10              ;207
                  |L9.90|
00005a  d15c              BNE      |L9.278|
00005c  e0ac              B        |L9.440|
                  |L9.94|
00005e  281a              CMP      r0,#0x1a              ;207
000060  d06e              BEQ      |L9.320|
000062  281e              CMP      r0,#0x1e              ;207
000064  d1f9              BNE      |L9.90|
000066  78e0              LDRB     r0,[r4,#3]            ;210
000068  28e6              CMP      r0,#0xe6              ;210
00006a  d006              BEQ      |L9.122|
00006c  28e7              CMP      r0,#0xe7              ;210
00006e  d017              BEQ      |L9.160|
000070  28e8              CMP      r0,#0xe8              ;210
000072  d016              BEQ      |L9.162|
000074  28eb              CMP      r0,#0xeb              ;210
000076  d17c              BNE      |L9.370|
000078  e063              B        |L9.322|
                  |L9.122|
00007a  2002              MOVS     r0,#2                 ;213
00007c  49fc              LDR      r1,|L9.1136|
00007e  7008              STRB     r0,[r1,#0]            ;213
000080  48fc              LDR      r0,|L9.1140|
000082  7800              LDRB     r0,[r0,#0]            ;214  ; SaveData
000084  b110              CBZ      r0,|L9.140|
000086  2000              MOVS     r0,#0                 ;216
000088  f7fffffe          BL       SaveConst
                  |L9.140|
00008c  2000              MOVS     r0,#0                 ;218
00008e  49f9              LDR      r1,|L9.1140|
000090  7008              STRB     r0,[r1,#0]            ;218
000092  78e0              LDRB     r0,[r4,#3]            ;219
000094  7120              STRB     r0,[r4,#4]            ;219
000096  205a              MOVS     r0,#0x5a              ;220
000098  70e0              STRB     r0,[r4,#3]            ;220
00009a  2004              MOVS     r0,#4                 ;221
00009c  7020              STRB     r0,[r4,#0]            ;221
00009e  e089              B        |L9.436|
                  |L9.160|
0000a0  bf00              NOP                            ;224
                  |L9.162|
0000a2  48f4              LDR      r0,|L9.1140|
0000a4  7800              LDRB     r0,[r0,#0]            ;225  ; SaveData
0000a6  b908              CBNZ     r0,|L9.172|
0000a8  f7fffffe          BL       LoadConst
                  |L9.172|
0000ac  78e0              LDRB     r0,[r4,#3]            ;229
0000ae  28e7              CMP      r0,#0xe7              ;229
0000b0  d103              BNE      |L9.186|
0000b2  48f1              LDR      r0,|L9.1144|
0000b4  f8d00001          LDR      r0,[r0,#1]            ;229  ; HardDSt
0000b8  e002              B        |L9.192|
                  |L9.186|
0000ba  48ef              LDR      r0,|L9.1144|
0000bc  f8d00005          LDR      r0,[r0,#5]            ;229  ; HardDSt
                  |L9.192|
0000c0  ee000a10          VMOV     s0,r0                 ;229
0000c4  4620              MOV      r0,r4                 ;229
0000c6  f7fffffe          BL       CheckPSWD
0000ca  b110              CBZ      r0,|L9.210|
0000cc  2801              CMP      r0,#1                 ;229
0000ce  d12c              BNE      |L9.298|
0000d0  e017              B        |L9.258|
                  |L9.210|
0000d2  78e0              LDRB     r0,[r4,#3]            ;232
0000d4  28e7              CMP      r0,#0xe7              ;232
0000d6  d101              BNE      |L9.220|
0000d8  2001              MOVS     r0,#1                 ;232
0000da  e000              B        |L9.222|
                  |L9.220|
0000dc  2000              MOVS     r0,#0                 ;232
                  |L9.222|
0000de  49e4              LDR      r1,|L9.1136|
0000e0  7008              STRB     r0,[r1,#0]            ;232
0000e2  48e4              LDR      r0,|L9.1140|
0000e4  7800              LDRB     r0,[r0,#0]            ;233  ; SaveData
0000e6  b110              CBZ      r0,|L9.238|
0000e8  2000              MOVS     r0,#0                 ;235
0000ea  f7fffffe          BL       SaveConst
                  |L9.238|
0000ee  2000              MOVS     r0,#0                 ;237
0000f0  49e0              LDR      r1,|L9.1140|
0000f2  7008              STRB     r0,[r1,#0]            ;237
0000f4  78e0              LDRB     r0,[r4,#3]            ;238
0000f6  7120              STRB     r0,[r4,#4]            ;238
0000f8  205a              MOVS     r0,#0x5a              ;239
0000fa  70e0              STRB     r0,[r4,#3]            ;239
0000fc  2004              MOVS     r0,#4                 ;240
0000fe  7020              STRB     r0,[r4,#0]            ;240
000100  e01a              B        |L9.312|
                  |L9.258|
000102  2008              MOVS     r0,#8                 ;243
000104  7020              STRB     r0,[r4,#0]            ;243
000106  78e0              LDRB     r0,[r4,#3]            ;244
000108  7120              STRB     r0,[r4,#4]            ;244
00010a  78e0              LDRB     r0,[r4,#3]            ;245
00010c  28e7              CMP      r0,#0xe7              ;245
00010e  d103              BNE      |L9.280|
000110  20f5              MOVS     r0,#0xf5              ;245
000112  e002              B        |L9.282|
                  |L9.276|
000114  e1e5              B        |L9.1250|
                  |L9.278|
000116  e369              B        |L9.2028|
                  |L9.280|
000118  20f6              MOVS     r0,#0xf6              ;245
                  |L9.282|
00011a  7160              STRB     r0,[r4,#5]            ;245
00011c  2020              MOVS     r0,#0x20              ;246
00011e  70e0              STRB     r0,[r4,#3]            ;246
000120  2000              MOVS     r0,#0                 ;247
000122  71a0              STRB     r0,[r4,#6]            ;247
000124  71e0              STRB     r0,[r4,#7]            ;248
000126  7220              STRB     r0,[r4,#8]            ;249
000128  e006              B        |L9.312|
                  |L9.298|
00012a  78e0              LDRB     r0,[r4,#3]            ;252
00012c  7120              STRB     r0,[r4,#4]            ;252
00012e  2000              MOVS     r0,#0                 ;253
000130  70e0              STRB     r0,[r4,#3]            ;253
000132  2004              MOVS     r0,#4                 ;254
000134  7020              STRB     r0,[r4,#0]            ;254
000136  bf00              NOP                            ;255
                  |L9.312|
000138  bf00              NOP                            ;241
00013a  e03b              B        |L9.436|
                  |L9.316|
00013c  e14e              B        |L9.988|
                  |L9.318|
00013e  e05b              B        |L9.504|
                  |L9.320|
000140  e277              B        |L9.1586|
                  |L9.322|
000142  f7fffffe          BL       GetAccessMode
000146  2802              CMP      r0,#2                 ;259
000148  d106              BNE      |L9.344|
00014a  ed9f0acc          VLDR     s0,|L9.1148|
00014e  ee100a10          VMOV     r0,s0                 ;261
000152  49cb              LDR      r1,|L9.1152|
000154  f8c10001          STR      r0,[r1,#1]            ;261  ; DSt
                  |L9.344|
000158  f7fffffe          BL       GetAccessMode
00015c  2801              CMP      r0,#1                 ;263
00015e  d106              BNE      |L9.366|
000160  ed9f0ac8          VLDR     s0,|L9.1156|
000164  ee100a10          VMOV     r0,s0                 ;265
000168  49c5              LDR      r1,|L9.1152|
00016a  f8c10005          STR      r0,[r1,#5]            ;265  ; DSt
                  |L9.366|
00016e  2000              MOVS     r0,#0                 ;267
000170  e000              B        |L9.372|
                  |L9.370|
000172  e008              B        |L9.390|
                  |L9.372|
000174  f7fffffe          BL       SaveConst
000178  78e0              LDRB     r0,[r4,#3]            ;268
00017a  7120              STRB     r0,[r4,#4]            ;268
00017c  205a              MOVS     r0,#0x5a              ;269
00017e  70e0              STRB     r0,[r4,#3]            ;269
000180  2004              MOVS     r0,#4                 ;270
000182  7020              STRB     r0,[r4,#0]            ;270
000184  e016              B        |L9.436|
                  |L9.390|
000186  4620              MOV      r0,r4                 ;274
000188  f7fffffe          BL       SetTCPnt
00018c  b120              CBZ      r0,|L9.408|
00018e  2801              CMP      r0,#1                 ;274
000190  d003              BEQ      |L9.410|
000192  2808              CMP      r0,#8                 ;274
000194  d10a              BNE      |L9.428|
000196  e007              B        |L9.424|
                  |L9.408|
000198  e00a              B        |L9.432|
                  |L9.410|
00019a  78e0              LDRB     r0,[r4,#3]            ;282
00019c  7120              STRB     r0,[r4,#4]            ;282
00019e  2000              MOVS     r0,#0                 ;283
0001a0  70e0              STRB     r0,[r4,#3]            ;283
0001a2  2004              MOVS     r0,#4                 ;284
0001a4  7020              STRB     r0,[r4,#0]            ;284
0001a6  e003              B        |L9.432|
                  |L9.424|
0001a8  2000              MOVS     r0,#0                 ;287
0001aa  e736              B        |L9.26|
                  |L9.428|
0001ac  2004              MOVS     r0,#4                 ;289
0001ae  e734              B        |L9.26|
                  |L9.432|
0001b0  bf00              NOP                            ;280
0001b2  bf00              NOP                            ;210
                  |L9.436|
0001b4  bf00              NOP                            ;222
0001b6  e31b              B        |L9.2032|
                  |L9.440|
0001b8  f04f0804          MOV      r8,#4                 ;294
0001bc  eeb70a00          VMOV.F32 s0,#1.00000000        ;295
0001c0  1ce0              ADDS     r0,r4,#3              ;295
0001c2  f7fffffe          BL       FloatToS3B
0001c6  bf00              NOP                            ;296
0001c8  f1b80f04          CMP      r8,#4                 ;297
0001cc  d201              BCS      |L9.466|
0001ce  2003              MOVS     r0,#3                 ;299
0001d0  e723              B        |L9.26|
                  |L9.466|
0001d2  1ce0              ADDS     r0,r4,#3              ;301
0001d4  f7fffffe          BL       S3BToFloat
0001d8  eebc0ac0          VCVT.U32.F32 s0,s0                 ;301
0001dc  ee100a10          VMOV     r0,s0                 ;301
0001e0  b2c0              UXTB     r0,r0                 ;301
0001e2  9003              STR      r0,[sp,#0xc]          ;301
0001e4  bf00              NOP                            ;302
0001e6  bf00              NOP                            ;303
0001e8  bf00              NOP                            ;304
0001ea  9903              LDR      r1,[sp,#0xc]          ;305
0001ec  b2c8              UXTB     r0,r1                 ;305
0001ee  4621              MOV      r1,r4                 ;305
0001f0  f7fffffe          BL       ThePredef
0001f4  4680              MOV      r8,r0                 ;305
0001f6  bf00              NOP                            ;306
                  |L9.504|
0001f8  f1b80f11          CMP      r8,#0x11              ;307
0001fc  d901              BLS      |L9.514|
0001fe  f04f0811          MOV      r8,#0x11              ;309
                  |L9.514|
000202  f1a80003          SUB      r0,r8,#3              ;311
000206  1ce1              ADDS     r1,r4,#3              ;311
000208  eb010580          ADD      r5,r1,r0,LSL #2       ;311
00020c  9502              STR      r5,[sp,#8]            ;312
00020e  eb040708          ADD      r7,r4,r8              ;313
000212  f1a80802          SUB      r8,r8,#2              ;314
000216  2002              MOVS     r0,#2                 ;315
000218  eb000088          ADD      r0,r0,r8,LSL #2       ;315
00021c  7020              STRB     r0,[r4,#0]            ;315
00021e  e0d8              B        |L9.978|
                  |L9.544|
000220  f817a901          LDRB     r10,[r7],#-1          ;319
000224  f1b80f01          CMP      r8,#1                 ;320
000228  d906              BLS      |L9.568|
00022a  7838              LDRB     r0,[r7,#0]            ;320
00022c  28ff              CMP      r0,#0xff              ;320
00022e  d101              BNE      |L9.564|
000230  2001              MOVS     r0,#1                 ;320
000232  e002              B        |L9.570|
                  |L9.564|
000234  2000              MOVS     r0,#0                 ;320
000236  e000              B        |L9.570|
                  |L9.568|
000238  2000              MOVS     r0,#0                 ;320
                  |L9.570|
00023a  b1f8              CBZ      r0,|L9.636|
00023c  1e7f              SUBS     r7,r7,#1              ;323
00023e  f1a80801          SUB      r8,r8,#1              ;324
000242  1f2d              SUBS     r5,r5,#4              ;326
000244  9501              STR      r5,[sp,#4]            ;327
000246  bf00              NOP                            ;328
                  |L9.584|
000248  9801              LDR      r0,[sp,#4]            ;330
00024a  7901              LDRB     r1,[r0,#4]            ;330
00024c  7001              STRB     r1,[r0,#0]            ;330
00024e  9801              LDR      r0,[sp,#4]            ;331
000250  1c40              ADDS     r0,r0,#1              ;331
000252  9001              STR      r0,[sp,#4]            ;331
000254  e9dd0101          LDRD     r0,r1,[sp,#4]         ;332
000258  4288              CMP      r0,r1                 ;332
00025a  d1f5              BNE      |L9.584|
00025c  9802              LDR      r0,[sp,#8]            ;333
00025e  1f00              SUBS     r0,r0,#4              ;333
000260  9002              STR      r0,[sp,#8]            ;333
000262  7820              LDRB     r0,[r4,#0]            ;334
000264  1f00              SUBS     r0,r0,#4              ;334
000266  7020              STRB     r0,[r4,#0]            ;334
000268  20ff              MOVS     r0,#0xff              ;336
00026a  7028              STRB     r0,[r5,#0]            ;336
00026c  ee00aa10          VMOV     s0,r10                ;337
000270  eeb80a40          VCVT.F32.U32 s0,s0                 ;337
000274  1c68              ADDS     r0,r5,#1              ;337
000276  f7fffffe          BL       FloatToS3B
00027a  e0a7              B        |L9.972|
                  |L9.636|
00027c  f885a000          STRB     r10,[r5,#0]           ;342
000280  4650              MOV      r0,r10                ;343
000282  f7fffffe          BL       FindParam
000286  4606              MOV      r6,r0                 ;343
000288  b926              CBNZ     r6,|L9.660|
00028a  20ff              MOVS     r0,#0xff              ;346
00028c  7068              STRB     r0,[r5,#1]            ;346
00028e  70a8              STRB     r0,[r5,#2]            ;347
000290  70e8              STRB     r0,[r5,#3]            ;348
000292  e09b              B        |L9.972|
                  |L9.660|
000294  7871              LDRB     r1,[r6,#1]            ;352
000296  4876              LDR      r0,|L9.1136|
000298  7800              LDRB     r0,[r0,#0]            ;352  ; Access
00029a  1c40              ADDS     r0,r0,#1              ;352
00029c  ebb01f91          CMP      r0,r1,LSR #6          ;352
0002a0  dd04              BLE      |L9.684|
0002a2  20ff              MOVS     r0,#0xff              ;355
0002a4  7068              STRB     r0,[r5,#1]            ;355
0002a6  70a8              STRB     r0,[r5,#2]            ;356
0002a8  70e8              STRB     r0,[r5,#3]            ;357
0002aa  e08f              B        |L9.972|
                  |L9.684|
0002ac  7870              LDRB     r0,[r6,#1]            ;361
0002ae  f000000f          AND      r0,r0,#0xf            ;361
0002b2  2810              CMP      r0,#0x10              ;361
0002b4  d273              BCS      |L9.926|
0002b6  e8dff000          TBB      [pc,r0]               ;361
0002ba  0811              DCB      0x08,0x11
0002bc  83838383          DCB      0x83,0x83,0x83,0x83
0002c0  83833247          DCB      0x83,0x83,0x32,0x47
0002c4  73821f1e          DCB      0x73,0x82,0x1f,0x1e
0002c8  2b3b              DCB      0x2b,0x3b
0002ca  f8d60002          LDR      r0,[r6,#2]            ;364
0002ce  6800              LDR      r0,[r0,#0]            ;364
0002d0  ee000a10          VMOV     s0,r0                 ;364
0002d4  1c68              ADDS     r0,r5,#1              ;364
0002d6  f7fffffe          BL       FloatToS3B
0002da  e076              B        |L9.970|
0002dc  f8d60002          LDR      r0,[r6,#2]            ;367
0002e0  7800              LDRB     r0,[r0,#0]            ;367
0002e2  ee000a90          VMOV     s1,r0                 ;367
0002e6  eef80a60          VCVT.F32.U32 s1,s1                 ;367
0002ea  eeb00a60          VMOV.F32 s0,s1                 ;367
0002ee  1c68              ADDS     r0,r5,#1              ;367
0002f0  f7fffffe          BL       FloatToS3B
0002f4  e069              B        |L9.970|
0002f6  bf00              NOP                            ;370
0002f8  f8560f02          LDR      r0,[r6,#2]!           ;371
0002fc  7800              LDRB     r0,[r0,#0]            ;371
0002fe  7068              STRB     r0,[r5,#1]            ;371
000300  6830              LDR      r0,[r6,#0]            ;372
000302  7840              LDRB     r0,[r0,#1]            ;372
000304  70a8              STRB     r0,[r5,#2]            ;372
000306  f8560902          LDR      r0,[r6],#-2           ;373
00030a  7880              LDRB     r0,[r0,#2]            ;373
00030c  70e8              STRB     r0,[r5,#3]            ;373
00030e  e05c              B        |L9.970|
000310  f8d60002          LDR      r0,[r6,#2]            ;376
000314  7800              LDRB     r0,[r0,#0]            ;376
000316  70e8              STRB     r0,[r5,#3]            ;376
000318  70a8              STRB     r0,[r5,#2]            ;376
00031a  7068              STRB     r0,[r5,#1]            ;376
00031c  e055              B        |L9.970|
00031e  f8d60002          LDR      r0,[r6,#2]            ;379
000322  6800              LDR      r0,[r0,#0]            ;379
000324  ee000a10          VMOV     s0,r0                 ;379
000328  1c68              ADDS     r0,r5,#1              ;379
00032a  f7fffffe          BL       FloatToS3B
00032e  e04c              B        |L9.970|
000330  f8d60002          LDR      r0,[r6,#2]            ;382
000334  edd00a01          VLDR     s1,[r0,#4]            ;382
000338  eef80a60          VCVT.F32.U32 s1,s1                 ;382
00033c  eeb00a60          VMOV.F32 s0,s1                 ;382
000340  1c68              ADDS     r0,r5,#1              ;382
000342  f7fffffe          BL       FloatToS3B
000346  e040              B        |L9.970|
000348  f8d60002          LDR      r0,[r6,#2]            ;387
00034c  6880              LDR      r0,[r0,#8]            ;387
00034e  b138              CBZ      r0,|L9.864|
000350  f8d60002          LDR      r0,[r6,#2]            ;389
000354  6880              LDR      r0,[r0,#8]            ;389
000356  ed900a00          VLDR     s0,[r0,#0]            ;389
00035a  eef80a40          VCVT.F32.U32 s1,s0                 ;389
00035e  e001              B        |L9.868|
                  |L9.864|
000360  eddf0a46          VLDR     s1,|L9.1148|
                  |L9.868|
000364  f8d60002          LDR      r0,[r6,#2]            ;395
000368  ed900a01          VLDR     s0,[r0,#4]            ;395
00036c  eeb80a40          VCVT.F32.U32 s0,s0                 ;395
000370  eeb40ae0          VCMPE.F32 s0,s1                 ;395
000374  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;395
000378  d207              BCS      |L9.906|
00037a  f8d60002          LDR      r0,[r6,#2]            ;397
00037e  ed900a01          VLDR     s0,[r0,#4]            ;397
000382  eeb80a40          VCVT.F32.U32 s0,s0                 ;397
000386  eef00a40          VMOV.F32 s1,s0                 ;397
                  |L9.906|
00038a  eeb01a08          VMOV.F32 s2,#3.00000000        ;399
00038e  ee201a81          VMUL.F32 s2,s1,s2              ;399
000392  eeb00a41          VMOV.F32 s0,s2                 ;399
000396  1c68              ADDS     r0,r5,#1              ;399
000398  f7fffffe          BL       FloatToS3B
00039c  e015              B        |L9.970|
                  |L9.926|
00039e  e00f              B        |L9.960|
0003a0  f8d60002          LDR      r0,[r6,#2]            ;403
0003a4  6840              LDR      r0,[r0,#4]            ;403
0003a6  eb000040          ADD      r0,r0,r0,LSL #1       ;403
0003aa  ee000a90          VMOV     s1,r0                 ;403
0003ae  eef80a60          VCVT.F32.U32 s1,s1                 ;403
0003b2  eeb00a60          VMOV.F32 s0,s1                 ;403
0003b6  1c68              ADDS     r0,r5,#1              ;403
0003b8  f7fffffe          BL       FloatToS3B
0003bc  e005              B        |L9.970|
0003be  e004              B        |L9.970|
                  |L9.960|
0003c0  20ff              MOVS     r0,#0xff              ;408
0003c2  7068              STRB     r0,[r5,#1]            ;408
0003c4  70a8              STRB     r0,[r5,#2]            ;409
0003c6  70e8              STRB     r0,[r5,#3]            ;410
0003c8  bf00              NOP                            ;361
                  |L9.970|
0003ca  bf00              NOP                            ;365
                  |L9.972|
0003cc  1f2d              SUBS     r5,r5,#4              ;415
0003ce  f1a80801          SUB      r8,r8,#1              ;416
                  |L9.978|
0003d2  f1b80f00          CMP      r8,#0                 ;316
0003d6  f47faf23          BNE      |L9.544|
0003da  e209              B        |L9.2032|
                  |L9.988|
0003dc  1ce5              ADDS     r5,r4,#3              ;420
0003de  1ce7              ADDS     r7,r4,#3              ;421
0003e0  7821              LDRB     r1,[r4,#0]            ;422
0003e2  1e88              SUBS     r0,r1,#2              ;422
0003e4  17c1              ASRS     r1,r0,#31             ;422
0003e6  eb007191          ADD      r1,r0,r1,LSR #30      ;422
0003ea  ea4f08a1          ASR      r8,r1,#2              ;422
0003ee  2002              MOVS     r0,#2                 ;423
0003f0  7020              STRB     r0,[r4,#0]            ;423
0003f2  f7fffffe          BL       GetReadOnly
0003f6  b100              CBZ      r0,|L9.1018|
0003f8  e1fa              B        |L9.2032|
                  |L9.1018|
0003fa  e06e              B        |L9.1242|
                  |L9.1020|
0003fc  f817ab01          LDRB     r10,[r7],#1           ;431
000400  4650              MOV      r0,r10                ;432
000402  f7fffffe          BL       FindParam
000406  4606              MOV      r6,r0                 ;432
000408  b3f6              CBZ      r6,|L9.1160|
00040a  7870              LDRB     r0,[r6,#1]            ;435
00040c  f3c01101          UBFX     r1,r0,#4,#2           ;435
000410  4817              LDR      r0,|L9.1136|
000412  7800              LDRB     r0,[r0,#0]            ;435  ; Access
000414  1c40              ADDS     r0,r0,#1              ;435
000416  4281              CMP      r1,r0                 ;435
000418  db5c              BLT      |L9.1236|
00041a  f805ab01          STRB     r10,[r5],#1           ;437
00041e  7870              LDRB     r0,[r6,#1]            ;438
000420  f000000f          AND      r0,r0,#0xf            ;438
000424  2810              CMP      r0,#0x10              ;438
000426  d251              BCS      |L9.1228|
000428  e8dff000          TBB      [pc,r0]               ;438
00042c  08145050          DCB      0x08,0x14,0x50,0x50
000430  50505050          DCB      0x50,0x50,0x50,0x50
000434  4b4e4f4d          DCB      0x4b,0x4e,0x4f,0x4d
000438  502f3b4c          DCB      0x50,0x2f,0x3b,0x4c
00043c  4638              MOV      r0,r7                 ;441
00043e  f7fffffe          BL       S3BToFloat
000442  ee100a10          VMOV     r0,s0                 ;441
000446  f8d61002          LDR      r1,[r6,#2]            ;441
00044a  6008              STR      r0,[r1,#0]            ;441
00044c  7820              LDRB     r0,[r4,#0]            ;442
00044e  1c40              ADDS     r0,r0,#1              ;442
000450  7020              STRB     r0,[r4,#0]            ;442
000452  e03b              B        |L9.1228|
000454  4638              MOV      r0,r7                 ;445
000456  f7fffffe          BL       S3BToFloat
00045a  eebc0ac0          VCVT.U32.F32 s0,s0                 ;445
00045e  ee100a10          VMOV     r0,s0                 ;445
000462  f8d61002          LDR      r1,[r6,#2]            ;445
000466  7008              STRB     r0,[r1,#0]            ;445
000468  7820              LDRB     r0,[r4,#0]            ;446
00046a  1c40              ADDS     r0,r0,#1              ;446
00046c  7020              STRB     r0,[r4,#0]            ;446
00046e  e02d              B        |L9.1228|
                  |L9.1136|
                          DCD      Access
                  |L9.1140|
                          DCD      SaveData
                  |L9.1144|
                          DCD      HardDSt
                  |L9.1148|
00047c  00000000          DCFS     0x00000000 ; 0
                  |L9.1152|
                          DCD      ||DSt||
                  |L9.1156|
000484  41fb47ae          DCFS     0x41fb47ae ; 31.409999847412109
                  |L9.1160|
000488  e024              B        |L9.1236|
00048a  7838              LDRB     r0,[r7,#0]            ;449
00048c  f8d61002          LDR      r1,[r6,#2]            ;449
000490  7008              STRB     r0,[r1,#0]            ;449
000492  7878              LDRB     r0,[r7,#1]            ;450
000494  f8d61002          LDR      r1,[r6,#2]            ;450
000498  7048              STRB     r0,[r1,#1]            ;450
00049a  7820              LDRB     r0,[r4,#0]            ;451
00049c  1c40              ADDS     r0,r0,#1              ;451
00049e  7020              STRB     r0,[r4,#0]            ;451
0004a0  e014              B        |L9.1228|
0004a2  7838              LDRB     r0,[r7,#0]            ;454
0004a4  7879              LDRB     r1,[r7,#1]            ;454
0004a6  4288              CMP      r0,r1                 ;454
0004a8  d10a              BNE      |L9.1216|
0004aa  7878              LDRB     r0,[r7,#1]            ;454
0004ac  78b9              LDRB     r1,[r7,#2]            ;454
0004ae  4288              CMP      r0,r1                 ;454
0004b0  d106              BNE      |L9.1216|
0004b2  7838              LDRB     r0,[r7,#0]            ;456
0004b4  f8d61002          LDR      r1,[r6,#2]            ;456
0004b8  7008              STRB     r0,[r1,#0]            ;456
0004ba  7820              LDRB     r0,[r4,#0]            ;457
0004bc  1c40              ADDS     r0,r0,#1              ;457
0004be  7020              STRB     r0,[r4,#0]            ;457
                  |L9.1216|
0004c0  e004              B        |L9.1228|
0004c2  e003              B        |L9.1228|
0004c4  bf00              NOP                            ;469
0004c6  bf00              NOP                            ;470
0004c8  bf00              NOP                            ;471
0004ca  bf00              NOP                            ;472
                  |L9.1228|
0004cc  bf00              NOP                            ;443
0004ce  2001              MOVS     r0,#1                 ;474
0004d0  49cf              LDR      r1,|L9.2064|
0004d2  7008              STRB     r0,[r1,#0]            ;474
                  |L9.1236|
0004d4  1cff              ADDS     r7,r7,#3              ;477
0004d6  f1a80801          SUB      r8,r8,#1              ;478
                  |L9.1242|
0004da  f1b80f00          CMP      r8,#0                 ;428
0004de  d18d              BNE      |L9.1020|
0004e0  e186              B        |L9.2032|
                  |L9.1250|
0004e2  7820              LDRB     r0,[r4,#0]            ;483
0004e4  2807              CMP      r0,#7                 ;483
0004e6  db7c              BLT      |L9.1506|
0004e8  1d20              ADDS     r0,r4,#4              ;485
0004ea  f7fffffe          BL       ReadInt16
0004ee  49c9              LDR      r1,|L9.2068|
0004f0  6008              STR      r0,[r1,#0]            ;485  ; tbladr
0004f2  1da0              ADDS     r0,r4,#6              ;486
0004f4  f7fffffe          BL       ReadInt16
0004f8  49c7              LDR      r1,|L9.2072|
0004fa  6008              STR      r0,[r1,#0]            ;486  ; tblnum
0004fc  f894a003          LDRB     r10,[r4,#3]           ;487
000500  4650              MOV      r0,r10                ;488
000502  f7fffffe          BL       FindParam
000506  4606              MOV      r6,r0                 ;488
000508  b176              CBZ      r6,|L9.1320|
00050a  48c3              LDR      r0,|L9.2072|
00050c  6800              LDR      r0,[r0,#0]            ;489  ; tblnum
00050e  283b              CMP      r0,#0x3b              ;489
000510  d20a              BCS      |L9.1320|
000512  7871              LDRB     r1,[r6,#1]            ;489
000514  48c1              LDR      r0,|L9.2076|
000516  7800              LDRB     r0,[r0,#0]            ;489  ; Access
000518  1c40              ADDS     r0,r0,#1              ;489
00051a  ebb01f91          CMP      r0,r1,LSR #6          ;489
00051e  dc01              BGT      |L9.1316|
000520  2001              MOVS     r0,#1                 ;489
000522  e002              B        |L9.1322|
                  |L9.1316|
000524  2000              MOVS     r0,#0                 ;489
000526  e000              B        |L9.1322|
                  |L9.1320|
000528  2000              MOVS     r0,#0                 ;489
                  |L9.1322|
00052a  b3a0              CBZ      r0,|L9.1430|
00052c  7870              LDRB     r0,[r6,#1]            ;491
00052e  f000000f          AND      r0,r0,#0xf            ;491
000532  2809              CMP      r0,#9                 ;491
000534  d031              BEQ      |L9.1434|
000536  280a              CMP      r0,#0xa               ;491
000538  d030              BEQ      |L9.1436|
00053a  280b              CMP      r0,#0xb               ;491
00053c  d02c              BEQ      |L9.1432|
00053e  280f              CMP      r0,#0xf               ;491
000540  d16d              BNE      |L9.1566|
000542  f8d69002          LDR      r9,[r6,#2]            ;495
000546  48b3              LDR      r0,|L9.2068|
000548  6800              LDR      r0,[r0,#0]            ;496  ; tbladr
00054a  49b3              LDR      r1,|L9.2072|
00054c  6809              LDR      r1,[r1,#0]            ;496  ; tblnum
00054e  4408              ADD      r0,r0,r1              ;496
000550  f8d91004          LDR      r1,[r9,#4]            ;496
000554  4288              CMP      r0,r1                 ;496
000556  d906              BLS      |L9.1382|
000558  49ae              LDR      r1,|L9.2068|
00055a  f8d90004          LDR      r0,[r9,#4]            ;498
00055e  6809              LDR      r1,[r1,#0]            ;498  ; tbladr
000560  1a40              SUBS     r0,r0,r1              ;498
000562  49ad              LDR      r1,|L9.2072|
000564  6008              STR      r0,[r1,#0]            ;498  ; tblnum
                  |L9.1382|
000566  49ab              LDR      r1,|L9.2068|
000568  f8d90000          LDR      r0,[r9,#0]            ;501
00056c  6809              LDR      r1,[r1,#0]            ;501  ; tbladr
00056e  1847              ADDS     r7,r0,r1              ;501
000570  1da5              ADDS     r5,r4,#6              ;502
000572  f04f0800          MOV      r8,#0                 ;503
000576  e005              B        |L9.1412|
                  |L9.1400|
000578  f8170b01          LDRB     r0,[r7],#1            ;505
00057c  f8050b01          STRB     r0,[r5],#1            ;505
000580  f1080801          ADD      r8,r8,#1              ;503
                  |L9.1412|
000584  48a4              LDR      r0,|L9.2072|
000586  6800              LDR      r0,[r0,#0]            ;503  ; tblnum
000588  4580              CMP      r8,r0                 ;503
00058a  d3f5              BCC      |L9.1400|
00058c  48a2              LDR      r0,|L9.2072|
00058e  7800              LDRB     r0,[r0,#0]            ;507  ; tblnum
000590  1d40              ADDS     r0,r0,#5              ;507
000592  7020              STRB     r0,[r4,#0]            ;507
000594  e046              B        |L9.1572|
                  |L9.1430|
000596  e046              B        |L9.1574|
                  |L9.1432|
000598  e044              B        |L9.1572|
                  |L9.1434|
00059a  bf00              NOP                            ;516
                  |L9.1436|
00059c  f8d69002          LDR      r9,[r6,#2]            ;521
0005a0  4a9c              LDR      r2,|L9.2068|
0005a2  6812              LDR      r2,[r2,#0]            ;522  ; tbladr
0005a4  4b9c              LDR      r3,|L9.2072|
0005a6  681b              LDR      r3,[r3,#0]            ;522  ; tblnum
0005a8  441a              ADD      r2,r2,r3              ;522
0005aa  f8d93004          LDR      r3,[r9,#4]            ;522
0005ae  eb030343          ADD      r3,r3,r3,LSL #1       ;522
0005b2  429a              CMP      r2,r3                 ;522
0005b4  d908              BLS      |L9.1480|
0005b6  f8d92004          LDR      r2,[r9,#4]            ;524
0005ba  eb020242          ADD      r2,r2,r2,LSL #1       ;524
0005be  4b95              LDR      r3,|L9.2068|
0005c0  681b              LDR      r3,[r3,#0]            ;524  ; tbladr
0005c2  1ad2              SUBS     r2,r2,r3              ;524
0005c4  4b94              LDR      r3,|L9.2072|
0005c6  601a              STR      r2,[r3,#0]            ;524  ; tblnum
                  |L9.1480|
0005c8  4a92              LDR      r2,|L9.2068|
0005ca  6812              LDR      r2,[r2,#0]            ;527  ; tbladr
0005cc  2303              MOVS     r3,#3                 ;527
0005ce  fbb2f2f3          UDIV     r2,r2,r3              ;527
0005d2  f8d93000          LDR      r3,[r9,#0]            ;527
0005d6  eb030182          ADD      r1,r3,r2,LSL #2       ;527
0005da  4a8e              LDR      r2,|L9.2068|
0005dc  6812              LDR      r2,[r2,#0]            ;528  ; tbladr
0005de  2303              MOVS     r3,#3                 ;528
0005e0  e000              B        |L9.1508|
                  |L9.1506|
0005e2  e023              B        |L9.1580|
                  |L9.1508|
0005e4  fbb2fcf3          UDIV     r12,r2,r3             ;528
0005e8  fb03201c          MLS      r0,r3,r12,r2          ;528
0005ec  1da5              ADDS     r5,r4,#6              ;529
0005ee  f04f0800          MOV      r8,#0                 ;530
0005f2  e00b              B        |L9.1548|
                  |L9.1524|
0005f4  180a              ADDS     r2,r1,r0              ;532
0005f6  7852              LDRB     r2,[r2,#1]            ;532
0005f8  f8052b01          STRB     r2,[r5],#1            ;532
0005fc  1c42              ADDS     r2,r0,#1              ;533
0005fe  b2d0              UXTB     r0,r2                 ;533
000600  2802              CMP      r0,#2                 ;534
000602  dd01              BLE      |L9.1544|
000604  2000              MOVS     r0,#0                 ;536
000606  1d09              ADDS     r1,r1,#4              ;537
                  |L9.1544|
000608  f1080801          ADD      r8,r8,#1              ;530
                  |L9.1548|
00060c  4a82              LDR      r2,|L9.2072|
00060e  6812              LDR      r2,[r2,#0]            ;530  ; tblnum
000610  4590              CMP      r8,r2                 ;530
000612  d3ef              BCC      |L9.1524|
000614  4a80              LDR      r2,|L9.2072|
000616  7812              LDRB     r2,[r2,#0]            ;540  ; tblnum
000618  1d52              ADDS     r2,r2,#5              ;540
00061a  7022              STRB     r2,[r4,#0]            ;540
00061c  e002              B        |L9.1572|
                  |L9.1566|
00061e  2005              MOVS     r0,#5                 ;544
000620  7020              STRB     r0,[r4,#0]            ;544
000622  bf00              NOP                            ;491
                  |L9.1572|
000624  e004              B        |L9.1584|
                  |L9.1574|
000626  2005              MOVS     r0,#5                 ;549
000628  7020              STRB     r0,[r4,#0]            ;549
00062a  e001              B        |L9.1584|
                  |L9.1580|
00062c  2003              MOVS     r0,#3                 ;554
00062e  e4f4              B        |L9.26|
                  |L9.1584|
000630  e0de              B        |L9.2032|
                  |L9.1586|
000632  f7fffffe          BL       GetReadOnly
000636  b128              CBZ      r0,|L9.1604|
000638  2000              MOVS     r0,#0                 ;560
00063a  71a0              STRB     r0,[r4,#6]            ;560
00063c  71e0              STRB     r0,[r4,#7]            ;561
00063e  2007              MOVS     r0,#7                 ;562
000640  7020              STRB     r0,[r4,#0]            ;562
000642  e0d5              B        |L9.2032|
                  |L9.1604|
000644  7820              LDRB     r0,[r4,#0]            ;565
000646  2806              CMP      r0,#6                 ;565
000648  db7e              BLT      |L9.1864|
00064a  1d20              ADDS     r0,r4,#4              ;568
00064c  f7fffffe          BL       ReadInt16
000650  4970              LDR      r1,|L9.2068|
000652  6008              STR      r0,[r1,#0]            ;568  ; tbladr
000654  7820              LDRB     r0,[r4,#0]            ;569
000656  4970              LDR      r1,|L9.2072|
000658  6008              STR      r0,[r1,#0]            ;569  ; tblnum
00065a  4608              MOV      r0,r1                 ;570
00065c  6800              LDR      r0,[r0,#0]            ;570  ; tblnum
00065e  1f40              SUBS     r0,r0,#5              ;570
000660  6008              STR      r0,[r1,#0]            ;570  ; tblnum
000662  f894a003          LDRB     r10,[r4,#3]           ;571
000666  4650              MOV      r0,r10                ;572
000668  f7fffffe          BL       FindParam
00066c  4606              MOV      r6,r0                 ;572
00066e  b15e              CBZ      r6,|L9.1672|
000670  7870              LDRB     r0,[r6,#1]            ;574
000672  f3c01101          UBFX     r1,r0,#4,#2           ;574
000676  4869              LDR      r0,|L9.2076|
000678  7800              LDRB     r0,[r0,#0]            ;574  ; Access
00067a  1c40              ADDS     r0,r0,#1              ;574
00067c  4281              CMP      r1,r0                 ;574
00067e  db01              BLT      |L9.1668|
000680  2001              MOVS     r0,#1                 ;574
000682  e002              B        |L9.1674|
                  |L9.1668|
000684  2000              MOVS     r0,#0                 ;574
000686  e000              B        |L9.1674|
                  |L9.1672|
000688  2000              MOVS     r0,#0                 ;574
                  |L9.1674|
00068a  2800              CMP      r0,#0                 ;574
00068c  d072              BEQ      |L9.1908|
00068e  7870              LDRB     r0,[r6,#1]            ;577
000690  f000000f          AND      r0,r0,#0xf            ;577
000694  2809              CMP      r0,#9                 ;577
000696  d03f              BEQ      |L9.1816|
000698  280a              CMP      r0,#0xa               ;577
00069a  d03e              BEQ      |L9.1818|
00069c  280b              CMP      r0,#0xb               ;577
00069e  d032              BEQ      |L9.1798|
0006a0  280f              CMP      r0,#0xf               ;577
0006a2  d168              BNE      |L9.1910|
0006a4  f8d69002          LDR      r9,[r6,#2]            ;580
0006a8  485a              LDR      r0,|L9.2068|
0006aa  6800              LDR      r0,[r0,#0]            ;581  ; tbladr
0006ac  495a              LDR      r1,|L9.2072|
0006ae  6809              LDR      r1,[r1,#0]            ;581  ; tblnum
0006b0  4408              ADD      r0,r0,r1              ;581
0006b2  f8d91004          LDR      r1,[r9,#4]            ;581
0006b6  4288              CMP      r0,r1                 ;581
0006b8  d306              BCC      |L9.1736|
0006ba  4956              LDR      r1,|L9.2068|
0006bc  f8d90004          LDR      r0,[r9,#4]            ;583
0006c0  6809              LDR      r1,[r1,#0]            ;583  ; tbladr
0006c2  1a40              SUBS     r0,r0,r1              ;583
0006c4  4954              LDR      r1,|L9.2072|
0006c6  6008              STR      r0,[r1,#0]            ;583  ; tblnum
                  |L9.1736|
0006c8  1da7              ADDS     r7,r4,#6              ;586
0006ca  4952              LDR      r1,|L9.2068|
0006cc  f8d90000          LDR      r0,[r9,#0]            ;587
0006d0  6809              LDR      r1,[r1,#0]            ;587  ; tbladr
0006d2  1845              ADDS     r5,r0,r1              ;587
0006d4  f04f0800          MOV      r8,#0                 ;588
0006d8  e005              B        |L9.1766|
                  |L9.1754|
0006da  f8170b01          LDRB     r0,[r7],#1            ;590
0006de  f8050b01          STRB     r0,[r5],#1            ;590
0006e2  f1080801          ADD      r8,r8,#1              ;588
                  |L9.1766|
0006e6  484c              LDR      r0,|L9.2072|
0006e8  6800              LDR      r0,[r0,#0]            ;588  ; tblnum
0006ea  4580              CMP      r8,r0                 ;588
0006ec  d3f5              BCC      |L9.1754|
0006ee  484a              LDR      r0,|L9.2072|
0006f0  8800              LDRH     r0,[r0,#0]            ;592  ; tblnum
0006f2  b281              UXTH     r1,r0                 ;592
0006f4  1da0              ADDS     r0,r4,#6              ;592
0006f6  f7fffffe          BL       WriteInt16
0006fa  2007              MOVS     r0,#7                 ;593
0006fc  7020              STRB     r0,[r4,#0]            ;593
0006fe  2001              MOVS     r0,#1                 ;594
000700  4943              LDR      r1,|L9.2064|
000702  7008              STRB     r0,[r1,#0]            ;594
000704  e062              B        |L9.1996|
                  |L9.1798|
000706  f8d60002          LDR      r0,[r6,#2]            ;597
00070a  b110              CBZ      r0,|L9.1810|
00070c  2000              MOVS     r0,#0                 ;603
00070e  71a0              STRB     r0,[r4,#6]            ;603
000710  71e0              STRB     r0,[r4,#7]            ;604
                  |L9.1810|
000712  2007              MOVS     r0,#7                 ;606
000714  7020              STRB     r0,[r4,#0]            ;606
000716  e059              B        |L9.1996|
                  |L9.1816|
000718  bf00              NOP                            ;609
                  |L9.1818|
00071a  f8d69002          LDR      r9,[r6,#2]            ;614
00071e  483d              LDR      r0,|L9.2068|
000720  6800              LDR      r0,[r0,#0]            ;615  ; tbladr
000722  493d              LDR      r1,|L9.2072|
000724  6809              LDR      r1,[r1,#0]            ;615  ; tblnum
000726  4408              ADD      r0,r0,r1              ;615
000728  f8d91004          LDR      r1,[r9,#4]            ;615
00072c  eb010141          ADD      r1,r1,r1,LSL #1       ;615
000730  4288              CMP      r0,r1                 ;615
000732  d908              BLS      |L9.1862|
000734  f8d90004          LDR      r0,[r9,#4]            ;617
000738  eb000040          ADD      r0,r0,r0,LSL #1       ;617
00073c  4935              LDR      r1,|L9.2068|
00073e  6809              LDR      r1,[r1,#0]            ;617  ; tbladr
000740  1a40              SUBS     r0,r0,r1              ;617
000742  4935              LDR      r1,|L9.2072|
000744  6008              STR      r0,[r1,#0]            ;617  ; tblnum
                  |L9.1862|
000746  e000              B        |L9.1866|
                  |L9.1864|
000748  e046              B        |L9.2008|
                  |L9.1866|
00074a  1da7              ADDS     r7,r4,#6              ;620
00074c  4831              LDR      r0,|L9.2068|
00074e  6800              LDR      r0,[r0,#0]            ;621  ; tbladr
000750  2103              MOVS     r1,#3                 ;621
000752  fbb0f0f1          UDIV     r0,r0,r1              ;621
000756  f8d91000          LDR      r1,[r9,#0]            ;621
00075a  eb010b80          ADD      r11,r1,r0,LSL #2      ;621
00075e  482d              LDR      r0,|L9.2068|
000760  6800              LDR      r0,[r0,#0]            ;622  ; tbladr
000762  2103              MOVS     r1,#3                 ;622
000764  fbb0f2f1          UDIV     r2,r0,r1              ;622
000768  fb010012          MLS      r0,r1,r2,r0           ;622
00076c  9000              STR      r0,[sp,#0]            ;622
00076e  f04f0800          MOV      r8,#0                 ;623
000772  e015              B        |L9.1952|
                  |L9.1908|
000774  e02b              B        |L9.1998|
                  |L9.1910|
000776  e023              B        |L9.1984|
                  |L9.1912|
000778  f8171b01          LDRB     r1,[r7],#1            ;625
00077c  9800              LDR      r0,[sp,#0]            ;625
00077e  4458              ADD      r0,r0,r11             ;625
000780  7041              STRB     r1,[r0,#1]            ;625
000782  9800              LDR      r0,[sp,#0]            ;626
000784  1c40              ADDS     r0,r0,#1              ;626
000786  b2c0              UXTB     r0,r0                 ;626
000788  9000              STR      r0,[sp,#0]            ;626
00078a  9800              LDR      r0,[sp,#0]            ;627
00078c  2802              CMP      r0,#2                 ;627
00078e  dd05              BLE      |L9.1948|
000790  2000              MOVS     r0,#0                 ;629
000792  f88b0000          STRB     r0,[r11,#0]           ;629
000796  9000              STR      r0,[sp,#0]            ;630
000798  f10b0b04          ADD      r11,r11,#4            ;631
                  |L9.1948|
00079c  f1080801          ADD      r8,r8,#1              ;623
                  |L9.1952|
0007a0  481d              LDR      r0,|L9.2072|
0007a2  6800              LDR      r0,[r0,#0]            ;623  ; tblnum
0007a4  4580              CMP      r8,r0                 ;623
0007a6  d3e7              BCC      |L9.1912|
0007a8  481b              LDR      r0,|L9.2072|
0007aa  8800              LDRH     r0,[r0,#0]            ;634  ; tblnum
0007ac  b281              UXTH     r1,r0                 ;634
0007ae  1da0              ADDS     r0,r4,#6              ;634
0007b0  f7fffffe          BL       WriteInt16
0007b4  2007              MOVS     r0,#7                 ;635
0007b6  7020              STRB     r0,[r4,#0]            ;635
0007b8  2001              MOVS     r0,#1                 ;636
0007ba  4915              LDR      r1,|L9.2064|
0007bc  7008              STRB     r0,[r1,#0]            ;636
0007be  e005              B        |L9.1996|
                  |L9.1984|
0007c0  2000              MOVS     r0,#0                 ;640
0007c2  71a0              STRB     r0,[r4,#6]            ;640
0007c4  71e0              STRB     r0,[r4,#7]            ;641
0007c6  2007              MOVS     r0,#7                 ;642
0007c8  7020              STRB     r0,[r4,#0]            ;642
0007ca  bf00              NOP                            ;643
                  |L9.1996|
0007cc  e004              B        |L9.2008|
                  |L9.1998|
0007ce  2000              MOVS     r0,#0                 ;648
0007d0  71a0              STRB     r0,[r4,#6]            ;648
0007d2  71e0              STRB     r0,[r4,#7]            ;649
0007d4  2007              MOVS     r0,#7                 ;650
0007d6  7020              STRB     r0,[r4,#0]            ;650
                  |L9.2008|
0007d8  e00a              B        |L9.2032|
0007da  2003              MOVS     r0,#3                 ;662
0007dc  7020              STRB     r0,[r4,#0]            ;662
0007de  78a0              LDRB     r0,[r4,#2]            ;663
0007e0  f0400080          ORR      r0,r0,#0x80           ;663
0007e4  70a0              STRB     r0,[r4,#2]            ;663
0007e6  2000              MOVS     r0,#0                 ;664
0007e8  70e0              STRB     r0,[r4,#3]            ;664
0007ea  e001              B        |L9.2032|
                  |L9.2028|
0007ec  2004              MOVS     r0,#4                 ;672
0007ee  e414              B        |L9.26|
                  |L9.2032|
0007f0  bf00              NOP                            ;292
0007f2  4807              LDR      r0,|L9.2064|
0007f4  7800              LDRB     r0,[r0,#0]            ;675  ; SaveData
0007f6  b128              CBZ      r0,|L9.2052|
0007f8  78e0              LDRB     r0,[r4,#3]            ;678
0007fa  f7fffffe          BL       SaveConst
0007fe  2000              MOVS     r0,#0                 ;679
000800  4903              LDR      r1,|L9.2064|
000802  7008              STRB     r0,[r1,#0]            ;679
                  |L9.2052|
000804  78a0              LDRB     r0,[r4,#2]            ;682
000806  f0400080          ORR      r0,r0,#0x80           ;682
00080a  70a0              STRB     r0,[r4,#2]            ;682
00080c  2000              MOVS     r0,#0                 ;683
00080e  e404              B        |L9.26|
;;;685    
                          ENDP

                  |L9.2064|
                          DCD      SaveData
                  |L9.2068|
                          DCD      tbladr
                  |L9.2072|
                          DCD      tblnum
                  |L9.2076|
                          DCD      Access

                          AREA ||i.SetSaveData||, CODE, READONLY, ALIGN=2

                  SetSaveData PROC
;;;58     // Запись настроек
;;;59     void SetSaveData(void) { 
000000  b510              PUSH     {r4,lr}
;;;60       SaveConst(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SaveConst
;;;61       SaveData=0;
000008  2000              MOVS     r0,#0
00000a  4901              LDR      r1,|L10.16|
00000c  7008              STRB     r0,[r1,#0]
;;;62     };
00000e  bd10              POP      {r4,pc}
;;;63     
                          ENDP

                  |L10.16|
                          DCD      SaveData

                          AREA ||i.WriteInt16||, CODE, READONLY, ALIGN=1

                  WriteInt16 PROC
;;;123    
;;;124    void WriteInt16(__packed uint8_t * buf,uint16_t zn) {
000000  b503              PUSH     {r0,r1,lr}
;;;125      __packed uint8_t * p;
;;;126      p=(__packed uint8_t*)&zn;
000002  a901              ADD      r1,sp,#4
;;;127      *(buf++)=*(p++);
000004  f8112b01          LDRB     r2,[r1],#1
000008  f8002b01          STRB     r2,[r0],#1
;;;128      *(buf)=*p;
00000c  780a              LDRB     r2,[r1,#0]
00000e  7002              STRB     r2,[r0,#0]
;;;129    }
000010  bd0c              POP      {r2,r3,pc}
;;;130    
                          ENDP


                          AREA ||i.iserr||, CODE, READONLY, ALIGN=1

                  iserr PROC
;;;75     // Проверяет только 3 байта, без младшего
;;;76     uint8_t iserr(const float f){
000000  ed2d0b02          VPUSH    {d0}
;;;77     	// 0x7f800000 - бесконечность
;;;78     	// 0xff800000 - минус бесконечность
;;;79     	if(((*(__packed uint32_t*)&f) & 0x7fffffff) > (uint32_t)0x7f800000)
000004  9800              LDR      r0,[sp,#0]
000006  f0204000          BIC      r0,r0,#0x80000000
00000a  f1b04fff          CMP      r0,#0x7f800000
00000e  d902              BLS      |L12.22|
;;;80     		return 1;
000010  2001              MOVS     r0,#1
                  |L12.18|
;;;81     	else return 0;
;;;82     }
000012  b002              ADD      sp,sp,#8
000014  4770              BX       lr
                  |L12.22|
000016  2000              MOVS     r0,#0                 ;81
000018  e7fb              B        |L12.18|
;;;83     
                          ENDP


                          AREA ||i.isok||, CODE, READONLY, ALIGN=1

                  isok PROC
;;;69     
;;;70     uint8_t isok(float f) {
000000  b500              PUSH     {lr}
000002  eef00a40          VMOV.F32 s1,s0
;;;71       if ((f==0)||iserr(f)) return 0;
000006  eef50ac0          VCMPE.F32 s1,#0.0
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  d004              BEQ      |L13.26|
000010  eeb00a60          VMOV.F32 s0,s1
000014  f7fffffe          BL       iserr
000018  b108              CBZ      r0,|L13.30|
                  |L13.26|
00001a  2000              MOVS     r0,#0
                  |L13.28|
;;;72       return 1;
;;;73     }
00001c  bd00              POP      {pc}
                  |L13.30|
00001e  2001              MOVS     r0,#1                 ;72
000020  e7fc              B        |L13.28|
;;;74     
                          ENDP


                          AREA ||i.theerr||, CODE, READONLY, ALIGN=2

                  theerr PROC
;;;63     
;;;64     float theerr(void) {
000000  b508              PUSH     {r3,lr}
;;;65       const uint8_t p[4]={0xFF,0xFF,0xFF,0xFF};
000002  a003              ADR      r0,|L14.16|
000004  6800              LDR      r0,[r0,#0]
000006  9000              STR      r0,[sp,#0]
;;;66       return *((float*)(&p));
000008  ed9d0a00          VLDR     s0,[sp,#0]
;;;67     }
00000c  bd08              POP      {r3,pc}
;;;68     
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
000010  ffffffff          DCB      255,255,255,255

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CHANNEL_OFFSET_TAB
000000  081c3044          DCB      0x08,0x1c,0x30,0x44
000004  586c80            DCB      0x58,0x6c,0x80
                  OFFSET_TAB_CCMRx
000007  00                DCB      0x00
000008  00000004          DCB      0x00,0x00,0x00,0x04
00000c  04043c3c          DCB      0x04,0x04,0x3c,0x3c
                  SHIFT_TAB_OCxx
000010  00000800          DCB      0x00,0x00,0x08,0x00
000014  00000800          DCB      0x00,0x00,0x08,0x00
000018  08                DCB      0x08
                  SHIFT_TAB_ICxx
000019  000008            DCB      0x00,0x00,0x08
00001c  00000008          DCB      0x00,0x00,0x00,0x08
000020  0000              DCB      0x00,0x00
                  SHIFT_TAB_CCxP
000022  0002              DCB      0x00,0x02
000024  0406080a          DCB      0x04,0x06,0x08,0x0a
000028  0c1014            DCB      0x0c,0x10,0x14
                  SHIFT_TAB_OISx
00002b  00                DCB      0x00
00002c  01020304          DCB      0x01,0x02,0x03,0x04
000030  0506080a          DCB      0x05,0x06,0x08,0x0a

                          AREA ||.data||, DATA, ALIGN=2

                  Access
000000  02                DCB      0x02
                  SaveData
000001  000000            DCB      0x00,0x00,0x00
                  ||pp||
                          DCD      0x00000000
                  ||dlt||
                          DCD      0x00000000
                  tbladr
                          DCD      0x00000000
                  tblnum
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\Line\\src\\SensProc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_SensProc_c_Access____REV16|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___10_SensProc_c_Access____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_SensProc_c_Access____REVSH|
#line 402
|__asm___10_SensProc_c_Access____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_SensProc_c_Access____RRX|
#line 587
|__asm___10_SensProc_c_Access____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
