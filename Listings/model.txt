; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--cpp11 --list --split_sections --debug -c --asm --interleave -o.\objects\model.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\model.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I".\STM32L4 Low Layer drivers\inc" -I.\Source\Core\inc -I.\Source\Protocols\inc -I.\Source\Ext_Dev\inc -I.\Source\Ext_Dev\inc\LSM6DS3 -I.\Source\Ext_Dev\inc\LSM303DLHC -I.\Source\Ext_Dev\inc\MPU-9250 -I.\Source\Line\inc -I.\Source\Main\inc -I.\Source\MCU_Drivers\inc -I.\Source\MCU_Drivers\inc -I.\Source\MotionTL\inc -I.\Source\RTOS\inc -I.\Source\Tasks\inc -I.\Source\Ext_Dev\inc\AT45 -I.\Objects -I.\RTE\_DEBUG -IC:\Keil_v5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32L431xx -DHSE_VALUE=8000000 -DUSE_FULL_LL_DRIVER -DSTM32L431xx -DDEBUG --omf_browse=.\objects\model.crf Source\Main\src\model.cpp]
                          THUMB

                          AREA ||i._ZN6TModel10get_accessEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel10get_accessEv PROC ; TModel::get_access()
;;;756    //----- интерфейс к правам доступа к данным устройства ------
;;;757    TModel::TAccess TModel::get_access()
000000  b538              PUSH     {r3-r5,lr}
;;;758    {
000002  4604              MOV      r4,r0
;;;759      TAccess Dest;
;;;760      access_prot( Dest, Main.DevData.Access );
000004  f1040578          ADD      r5,r4,#0x78
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  7828              LDRB     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;761      
;;;762      return Dest;
00002e  f89d0000          LDRB     r0,[sp,#0]
;;;763    }
000032  bd38              POP      {r3-r5,pc}
;;;764    
                          ENDP


                          AREA ||i._ZN6TModel10set_accessEN9TSettings7TAccessE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel10set_accessEN9TSettings7TAccessE PROC ; TModel::set_access(TSettings::TAccess)
;;;764    
;;;765    void TModel::set_access( TAccess Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;766    {
000002  4604              MOV      r4,r0
;;;767      access_prot(  Main.DevData.Access, Src );
000004  f1040578          ADD      r5,r4,#0x78
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  f89d0004          LDRB     r0,[sp,#4]
00001c  7028              STRB     r0,[r5,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;768    }
000030  bd7c              POP      {r2-r6,pc}
;;;769    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel11get_accel_zEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11get_accel_zEv PROC ; TModel::get_accel_z()
;;;549    //----- интерфейс к значению по оси Z -----------------------
;;;550    float TModel::get_accel_z()
000000  b538              PUSH     {r3-r5,lr}
;;;551    {
000002  4604              MOV      r4,r0
;;;552      float Dest;
;;;553      
;;;554      access_prot( Dest, Main.DevData.AccelZ );
000004  f104026a          ADD      r2,r4,#0x6a
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
;;;555      
;;;556      return Dest;
000010  ed9d0a00          VLDR     s0,[sp,#0]
;;;557    }
000014  bd38              POP      {r3-r5,pc}
;;;558                                    
                          ENDP


                          AREA ||i._ZN6TModel11get_code_swEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11get_code_swEv PROC ; TModel::get_code_sw()
;;;132    //----- интерфейс к данным кодового переключателя на базе ---
;;;133    uint8_t TModel::get_code_sw()
000000  b538              PUSH     {r3-r5,lr}
;;;134    {
000002  4604              MOV      r4,r0
;;;135      uint8_t Dest;
;;;136      
;;;137      access_prot( Dest, Main.DevData.CodeSw );
000004  f1040257          ADD      r2,r4,#0x57
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;138      
;;;139      return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;140    }
000014  bd38              POP      {r3-r5,pc}
;;;141    
                          ENDP


                          AREA ||i._ZN6TModel11get_connectEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11get_connectEv PROC ; TModel::get_connect()
;;;273    //----- интерфейс к связи с датчиком на крышке --------------
;;;274    TModel::TConnect TModel::get_connect()
000000  b538              PUSH     {r3-r5,lr}
;;;275    {
000002  4604              MOV      r4,r0
;;;276      TState Dest;
;;;277      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;278      
;;;279      return Dest.Connect;
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f3c000c0          UBFX     r0,r0,#3,#1
;;;280    }
000018  bd38              POP      {r3-r5,pc}
;;;281    
                          ENDP


                          AREA ||i._ZN6TModel11get_hc_memsEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11get_hc_memsEv PROC ; TModel::get_hc_mems()
;;;331    //----- интерфейс к состоянию МЭМС на крышке ----------------
;;;332    TModel::TMainState TModel::get_hc_mems()
000000  b538              PUSH     {r3-r5,lr}
;;;333    {
000002  4604              MOV      r4,r0
;;;334      TState Dest;
;;;335      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;336      
;;;337      return Dest.HC_Mems;
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f3c01080          UBFX     r0,r0,#6,#1
;;;338    }
000018  bd38              POP      {r3-r5,pc}
;;;339    
                          ENDP


                          AREA ||i._ZN6TModel11get_if_setsER3TIf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11get_if_setsER3TIf PROC ; TModel::get_if_sets(TIf&)
;;;1317   //----- интерфейс к настройкам интерфейса -------------------
;;;1318   void TModel::get_if_sets( TIf &Dest )
000000  b570              PUSH     {r4-r6,lr}
;;;1319   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1320     access_prot( Dest, Main.FlashData.AllSets.If );
000006  f1040299          ADD      r2,r4,#0x99
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_ ; void TModel::access_prot<TIf, TIf>(T1&, const T2&)
;;;1321   }
000012  bd70              POP      {r4-r6,pc}
;;;1322   
                          ENDP


                          AREA ||i._ZN6TModel11get_mb_addrEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11get_mb_addrEv PROC ; TModel::get_mb_addr()
;;;1186   //----- интерфейс к адресу в сети Modbus --------------------
;;;1187   uint8_t TModel::get_mb_addr()
000000  b538              PUSH     {r3-r5,lr}
;;;1188   {
000002  4604              MOV      r4,r0
;;;1189     uint8_t Dest;
;;;1190     access_prot( Dest, Main.FlashData.AllSets.If.MBAddr );
000004  f1040299          ADD      r2,r4,#0x99
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;1191   
;;;1192     return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;1193   }
000014  bd38              POP      {r3-r5,pc}
;;;1194   
                          ENDP


                          AREA ||i._ZN6TModel11set_accel_zEf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11set_accel_zEf PROC ; TModel::set_accel_z(float)
;;;558                                    
;;;559    void TModel::set_accel_z( float Src )
000000  b531              PUSH     {r0,r4,r5,lr}
;;;560    {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
;;;561      access_prot(  Main.DevData.AccelZ, Src );
000008  466a              MOV      r2,sp
00000a  f104016a          ADD      r1,r4,#0x6a
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
;;;562    }                                   
000014  bd3e              POP      {r1-r5,pc}
;;;563    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel11set_code_swEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11set_code_swEh PROC ; TModel::set_code_sw(unsigned char)
;;;141    
;;;142    void TModel::set_code_sw( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;143    {
000002  4604              MOV      r4,r0
;;;144      if (
000004  f89d0004          LDRB     r0,[sp,#4]
000008  2800              CMP      r0,#0
00000a  db09              BLT      |L10.32|
;;;145          Src >= CodeRange.Min
;;;146          &&
;;;147          Src <= CodeRange.Max
00000c  f89d0004          LDRB     r0,[sp,#4]
000010  280f              CMP      r0,#0xf
000012  dc05              BGT      |L10.32|
;;;148         )
;;;149      {
;;;150        access_prot( Main.DevData.CodeSw, Src );
000014  aa01              ADD      r2,sp,#4
000016  f1040157          ADD      r1,r4,#0x57
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
                  |L10.32|
;;;151      }
;;;152      else
;;;153      {
;;;154        //Main.CodeSw остается без изменения
;;;155      }
;;;156    }
000020  bd1c              POP      {r2-r4,pc}
;;;157    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel11set_connectEN9TSettings8TConnectE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11set_connectEN9TSettings8TConnectE PROC ; TModel::set_connect(TSettings::TConnect)
;;;281    
;;;282    void TModel::set_connect( TConnect Connect )
000000  b538              PUSH     {r3-r5,lr}
;;;283    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;284      TState Dest;
;;;285      
;;;286      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;287      Dest.Connect = Connect;                  //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f36500c3          BFI      r0,r5,#3,#1
00001a  9000              STR      r0,[sp,#0]
;;;288      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;289    }
000028  bd38              POP      {r3-r5,pc}
;;;290    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel11set_hc_memsEN9TSettings10TMainStateE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11set_hc_memsEN9TSettings10TMainStateE PROC ; TModel::set_hc_mems(TSettings::TMainState)
;;;339    
;;;340    void TModel::set_hc_mems( TMainState NewState )
000000  b538              PUSH     {r3-r5,lr}
;;;341    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;342      TState Dest;
;;;343      
;;;344      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;345      Dest.HC_Mems = NewState;                 //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f3651086          BFI      r0,r5,#6,#1
00001a  9000              STR      r0,[sp,#0]
;;;346      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;347    }
000028  bd38              POP      {r3-r5,pc}
;;;348    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel11set_if_setsERK3TIf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11set_if_setsERK3TIf PROC ; TModel::set_if_sets(const TIf&)
;;;1322   
;;;1323   void TModel::set_if_sets( const TIf &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;1324   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1325     access_prot(  Main.FlashData.AllSets.If, Src ); //записать в главный буфер в ОЗУ
000006  462a              MOV      r2,r5
000008  f1040199          ADD      r1,r4,#0x99
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_ ; void TModel::access_prot<TIf, TIf>(T1&, const T2&)
;;;1326     set_flash_data();                               //записать во Flash
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
;;;1327   }
000018  bd70              POP      {r4-r6,pc}
;;;1328   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel11set_mb_addrEs||, CODE, READONLY, ALIGN=1

                  _ZN6TModel11set_mb_addrEs PROC ; TModel::set_mb_addr(short)
;;;1194   
;;;1195   bool TModel::set_mb_addr( int16_t Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;1196   {
000002  4604              MOV      r4,r0
;;;1197     if ( chk_mb_addr( Src ) )
000004  f9bd1004          LDRSH    r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings11chk_mb_addrEs ; TSettings::chk_mb_addr(short) const
00000e  b308              CBZ      r0,|L14.84|
;;;1198     {
;;;1199       if ( get_mb_addr() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel11get_mb_addrEv ; TModel::get_mb_addr()
000016  f9bd1004          LDRSH    r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d018              BEQ      |L14.80|
;;;1200       {
;;;1201         access_prot( Main.FlashData.AllSets.If.MBAddr, Src ); //записать в главный буфер в ОЗУ
00001e  f1040599          ADD      r5,r4,#0x99
000022  f8d410b4          LDR      r1,[r4,#0xb4]
000026  2300              MOVS     r3,#0
000028  1e5a              SUBS     r2,r3,#1
00002a  6808              LDR      r0,[r1,#0]
00002c  4619              MOV      r1,r3
00002e  f7fffffe          BL       xQueueGenericReceive
000032  f8bd0004          LDRH     r0,[sp,#4]
000036  7028              STRB     r0,[r5,#0]
000038  f8d410b4          LDR      r1,[r4,#0xb4]
00003c  2300              MOVS     r3,#0
00003e  461a              MOV      r2,r3
000040  6808              LDR      r0,[r1,#0]
000042  4619              MOV      r1,r3
000044  f7fffffe          BL       xQueueGenericSend
000048  bf00              NOP      
;;;1202         set_flash_data();                                     //записать во Flash
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L14.80|
;;;1203       }
;;;1204       else
;;;1205       {
;;;1206         //нет необходимости в перезаписи если новое значение не отличается от старого
;;;1207       }
;;;1208       
;;;1209       return true;
000050  2001              MOVS     r0,#1
                  |L14.82|
;;;1210     }
;;;1211     else
;;;1212     {
;;;1213       return false; //параметр не записан ни в ОЗУ ни во Flash
;;;1214     }
;;;1215   }
000052  bd7c              POP      {r2-r6,pc}
                  |L14.84|
000054  2000              MOVS     r0,#0                 ;1213
000056  e7fc              B        |L14.82|
;;;1216   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel12get_btn_modeEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12get_btn_modeEv PROC ; TModel::get_btn_mode()
;;;92     //----- интерфейс к состоянию кнопки ------------------------
;;;93     TModel::TPress TModel::get_btn_mode()
000000  b538              PUSH     {r3-r5,lr}
;;;94     {
000002  4604              MOV      r4,r0
;;;95       TPress Dest;
;;;96       access_prot( Dest, Main.Press );
000004  f1040555          ADD      r5,r4,#0x55
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  7828              LDRB     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;97       
;;;98       return Dest;
00002e  f89d0000          LDRB     r0,[sp,#0]
;;;99     }
000032  bd38              POP      {r3-r5,pc}
;;;100    
                          ENDP


                          AREA ||i._ZN6TModel12get_d_o_setsEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12get_d_o_setsEv PROC ; TModel::get_d_o_sets()
;;;1128   //----- интерфейс к настройке дискретного выхода ------------
;;;1129   TContact TModel::get_d_o_sets()
000000  b538              PUSH     {r3-r5,lr}
;;;1130   {  
000002  4604              MOV      r4,r0
;;;1131     TBits Dest;
;;;1132     access_prot( Dest, Main.FlashData.AllSets.AdpBits.Bits );
000004  f1040296          ADD      r2,r4,#0x96
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_ ; void TModel::access_prot<TBits, TBits>(T1&, const T2&)
;;;1133     
;;;1134     return Dest.Item.Normal;  
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0000001          AND      r0,r0,#1
;;;1135   }
000018  bd38              POP      {r3-r5,pc}
;;;1136   
                          ENDP


                          AREA ||i._ZN6TModel12get_dev_typeEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12get_dev_typeEv PROC ; TModel::get_dev_type()
;;;122    //----- интерфейс к типу устройства -------------------------
;;;123    TModel::TDevType TModel::get_dev_type()
000000  b51c              PUSH     {r2-r4,lr}
;;;124    {
000002  4604              MOV      r4,r0
;;;125      TDevType Dest;
;;;126      access_prot( Dest, Main.DevType );
000004  f8140f54          LDRB     r0,[r4,#0x54]!
000008  f0000003          AND      r0,r0,#3
00000c  9001              STR      r0,[sp,#4]
00000e  6e21              LDR      r1,[r4,#0x60]
000010  2300              MOVS     r3,#0
000012  1e5a              SUBS     r2,r3,#1
000014  6808              LDR      r0,[r1,#0]
000016  4619              MOV      r1,r3
000018  f7fffffe          BL       xQueueGenericReceive
00001c  f89d0004          LDRB     r0,[sp,#4]
000020  9000              STR      r0,[sp,#0]
000022  6e21              LDR      r1,[r4,#0x60]
000024  3c54              SUBS     r4,r4,#0x54
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
00002a  6808              LDR      r0,[r1,#0]
00002c  4619              MOV      r1,r3
00002e  f7fffffe          BL       xQueueGenericSend
000032  bf00              NOP      
;;;127      
;;;128      return Dest;
000034  f89d0000          LDRB     r0,[sp,#0]
;;;129    }
000038  bd1c              POP      {r2-r4,pc}
;;;130    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel12get_hc_stateEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12get_hc_stateEv PROC ; TModel::get_hc_state()
;;;216    //----- интерфейс к результирующему состоянию крышки --------
;;;217    TModel::THC TModel::get_hc_state()
000000  b538              PUSH     {r3-r5,lr}
;;;218    {
000002  4604              MOV      r4,r0
;;;219      TState Dest;
;;;220      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;221      
;;;222      return Dest.HC;
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f0000001          AND      r0,r0,#1
;;;223    }
000018  bd38              POP      {r3-r5,pc}
;;;224    
                          ENDP


                          AREA ||i._ZN6TModel12get_led_modeEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12get_led_modeEv PROC ; TModel::get_led_mode()
;;;107    //----- интерфейс к режиму работы светодиода ----------------
;;;108    TModel::TLedMode TModel::get_led_mode()
000000  b538              PUSH     {r3-r5,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110      TLedMode Dest;
;;;111      access_prot( Dest, Main.LedMode );
000004  f1040556          ADD      r5,r4,#0x56
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  7828              LDRB     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;112      
;;;113      return Dest;
00002e  f89d0000          LDRB     r0,[sp,#0]
;;;114    }
000032  bd38              POP      {r3-r5,pc}
;;;115    
                          ENDP


                          AREA ||i._ZN6TModel12get_my_angleEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12get_my_angleEv PROC ; TModel::get_my_angle()
;;;379    //----- интерфейс к собственному углу платы -----------------
;;;380    int16_t TModel::get_my_angle()
000000  b538              PUSH     {r3-r5,lr}
;;;381    {
000002  4604              MOV      r4,r0
;;;382      int16_t Dest;
;;;383      
;;;384      access_prot( Dest, Main.DevData.MyAngle );
000004  f1040266          ADD      r2,r4,#0x66
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_
;;;385      
;;;386      return Dest;
000010  f9bd0000          LDRSH    r0,[sp,#0]
;;;387    }
000014  bd38              POP      {r3-r5,pc}
;;;388    
                          ENDP


                          AREA ||i._ZN6TModel12get_raw_rollEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12get_raw_rollEv PROC ; TModel::get_raw_roll()
;;;533    //----- интерфейс к сырому значению крена -------------------
;;;534    int8_t TModel::get_raw_roll()
000000  b538              PUSH     {r3-r5,lr}
;;;535    {
000002  4604              MOV      r4,r0
;;;536      int8_t Dest;
;;;537      
;;;538      access_prot( Dest, Main.DevData.RawRoll );
000004  f1040268          ADD      r2,r4,#0x68
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
;;;539      
;;;540      return Dest;
000010  f99d0000          LDRSB    r0,[sp,#0]
;;;541    }
000014  bd38              POP      {r3-r5,pc}
;;;542                           
                          ENDP


                          AREA ||i._ZN6TModel12set_btn_modeEN9TSettings6TPressE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12set_btn_modeEN9TSettings6TPressE PROC ; TModel::set_btn_mode(TSettings::TPress)
;;;100    
;;;101    void TModel::set_btn_mode( TPress Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;102    {
000002  4604              MOV      r4,r0
;;;103      access_prot(  Main.Press, Src ); //записать в главный буфер в ОЗУ
000004  f1040555          ADD      r5,r4,#0x55
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  f89d0004          LDRB     r0,[sp,#4]
00001c  7028              STRB     r0,[r5,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;104    }
000030  bd7c              POP      {r2-r6,pc}
;;;105    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel12set_d_o_setsE8TContact||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12set_d_o_setsE8TContact PROC ; TModel::set_d_o_sets(TContact)
;;;1136   
;;;1137   void TModel::set_d_o_sets( TContact Src )
000000  b538              PUSH     {r3-r5,lr}
;;;1138   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1139     //чтение -> модификация -> запись
;;;1140     TBits New;
;;;1141     access_prot( New, Main.FlashData.AllSets.AdpBits.Bits ); //в New в данный момент старые настройки
000006  f1040296          ADD      r2,r4,#0x96
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_ ; void TModel::access_prot<TBits, TBits>(T1&, const T2&)
;;;1142     
;;;1143     if ( New.Item.Normal != Src )
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f0000001          AND      r0,r0,#1
00001a  42a8              CMP      r0,r5
00001c  d00d              BEQ      |L23.58|
;;;1144     {
;;;1145       New.Item.Normal = Src;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f3650000          BFI      r0,r5,#0,#1
000026  9000              STR      r0,[sp,#0]
;;;1146   
;;;1147       access_prot(  Main.FlashData.AllSets.AdpBits.Bits, New ); //записать в главный буфер в ОЗУ
000028  466a              MOV      r2,sp
00002a  f1040196          ADD      r1,r4,#0x96
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       _ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_ ; void TModel::access_prot<TBits, TBits>(T1&, const T2&)
;;;1148       set_flash_data();                                         //записать во Flash
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L23.58|
;;;1149     }
;;;1150     else
;;;1151     {
;;;1152       //защита от перезаписи того же значения
;;;1153     }
;;;1154   }
00003a  bd38              POP      {r3-r5,pc}
;;;1155   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel12set_hc_stateEN9TSettings3THCE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12set_hc_stateEN9TSettings3THCE PROC ; TModel::set_hc_state(TSettings::THC)
;;;224    
;;;225    void TModel::set_hc_state( THC HC )
000000  b538              PUSH     {r3-r5,lr}
;;;226    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;227      TState Dest;
;;;228      
;;;229      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;230      Dest.HC = HC;                            //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f3650000          BFI      r0,r5,#0,#1
00001a  9000              STR      r0,[sp,#0]
;;;231      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;232    }
000028  bd38              POP      {r3-r5,pc}
;;;233    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel12set_led_modeEN9TSettings8TLedModeE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12set_led_modeEN9TSettings8TLedModeE PROC ; TModel::set_led_mode(TSettings::TLedMode)
;;;115    
;;;116    void TModel::set_led_mode( TLedMode Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;117    {
000002  4604              MOV      r4,r0
;;;118      access_prot(  Main.LedMode, Src ); //записать в главный буфер в ОЗУ
000004  f1040556          ADD      r5,r4,#0x56
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  f89d0004          LDRB     r0,[sp,#4]
00001c  7028              STRB     r0,[r5,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;119    }
000030  bd7c              POP      {r2-r6,pc}
;;;120    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel12set_my_angleEs||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12set_my_angleEs PROC ; TModel::set_my_angle(short)
;;;388    
;;;389    void TModel::set_my_angle( int16_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;390    {
000002  4604              MOV      r4,r0
;;;391      access_prot(  Main.DevData.MyAngle, Src );
000004  aa01              ADD      r2,sp,#4
000006  f1040166          ADD      r1,r4,#0x66
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedssEEvRT_RKT0_
;;;392    }
000010  bd1c              POP      {r2-r4,pc}
;;;393    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel12set_raw_rollEa||, CODE, READONLY, ALIGN=1

                  _ZN6TModel12set_raw_rollEa PROC ; TModel::set_raw_roll(signed char)
;;;542                           
;;;543    void TModel::set_raw_roll( int8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;544    {
000002  4604              MOV      r4,r0
;;;545      access_prot(  Main.DevData.RawRoll, Src );
000004  aa01              ADD      r2,sp,#4
000006  f1040168          ADD      r1,r4,#0x68
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
;;;546    }                  
000010  bd1c              POP      {r2-r4,pc}
;;;547    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13get_acc_calibEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_acc_calibEv PROC ; TModel::get_acc_calib()
;;;311    //----- интерфейс к калибровке акселерометра на базе --------
;;;312    TModel::TCalib TModel::get_acc_calib()
000000  b570              PUSH     {r4-r6,lr}
;;;313    {  
000002  4605              MOV      r5,r0
;;;314      bool Tmp    = !static_cast<bool>( get_accel_calib_sign() ); //получить признак калибровки, который хранится во флэш микроконтроллера
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       _ZN6TModel20get_accel_calib_signEv ; TModel::get_accel_calib_sign()
00000a  b908              CBNZ     r0,|L28.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L28.18|
                  |L28.16|
000010  2000              MOVS     r0,#0
                  |L28.18|
000012  4606              MOV      r6,r0
;;;315      TCalib Dest = static_cast<TCalib>(Tmp);
000014  4634              MOV      r4,r6
;;;316      set_acc_calib( Dest );
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       _ZN6TModel13set_acc_calibEN9TSettings6TCalibE ; TModel::set_acc_calib(TSettings::TCalib)
;;;317      
;;;318      return Dest;
00001e  4620              MOV      r0,r4
;;;319    }
000020  bd70              POP      {r4-r6,pc}
;;;320    
                          ENDP


                          AREA ||i._ZN6TModel13get_base_memsEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_base_memsEv PROC ; TModel::get_base_mems()
;;;350    //----- интерфейс к состоянию МЭМС на базе ------------------
;;;351    TModel::TMainState TModel::get_base_mems()
000000  b538              PUSH     {r3-r5,lr}
;;;352    {
000002  4604              MOV      r4,r0
;;;353      TState Dest;
;;;354      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;355      
;;;356      return Dest.Base_Mems;
000010  f89d0000          LDRB     r0,[sp,#0]
000014  09c0              LSRS     r0,r0,#7
;;;357    }
000016  bd38              POP      {r3-r5,pc}
;;;358    
                          ENDP


                          AREA ||i._ZN6TModel13get_dev_stateEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_dev_stateEv PROC ; TModel::get_dev_state()
;;;369    //----- интерфейс к состоянию устройства --------------------
;;;370    uint8_t TModel::get_dev_state()
000000  b538              PUSH     {r3-r5,lr}
;;;371    {
000002  4604              MOV      r4,r0
;;;372      TState Dest;
;;;373      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;374      
;;;375      return Dest.Total;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;376    }              
000014  bd38              POP      {r3-r5,pc}
;;;377    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13get_interconnEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_interconnEv PROC ; TModel::get_interconn()
;;;1157   //----- интерфейс к настройке типа взаимодействия датчика ---
;;;1158   TInterconn TModel::get_interconn()
000000  b538              PUSH     {r3-r5,lr}
;;;1159   {  
000002  4604              MOV      r4,r0
;;;1160     TBits Dest;
;;;1161     access_prot( Dest, Main.FlashData.AllSets.AdpBits.Bits );
000004  f1040296          ADD      r2,r4,#0x96
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_ ; void TModel::access_prot<TBits, TBits>(T1&, const T2&)
;;;1162     
;;;1163     return Dest.Item.Interconn;  
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f3c00040          UBFX     r0,r0,#1,#1
;;;1164   }
000018  bd38              POP      {r3-r5,pc}
;;;1165   
                          ENDP


                          AREA ||i._ZN6TModel13get_psw_adminEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_psw_adminEv PROC ; TModel::get_psw_admin()
;;;897    //----- интерфейс к паролю администратора -------------------
;;;898    float TModel::get_psw_admin()
000000  b538              PUSH     {r3-r5,lr}
;;;899    {
000002  4604              MOV      r4,r0
;;;900      float Dest;
;;;901      access_prot( Dest, Main.FlashData.AllSets.PswAdmin );
000004  f1040287          ADD      r2,r4,#0x87
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
;;;902      
;;;903      return Dest;
000010  ed9d0a00          VLDR     s0,[sp,#0]
;;;904    }
000014  bd38              POP      {r3-r5,pc}
;;;905    
                          ENDP


                          AREA ||i._ZN6TModel13get_psw_superEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_psw_superEv PROC ; TModel::get_psw_super()
;;;916    //----- интерфейс к паролю суперадминистратора --------------
;;;917    float TModel::get_psw_super()
000000  b538              PUSH     {r3-r5,lr}
;;;918    {
000002  4604              MOV      r4,r0
;;;919      float Dest;
;;;920      access_prot( Dest, Main.FlashData.AllSets.PswSuper );
000004  f104028b          ADD      r2,r4,#0x8b
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
;;;921      
;;;922      return Dest;
000010  ed9d0a00          VLDR     s0,[sp,#0]
;;;923    }
000014  bd38              POP      {r3-r5,pc}
;;;924    
                          ENDP


                          AREA ||i._ZN6TModel13get_raw_pitchEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_raw_pitchEv PROC ; TModel::get_raw_pitch()
;;;517    //----- интерфейс к сырому значению тангажа -----------------
;;;518    int8_t TModel::get_raw_pitch()
000000  b538              PUSH     {r3-r5,lr}
;;;519    {
000002  4604              MOV      r4,r0
;;;520      int8_t Dest;
;;;521      
;;;522      access_prot( Dest, Main.DevData.RawPitch );
000004  f1040269          ADD      r2,r4,#0x69
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
;;;523      
;;;524      return Dest;
000010  f99d0000          LDRSB    r0,[sp,#0]
;;;525    }
000014  bd38              POP      {r3-r5,pc}
;;;526                           
                          ENDP


                          AREA ||i._ZN6TModel13get_sens_addrEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13get_sens_addrEv PROC ; TModel::get_sens_addr()
;;;881    //----- интерфейс к адресу устройства по протоколу СЕНС -----
;;;882    uint8_t TModel::get_sens_addr()
000000  b538              PUSH     {r3-r5,lr}
;;;883    {
000002  4604              MOV      r4,r0
;;;884      uint8_t Dest;
;;;885      access_prot( Dest, Main.FlashData.AllSets.Addr );
000004  f1040286          ADD      r2,r4,#0x86
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;886      
;;;887      return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;888    }
000014  bd38              POP      {r3-r5,pc}
;;;889    
                          ENDP


                          AREA ||i._ZN6TModel13handler_calibEsPb||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13handler_calibEsPb PROC ; TModel::handler_calib(short, bool*)
;;;619    
;;;620    void TModel::handler_calib( int16_t Src, bool *CalibProcess )
000000  b570              PUSH     {r4-r6,lr}
;;;621    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;622      if ( get_calib_process() == TCalibProcess::__PERFORMING ) //если какая-то калибровочная команда выполняется в данный момент
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6TModel17get_calib_processEv ; TModel::get_calib_process()
;;;623      {
;;;624        //семафор на смену калибровочного положения выдавать НЕЛЬЗЯ!
;;;625      }
;;;626      else
;;;627      {
;;;628    //    if ( get_access() >= AngleCalibSem[ Src ].Access ) //проверка доступа к калибровочной команде
;;;629    //    {
;;;630    //      set_calib_process( TCalibProcess::__PERFORMING );
;;;631    //      *CalibProcess = true;
;;;632    //      xSemaphoreGive( *AngleCalibSem[ Src ].Sem );      
;;;633    //    }
;;;634    //    else
;;;635    //    {
;;;636    //      *CalibProcess = false;
;;;637    //    }    
;;;638      }
;;;639    }
00000e  bd70              POP      {r4-r6,pc}
;;;640    
                          ENDP


                          AREA ||i._ZN6TModel13set_acc_calibEN9TSettings6TCalibE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13set_acc_calibEN9TSettings6TCalibE PROC ; TModel::set_acc_calib(TSettings::TCalib)
;;;320    
;;;321    void TModel::set_acc_calib( TCalib Calib )
000000  b538              PUSH     {r3-r5,lr}
;;;322    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;323      TState Dest;
;;;324      
;;;325      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;326      Dest.AccCalib = Calib;                   //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f3651004          BFI      r0,r5,#4,#1
00001a  9000              STR      r0,[sp,#0]
;;;327      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;328    }
000028  bd38              POP      {r3-r5,pc}
;;;329    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13set_base_memsEN9TSettings10TMainStateE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13set_base_memsEN9TSettings10TMainStateE PROC ; TModel::set_base_mems(TSettings::TMainState)
;;;358    
;;;359    void TModel::set_base_mems( TMainState NewState )
000000  b538              PUSH     {r3-r5,lr}
;;;360    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;361      TState Dest;
;;;362      
;;;363      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;364      Dest.Base_Mems = NewState;               //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f36510c7          BFI      r0,r5,#7,#1
00001a  9000              STR      r0,[sp,#0]
;;;365      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;366    }
000028  bd38              POP      {r3-r5,pc}
;;;367    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13set_calib_cmdEt||, CODE, READONLY, ALIGN=2

                  _ZN6TModel13set_calib_cmdEt PROC ; TModel::set_calib_cmd(unsigned short)
;;;578    
;;;579    bool TModel::set_calib_cmd( uint16_t Src )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;580    {
000004  b091              SUB      sp,sp,#0x44
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
;;;581      //Необходимо: \
;;;582        1. не допустить несуществующую команду калибровки \
;;;583        2. не допустить прерывание процесса выполнения   
;;;584      typedef bool ( TSettings::*TChk )( int16_t ) const;
;;;585      typedef void ( TModel::*THandler )( int16_t, bool * );
;;;586    
;;;587      struct TCalibHandler
;;;588      {
;;;589        TChk     chk_fnct;
;;;590        THandler handler_fnct;
;;;591      };
;;;592    
;;;593      TCalibHandler CalibHandler[] =
00000a  2220              MOVS     r2,#0x20
00000c  4928              LDR      r1,|L39.176|
00000e  a809              ADD      r0,sp,#0x24
000010  f7fffffe          BL       __aeabi_memcpy4
;;;594      {
;;;595        { &TModel::chk_calib,  &TModel::handler_calib, },
;;;596        { &TModel::chk_access, &TModel::handler_access, },
;;;597      };
;;;598      
;;;599      bool CalibProcess = false;
000014  2000              MOVS     r0,#0
000016  9008              STR      r0,[sp,#0x20]
;;;600      
;;;601      for ( auto item : CalibHandler )
000018  af09              ADD      r7,sp,#0x24
00001a  463c              MOV      r4,r7
00001c  f1070020          ADD      r0,r7,#0x20
000020  9007              STR      r0,[sp,#0x1c]
000022  e035              B        |L39.144|
                  |L39.36|
000024  e894000f          LDM      r4,{r0-r3}
000028  e9cd2305          STRD     r2,r3,[sp,#0x14]
00002c  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;602      {
;;;603        if ( ( this->*item.chk_fnct )( Src ) )
000030  9804              LDR      r0,[sp,#0x10]
000032  eb050860          ADD      r8,r5,r0,ASR #1
000036  f0000001          AND      r0,r0,#1
00003a  b908              CBNZ     r0,|L39.64|
00003c  9803              LDR      r0,[sp,#0xc]
00003e  e006              B        |L39.78|
                  |L39.64|
000040  f8d81000          LDR      r1,[r8,#0]
000044  9803              LDR      r0,[sp,#0xc]
000046  eb010900          ADD      r9,r1,r0
00004a  f8d90000          LDR      r0,[r9,#0]
                  |L39.78|
00004e  b231              SXTH     r1,r6
000050  9002              STR      r0,[sp,#8]
000052  4640              MOV      r0,r8
000054  9a02              LDR      r2,[sp,#8]
000056  4790              BLX      r2
000058  b1c8              CBZ      r0,|L39.142|
;;;604        {
;;;605          CalibProcess = true;
00005a  2001              MOVS     r0,#1
00005c  9008              STR      r0,[sp,#0x20]
;;;606          ( this->*item.handler_fnct )( Src, &CalibProcess );
00005e  9806              LDR      r0,[sp,#0x18]
000060  eb050a60          ADD      r10,r5,r0,ASR #1
000064  f89d0018          LDRB     r0,[sp,#0x18]
000068  f0000001          AND      r0,r0,#1
00006c  b908              CBNZ     r0,|L39.114|
00006e  9805              LDR      r0,[sp,#0x14]
000070  e006              B        |L39.128|
                  |L39.114|
000072  f8da0000          LDR      r0,[r10,#0]
000076  9905              LDR      r1,[sp,#0x14]
000078  eb000b01          ADD      r11,r0,r1
00007c  f8db0000          LDR      r0,[r11,#0]
                  |L39.128|
000080  aa08              ADD      r2,sp,#0x20
000082  b231              SXTH     r1,r6
000084  9001              STR      r0,[sp,#4]
000086  4650              MOV      r0,r10
000088  9b01              LDR      r3,[sp,#4]
00008a  4798              BLX      r3
;;;607          
;;;608          break;
00008c  e003              B        |L39.150|
                  |L39.142|
;;;609        }
;;;610      }
00008e  3410              ADDS     r4,r4,#0x10
                  |L39.144|
000090  9807              LDR      r0,[sp,#0x1c]
000092  4284              CMP      r4,r0
000094  d1c6              BNE      |L39.36|
                  |L39.150|
000096  bf00              NOP                            ;608
;;;611      
;;;612      if ( !CalibProcess )
000098  f89d0020          LDRB     r0,[sp,#0x20]
00009c  b918              CBNZ     r0,|L39.166|
;;;613      {
;;;614        set_calib_process( TCalibProcess::__DENY ); //запрощенная команда не найдена
00009e  210a              MOVS     r1,#0xa
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
                  |L39.166|
;;;615      }
;;;616      
;;;617      return true;
0000a6  2001              MOVS     r0,#1
;;;618    }
0000a8  b011              ADD      sp,sp,#0x44
0000aa  e8bd8ff0          POP      {r4-r11,pc}
;;;619    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L39.176|
                          DCD      ||.constdata||+0x54

                          AREA ||i._ZN6TModel13set_interconnE10TInterconn||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13set_interconnE10TInterconn PROC ; TModel::set_interconn(TInterconn)
;;;1165   
;;;1166   void TModel::set_interconn( TInterconn Src )
000000  b538              PUSH     {r3-r5,lr}
;;;1167   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1168     //чтение -> модификация -> запись
;;;1169     TBits New;
;;;1170     access_prot( New, Main.FlashData.AllSets.AdpBits.Bits ); //в New в данный момент старые настройки
000006  f1040296          ADD      r2,r4,#0x96
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_ ; void TModel::access_prot<TBits, TBits>(T1&, const T2&)
;;;1171     
;;;1172     if ( New.Item.Interconn != Src )
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f3c00040          UBFX     r0,r0,#1,#1
00001a  42a8              CMP      r0,r5
00001c  d00d              BEQ      |L40.58|
;;;1173     {
;;;1174       New.Item.Interconn = Src;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f3650041          BFI      r0,r5,#1,#1
000026  9000              STR      r0,[sp,#0]
;;;1175   
;;;1176       access_prot(  Main.FlashData.AllSets.AdpBits.Bits, New ); //записать в главный буфер в ОЗУ
000028  466a              MOV      r2,sp
00002a  f1040196          ADD      r1,r4,#0x96
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       _ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_ ; void TModel::access_prot<TBits, TBits>(T1&, const T2&)
;;;1177       set_flash_data();                                         //записать во Flash
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L40.58|
;;;1178     }
;;;1179     else
;;;1180     {
;;;1181       //защита от перезаписи того же значения
;;;1182     }
;;;1183   }
00003a  bd38              POP      {r3-r5,pc}
;;;1184   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13set_psw_adminEf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13set_psw_adminEf PROC ; TModel::set_psw_admin(float)
;;;905    
;;;906    void TModel::set_psw_admin( float Src )
000000  b531              PUSH     {r0,r4,r5,lr}
;;;907    {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
;;;908      if ( Src != get_psw_admin() )
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6TModel13get_psw_adminEv ; TModel::get_psw_admin()
00000e  eddd0a00          VLDR     s1,[sp,#0]
000012  eeb40a60          VCMP.F32 s0,s1
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001a  d008              BEQ      |L41.46|
;;;909    	{
;;;910    		access_prot(  Main.FlashData.AllSets.PswAdmin, Src ); //записать в главный буфер в ОЗУ
00001c  466a              MOV      r2,sp
00001e  f1040187          ADD      r1,r4,#0x87
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
;;;911    		set_flash_data();                                     //записать во Flash
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L41.46|
;;;912    	}
;;;913    }
00002e  bd3e              POP      {r1-r5,pc}
;;;914    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13set_psw_superEf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13set_psw_superEf PROC ; TModel::set_psw_super(float)
;;;924    
;;;925    void TModel::set_psw_super( float Src )
000000  b531              PUSH     {r0,r4,r5,lr}
;;;926    {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
;;;927      if ( Src != get_psw_super() )
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6TModel13get_psw_superEv ; TModel::get_psw_super()
00000e  eddd0a00          VLDR     s1,[sp,#0]
000012  eeb40a60          VCMP.F32 s0,s1
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001a  d008              BEQ      |L42.46|
;;;928    	{
;;;929    		access_prot(  Main.FlashData.AllSets.PswSuper, Src ); //записать в главный буфер в ОЗУ
00001c  466a              MOV      r2,sp
00001e  f104018b          ADD      r1,r4,#0x8b
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
;;;930    		set_flash_data();                                     //записать во Flash
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L42.46|
;;;931    	}
;;;932    }
00002e  bd3e              POP      {r1-r5,pc}
;;;933    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13set_raw_pitchEa||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13set_raw_pitchEa PROC ; TModel::set_raw_pitch(signed char)
;;;526                           
;;;527    void TModel::set_raw_pitch( int8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;528    {
000002  4604              MOV      r4,r0
;;;529      access_prot(  Main.DevData.RawPitch, Src );
000004  aa01              ADD      r2,sp,#4
000006  f1040169          ADD      r1,r4,#0x69
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
;;;530    }                
000010  bd1c              POP      {r2-r4,pc}
;;;531    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel13set_sens_addrERKh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel13set_sens_addrERKh PROC ; TModel::set_sens_addr(const unsigned char&)
;;;889    
;;;890    void TModel::set_sens_addr( const uint8_t &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;891    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;892      access_prot(  Main.FlashData.AllSets.Addr, Src ); //записать в главный буфер в ОЗУ
000006  462a              MOV      r2,r5
000008  f1040186          ADD      r1,r4,#0x86
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;893      set_flash_data();                                 //записать во Flash
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
;;;894    }
000018  bd70              POP      {r4-r6,pc}
;;;895    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel14get_flash_dataERN9TSettings10TFlashDataE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14get_flash_dataERN9TSettings10TFlashDataE PROC ; TModel::get_flash_data(TSettings::TFlashData&)
;;;1343   //----- интерфейс к копии данных, хранящихся во Flash -------
;;;1344   void TModel::get_flash_data( TFlashData &Dest )
000000  b570              PUSH     {r4-r6,lr}
;;;1345   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1346     access_prot( Dest, Main.FlashData );
000006  f1040282          ADD      r2,r4,#0x82
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TFlashData, TSettings::TFlashData>(T1&, const T2&)
;;;1347   }
000012  bd70              POP      {r4-r6,pc}
;;;1348   
                          ENDP


                          AREA ||i._ZN6TModel14get_hc_code_swEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14get_hc_code_swEv PROC ; TModel::get_hc_code_sw()
;;;159    //----- интерфейс к данным кодового переключателя на крышке -
;;;160    uint8_t TModel::get_hc_code_sw()
000000  b538              PUSH     {r3-r5,lr}
;;;161    {
000002  4604              MOV      r4,r0
;;;162      uint8_t Dest;
;;;163      
;;;164      access_prot( Dest, Main.DevData.Sens.CodeSw );
000004  f1040258          ADD      r2,r4,#0x58
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;165      
;;;166      return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;167    }
000014  bd38              POP      {r3-r5,pc}
;;;168    
                          ENDP


                          AREA ||i._ZN6TModel14get_hc_pos_errEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14get_hc_pos_errEv PROC ; TModel::get_hc_pos_err()
;;;235    //----- интерфейс к ошибке положения крышки -----------------
;;;236    TModel::TPosErr TModel::get_hc_pos_err()
000000  b538              PUSH     {r3-r5,lr}
;;;237    {
000002  4604              MOV      r4,r0
;;;238      TState Dest;
;;;239      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;240      
;;;241      return Dest.HC_PosErr;
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f3c00040          UBFX     r0,r0,#1,#1
;;;242    }
000018  bd38              POP      {r3-r5,pc}
;;;243    
                          ENDP


                          AREA ||i._ZN6TModel14get_open_angleEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14get_open_angleEv PROC ; TModel::get_open_angle()
;;;201    //----- интерфейс к результирующему углу --------------------
;;;202    float TModel::get_open_angle()
000000  b538              PUSH     {r3-r5,lr}
;;;203    {
000002  4604              MOV      r4,r0
;;;204      float Dest;  
;;;205      access_prot( Dest, Main.DevData.OpenAngle );
000004  f1040261          ADD      r2,r4,#0x61
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
;;;206      
;;;207      return Dest;
000010  ed9d0a00          VLDR     s0,[sp,#0]
;;;208    }
000014  bd38              POP      {r3-r5,pc}
;;;209    
                          ENDP


                          AREA ||i._ZN6TModel14get_sens_angleEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14get_sens_angleEv PROC ; TModel::get_sens_angle()
;;;395    //----- интерфейс к углу платы датчика ----------------------
;;;396    int16_t TModel::get_sens_angle()
000000  b538              PUSH     {r3-r5,lr}
;;;397    {
000002  4604              MOV      r4,r0
;;;398      int16_t Dest;
;;;399      
;;;400      access_prot( Dest, Main.DevData.Sens.Angle );
000004  f104025b          ADD      r2,r4,#0x5b
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_
;;;401      
;;;402      return Dest;
000010  f9bd0000          LDRSH    r0,[sp,#0]
;;;403    }
000014  bd38              POP      {r3-r5,pc}
;;;404    
                          ENDP


                          AREA ||i._ZN6TModel14handler_accessEsPb||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14handler_accessEsPb PROC ; TModel::handler_access(short, bool*)
;;;640    
;;;641    void TModel::handler_access( int16_t Src, bool *CalibProcess )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;642    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;643    //  set_calib_process( TCalibProcess::__PERFORMING ); //необходим дозапрос параметра => перевод калибровочного процесса в __PERFORMING
;;;644      
;;;645      for ( uint8_t Ctr = 0; Ctr < ( sizeof Authorize / sizeof Authorize[0U] ); ++Ctr )
00000a  2400              MOVS     r4,#0
00000c  e04b              B        |L50.166|
                  |L50.14|
;;;646      {
;;;647        if ( Authorize[ Ctr ].Access == Src % 10U )
00000e  200a              MOVS     r0,#0xa
000010  fbb6f1f0          UDIV     r1,r6,r0
000014  fb006111          MLS      r1,r0,r1,r6
000018  eb040244          ADD      r2,r4,r4,LSL #1
00001c  f1050030          ADD      r0,r5,#0x30
000020  f8100022          LDRB     r0,[r0,r2,LSL #2]
000024  4281              CMP      r1,r0
000026  d13c              BNE      |L50.162|
;;;648        {
;;;649          if ( Authorize[ Ctr ].get_psw != nullptr )
000028  eb040144          ADD      r1,r4,r4,LSL #1
00002c  f1050030          ADD      r0,r5,#0x30
000030  eb000081          ADD      r0,r0,r1,LSL #2
000034  6840              LDR      r0,[r0,#4]
000036  b9a0              CBNZ     r0,|L50.98|
000038  2000              MOVS     r0,#0
00003a  4280              CMP      r0,r0
00003c  d109              BNE      |L50.82|
00003e  eb040144          ADD      r1,r4,r4,LSL #1
000042  f1050030          ADD      r0,r5,#0x30
000046  eb000081          ADD      r0,r0,r1,LSL #2
00004a  7a00              LDRB     r0,[r0,#8]
00004c  f0000001          AND      r0,r0,#1
000050  b1a8              CBZ      r0,|L50.126|
                  |L50.82|
000052  eb040144          ADD      r1,r4,r4,LSL #1
000056  f1050030          ADD      r0,r5,#0x30
00005a  eb000081          ADD      r0,r0,r1,LSL #2
00005e  6880              LDR      r0,[r0,#8]
000060  b168              CBZ      r0,|L50.126|
                  |L50.98|
;;;650          {
;;;651            set_authorize_item_ptr( &Authorize[ Ctr ] );
000062  eb040244          ADD      r2,r4,r4,LSL #1
000066  f1050030          ADD      r0,r5,#0x30
00006a  eb000182          ADD      r1,r0,r2,LSL #2
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       _ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE ; TModel::set_authorize_item_ptr(const TModel::TAuthorize*)
;;;652            set_calib_process( TCalibProcess::__PERFORMING );
000074  2155              MOVS     r1,#0x55
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
00007c  e010              B        |L50.160|
                  |L50.126|
;;;653          }
;;;654          else
;;;655          {
;;;656            set_access( Authorize[ Ctr ].Access ); //пароль не нужен
00007e  eb040244          ADD      r2,r4,r4,LSL #1
000082  f1050030          ADD      r0,r5,#0x30
000086  f8101022          LDRB     r1,[r0,r2,LSL #2]
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       _ZN6TModel10set_accessEN9TSettings7TAccessE ; TModel::set_access(TSettings::TAccess)
;;;657            set_authorize_item_ptr( nullptr );
000090  2100              MOVS     r1,#0
000092  4628              MOV      r0,r5
000094  f7fffffe          BL       _ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE ; TModel::set_authorize_item_ptr(const TModel::TAuthorize*)
;;;658            set_calib_process( TCalibProcess::__PERFORMED );
000098  215a              MOVS     r1,#0x5a
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE ; TModel::set_calib_process(TSettings::TCalibProcess)
                  |L50.160|
;;;659          }
;;;660               
;;;661          break;
0000a0  e003              B        |L50.170|
                  |L50.162|
0000a2  1c60              ADDS     r0,r4,#1              ;645
0000a4  b2c4              UXTB     r4,r0                 ;645
                  |L50.166|
0000a6  2c03              CMP      r4,#3                 ;645
0000a8  d3b1              BCC      |L50.14|
                  |L50.170|
;;;662        }
;;;663        else
;;;664        {
;;;665        
;;;666        }
;;;667      }
;;;668      
;;;669      //далее ожидание действий пользователя по установке
;;;670    }
0000aa  e8bd81f0          POP      {r4-r8,pc}
;;;671    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel14set_flash_dataEv||, CODE, READONLY, ALIGN=2

                  _ZN6TModel14set_flash_dataEv PROC ; TModel::set_flash_data()
;;;1348   
;;;1349   void TModel::set_flash_data()
000000  b510              PUSH     {r4,lr}
;;;1350   {
000002  b08e              SUB      sp,sp,#0x38
000004  4604              MOV      r4,r0
;;;1351     TFlashData Dest;
;;;1352     access_prot( Dest, Main.FlashData );
000006  f1040282          ADD      r2,r4,#0x82
00000a  a901              ADD      r1,sp,#4
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TFlashData, TSettings::TFlashData>(T1&, const T2&)
;;;1353       
;;;1354     Flash.write_sets(
000012  2232              MOVS     r2,#0x32
000014  a901              ADD      r1,sp,#4
000016  4802              LDR      r0,|L51.32|
000018  f7fffffe          BL       _ZN6TFlash10write_setsEPKht ; TFlash::write_sets(const unsigned char*, unsigned short)
;;;1355                      reinterpret_cast<uint8_t *>(&Dest),
;;;1356                      sizeof Dest
;;;1357                     );
;;;1358   }
00001c  b00e              ADD      sp,sp,#0x38
00001e  bd10              POP      {r4,pc}
;;;1359   //-----------------------------------------------------------
                          ENDP

                  |L51.32|
                          DCD      Flash

                          AREA ||i._ZN6TModel14set_hc_code_swEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14set_hc_code_swEh PROC ; TModel::set_hc_code_sw(unsigned char)
;;;168    
;;;169    void TModel::set_hc_code_sw( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;170    {
000002  4604              MOV      r4,r0
;;;171      if (
000004  f89d0004          LDRB     r0,[sp,#4]
000008  2800              CMP      r0,#0
00000a  db09              BLT      |L52.32|
;;;172          Src >= CodeRange.Min
;;;173          &&
;;;174          Src <= CodeRange.Max
00000c  f89d0004          LDRB     r0,[sp,#4]
000010  280f              CMP      r0,#0xf
000012  dc05              BGT      |L52.32|
;;;175         )
;;;176      {
;;;177        access_prot( Main.DevData.Sens.CodeSw, Src );
000014  aa01              ADD      r2,sp,#4
000016  f1040158          ADD      r1,r4,#0x58
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
                  |L52.32|
;;;178      }
;;;179      else
;;;180      {
;;;181        //Main.CodeSw остается без изменения
;;;182      }
;;;183    }
000020  bd1c              POP      {r2-r4,pc}
;;;184    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE PROC ; TModel::set_hc_pos_err(TSettings::TPosErr)
;;;243    
;;;244    void TModel::set_hc_pos_err( TPosErr PosErr )
000000  b538              PUSH     {r3-r5,lr}
;;;245    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;246      TState Dest;
;;;247      
;;;248      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;249      Dest.HC_PosErr = PosErr;                 //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f3650041          BFI      r0,r5,#1,#1
00001a  9000              STR      r0,[sp,#0]
;;;250      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;251    }
000028  bd38              POP      {r3-r5,pc}
;;;252    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel14set_open_angleEf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14set_open_angleEf PROC ; TModel::set_open_angle(float)
;;;209    
;;;210    void TModel::set_open_angle( float Src )
000000  b531              PUSH     {r0,r4,r5,lr}
;;;211    {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
;;;212      access_prot( Main.DevData.OpenAngle, Src );
000008  466a              MOV      r2,sp
00000a  f1040161          ADD      r1,r4,#0x61
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
;;;213    }
000014  bd3e              POP      {r1-r5,pc}
;;;214    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel14set_sens_angleEs||, CODE, READONLY, ALIGN=1

                  _ZN6TModel14set_sens_angleEs PROC ; TModel::set_sens_angle(short)
;;;404    
;;;405    void TModel::set_sens_angle( int16_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;406    {
000002  4604              MOV      r4,r0
;;;407      access_prot(  Main.DevData.Sens.Angle, Src );
000004  aa01              ADD      r2,sp,#4
000006  f104015b          ADD      r1,r4,#0x5b
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedssEEvRT_RKT0_
;;;408    }
000010  bd1c              POP      {r2-r4,pc}
;;;409    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel15get_axis_rotateEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15get_axis_rotateEv PROC ; TModel::get_axis_rotate()
;;;1031   //----- интерфейс к настройке поворота оси ------------------
;;;1032   uint8_t TModel::get_axis_rotate()
000000  b538              PUSH     {r3-r5,lr}
;;;1033   {
000002  4604              MOV      r4,r0
;;;1034     uint8_t Dest;
;;;1035     access_prot( Dest, Main.FlashData.AllSets.DevSets.AxisRotate );
000004  f1040292          ADD      r2,r4,#0x92
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;1036   
;;;1037     return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;1038   }
000014  bd38              POP      {r3-r5,pc}
;;;1039   
                          ENDP


                          AREA ||i._ZN6TModel15get_hc_prog_nbrEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15get_hc_prog_nbrEv PROC ; TModel::get_hc_prog_nbr()
;;;186    //----- интерфейс к версия ПО с крышки ----------------------
;;;187    uint16_t TModel::get_hc_prog_nbr()
000000  b538              PUSH     {r3-r5,lr}
;;;188    {
000002  4604              MOV      r4,r0
;;;189      uint16_t Dest;  
;;;190      access_prot( Dest, Main.DevData.Sens.ProgNbr );
000004  f1040559          ADD      r5,r4,#0x59
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  8828              LDRH     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;191      
;;;192      return Dest;
00002e  f8bd0000          LDRH     r0,[sp,#0]
;;;193    }
000032  bd38              POP      {r3-r5,pc}
;;;194    
                          ENDP


                          AREA ||i._ZN6TModel15get_pd_pressureEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15get_pd_pressureEv PROC ; TModel::get_pd_pressure()
;;;1361   //----- интерфейс к давлению СЕНС ПД (тест) -----------------
;;;1362   float TModel::get_pd_pressure()
000000  b538              PUSH     {r3-r5,lr}
;;;1363   {
000002  4604              MOV      r4,r0
;;;1364     float Dest;
;;;1365     access_prot( Dest, Main.DevData.PdPressure );
000004  f104027e          ADD      r2,r4,#0x7e
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
;;;1366     
;;;1367     return Dest;
000010  ed9d0a00          VLDR     s0,[sp,#0]
;;;1368   }
000014  bd38              POP      {r3-r5,pc}
;;;1369   
                          ENDP


                          AREA ||i._ZN6TModel15get_u_baud_rateEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15get_u_baud_rateEv PROC ; TModel::get_u_baud_rate()
;;;1218   //----- интерфейс к скорости интерфейса Usart ---------------
;;;1219   uint8_t TModel::get_u_baud_rate()
000000  b538              PUSH     {r3-r5,lr}
;;;1220   {
000002  4604              MOV      r4,r0
;;;1221     uint8_t Dest;
;;;1222     access_prot( Dest, Main.FlashData.AllSets.If.USpeed );
000004  f104029a          ADD      r2,r4,#0x9a
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;1223   
;;;1224     return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;1225   }
000014  bd38              POP      {r3-r5,pc}
;;;1226   
                          ENDP


                          AREA ||i._ZN6TModel15set_axis_rotateEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15set_axis_rotateEh PROC ; TModel::set_axis_rotate(unsigned char)
;;;1039   
;;;1040   bool TModel::set_axis_rotate( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1041   {
000002  4604              MOV      r4,r0
;;;1042     if ( chk_axis_rotate( Src ) )
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings15chk_axis_rotateEs ; TSettings::chk_axis_rotate(short) const
00000e  b188              CBZ      r0,|L60.52|
;;;1043     {
;;;1044       if ( get_axis_rotate() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel15get_axis_rotateEv ; TModel::get_axis_rotate()
000016  f89d1004          LDRB     r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L60.48|
;;;1045       {
;;;1046         access_prot( Main.FlashData.AllSets.DevSets.AxisRotate, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f1040192          ADD      r1,r4,#0x92
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;1047         set_flash_data();                                              //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L60.48|
;;;1048       }
;;;1049       else
;;;1050       {
;;;1051         //нет необходимости в перезаписи если новое значение не отличается от старого
;;;1052       }
;;;1053       
;;;1054       return true;
000030  2001              MOVS     r0,#1
                  |L60.50|
;;;1055     }
;;;1056     else
;;;1057     {
;;;1058       return false; //параметр не записан ни в ОЗУ ни во Flash
;;;1059     }
;;;1060   }
000032  bd1c              POP      {r2-r4,pc}
                  |L60.52|
000034  2000              MOVS     r0,#0                 ;1058
000036  e7fc              B        |L60.50|
;;;1061   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel15set_hc_prog_nbrEt||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15set_hc_prog_nbrEt PROC ; TModel::set_hc_prog_nbr(unsigned short)
;;;194    
;;;195    void TModel::set_hc_prog_nbr( uint16_t Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;196    {
000002  4604              MOV      r4,r0
;;;197      access_prot( Main.DevData.Sens.ProgNbr, Src );
000004  f1040559          ADD      r5,r4,#0x59
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  f8bd0004          LDRH     r0,[sp,#4]
00001c  8028              STRH     r0,[r5,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;198    }
000030  bd7c              POP      {r2-r6,pc}
;;;199    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel15set_pd_pressureEf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15set_pd_pressureEf PROC ; TModel::set_pd_pressure(float)
;;;1369   
;;;1370   void TModel::set_pd_pressure( float Src )
000000  b531              PUSH     {r0,r4,r5,lr}
;;;1371   {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
;;;1372     if ( Src != get_psw_admin() )
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN6TModel13get_psw_adminEv ; TModel::get_psw_admin()
00000e  eddd0a00          VLDR     s1,[sp,#0]
000012  eeb40a60          VCMP.F32 s0,s1
000016  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001a  d008              BEQ      |L62.46|
;;;1373   	{
;;;1374   		access_prot(  Main.DevData.PdPressure, Src ); //записать в главный буфер в ОЗУ
00001c  466a              MOV      r2,sp
00001e  f104017e          ADD      r1,r4,#0x7e
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
;;;1375   		set_flash_data();                             //записать во Flash
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L62.46|
;;;1376   	}
;;;1377   }
00002e  bd3e              POP      {r1-r5,pc}
;;;1378   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel15set_u_baud_rateEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel15set_u_baud_rateEh PROC ; TModel::set_u_baud_rate(unsigned char)
;;;1248   
;;;1249   bool TModel::set_u_baud_rate( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1250   {
000002  4604              MOV      r4,r0
;;;1251     if ( chk_u_baud_rate( Src ) )
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings15chk_u_baud_rateEs ; TSettings::chk_u_baud_rate(short) const
00000e  b188              CBZ      r0,|L63.52|
;;;1252     {
;;;1253       if ( get_u_baud_rate() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel15get_u_baud_rateEv ; TModel::get_u_baud_rate()
000016  f89d1004          LDRB     r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L63.48|
;;;1254       {
;;;1255         access_prot( Main.FlashData.AllSets.If.USpeed, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f104019a          ADD      r1,r4,#0x9a
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;1256         set_flash_data();                                     //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L63.48|
;;;1257       }
;;;1258       else
;;;1259       {
;;;1260         //нет необходимости в перезаписи если новое значение не отличается от старого
;;;1261       }
;;;1262       
;;;1263       return true;
000030  2001              MOVS     r0,#1
                  |L63.50|
;;;1264     }
;;;1265     else
;;;1266     {
;;;1267       return false; //параметр не записан ни в ОЗУ ни во Flash
;;;1268     }
;;;1269   }
000032  bd1c              POP      {r2-r4,pc}
                  |L63.52|
000034  2000              MOVS     r0,#0                 ;1267
000036  e7fc              B        |L63.50|
;;;1270   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel16get_base_pos_errEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel16get_base_pos_errEv PROC ; TModel::get_base_pos_err()
;;;254    //----- интерфейс к ошибке положения базы -------------------
;;;255    TModel::TPosErr TModel::get_base_pos_err()
000000  b538              PUSH     {r3-r5,lr}
;;;256    {
000002  4604              MOV      r4,r0
;;;257      TState Dest;
;;;258      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;259      
;;;260      return Dest.Base_PosErr;
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f3c00080          UBFX     r0,r0,#2,#1
;;;261    }
000018  bd38              POP      {r3-r5,pc}
;;;262    
                          ENDP


                          AREA ||i._ZN6TModel16get_hc_acc_calibEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel16get_hc_acc_calibEv PROC ; TModel::get_hc_acc_calib()
;;;292    //----- интерфейс к калибровке акселерометра на крышке ------
;;;293    TModel::TCalib TModel::get_hc_acc_calib()
000000  b538              PUSH     {r3-r5,lr}
;;;294    {
000002  4604              MOV      r4,r0
;;;295      TState Dest;
;;;296      access_prot( Dest, Main.DevData.State );
000004  f1040265          ADD      r2,r4,#0x65
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;297      
;;;298      return Dest.HC_AccCalib;
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f3c01040          UBFX     r0,r0,#5,#1
;;;299    }
000018  bd38              POP      {r3-r5,pc}
;;;300    
                          ENDP


                          AREA ||i._ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE PROC ; TModel::set_base_pos_err(TSettings::TPosErr)
;;;262    
;;;263    void TModel::set_base_pos_err( TPosErr PosErr )
000000  b538              PUSH     {r3-r5,lr}
;;;264    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;265      TState Dest;
;;;266      
;;;267      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;268      Dest.Base_PosErr = PosErr;               //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f3650082          BFI      r0,r5,#2,#1
00001a  9000              STR      r0,[sp,#0]
;;;269      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;270    }
000028  bd38              POP      {r3-r5,pc}
;;;271    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel16set_hc_acc_calibEN9TSettings6TCalibE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel16set_hc_acc_calibEN9TSettings6TCalibE PROC ; TModel::set_hc_acc_calib(TSettings::TCalib)
;;;300    
;;;301    void TModel::set_hc_acc_calib( TCalib Calib )
000000  b538              PUSH     {r3-r5,lr}
;;;302    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;303      TState Dest;
;;;304      
;;;305      access_prot( Dest, Main.DevData.State ); //чтение
000006  f1040265          ADD      r2,r4,#0x65
00000a  4669              MOV      r1,sp
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;306      Dest.HC_AccCalib = Calib;                //модификация
000012  f89d0000          LDRB     r0,[sp,#0]
000016  f3651045          BFI      r0,r5,#5,#1
00001a  9000              STR      r0,[sp,#0]
;;;307      access_prot( Main.DevData.State, Dest ); //запись
00001c  466a              MOV      r2,sp
00001e  f1040165          ADD      r1,r4,#0x65
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;308    }
000028  bd38              POP      {r3-r5,pc}
;;;309    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel17get_calib_processEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel17get_calib_processEv PROC ; TModel::get_calib_process()
;;;565    //----- интерфейс к результату выполнения команды калибровки
;;;566    TModel::TCalibProcess TModel::get_calib_process()
000000  b538              PUSH     {r3-r5,lr}
;;;567    {
000002  4604              MOV      r4,r0
;;;568      TCalibProcess Dest;  
;;;569      access_prot( Dest, Main.DevData.CalibProcess );
000004  f104056e          ADD      r5,r4,#0x6e
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  7828              LDRB     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;570      
;;;571      return Dest;
00002e  f89d0000          LDRB     r0,[sp,#0]
;;;572    }
000032  bd38              POP      {r3-r5,pc}
;;;573    
                          ENDP


                          AREA ||i._ZN6TModel17get_transact_signERh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel17get_transact_signERh PROC ; TModel::get_transact_sign(unsigned char&)
;;;744    //----- интерфейс к признаку обмена данными -----------------
;;;745    void TModel::get_transact_sign( uint8_t &Dest )
000000  b570              PUSH     {r4-r6,lr}
;;;746    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;747      access_prot( Dest, Main.DevData.TransactSign );
000006  f1040277          ADD      r2,r4,#0x77
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;748    }
000012  bd70              POP      {r4-r6,pc}
;;;749    
                          ENDP


                          AREA ||i._ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE PROC ; TModel::set_calib_process(TSettings::TCalibProcess)
;;;573    
;;;574    void TModel::set_calib_process( TCalibProcess Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;575    {
000002  4604              MOV      r4,r0
;;;576      access_prot( Main.DevData.CalibProcess, Src );
000004  f104056e          ADD      r5,r4,#0x6e
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  f89d0004          LDRB     r0,[sp,#4]
00001c  7028              STRB     r0,[r5,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;577    }
000030  bd7c              POP      {r2-r6,pc}
;;;578    
                          ENDP


                          AREA ||i._ZN6TModel17set_transact_signERKh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel17set_transact_signERKh PROC ; TModel::set_transact_sign(const unsigned char&)
;;;749    
;;;750    void TModel::set_transact_sign( const uint8_t &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;751    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;752      access_prot(  Main.DevData.TransactSign, Src );
000006  462a              MOV      r2,r5
000008  f1040177          ADD      r1,r4,#0x77
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;753    }
000012  bd70              POP      {r4-r6,pc}
;;;754    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel18get_boot_mode_flagEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel18get_boot_mode_flagEv PROC ; TModel::get_boot_mode_flag()
;;;833    //----- интерфейс к флагу нахождения в загрузчике -----------
;;;834    TModel::TBootModeFlag TModel::get_boot_mode_flag()
000000  b538              PUSH     {r3-r5,lr}
;;;835    {
000002  4604              MOV      r4,r0
;;;836      TBootModeFlag Dest;
;;;837      access_prot( Dest, Main.FlashData.BootModeFlag );
000004  f1040582          ADD      r5,r4,#0x82
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  8828              LDRH     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;838      
;;;839      return Dest;
00002e  f8bd0000          LDRH     r0,[sp,#0]
;;;840    }
000032  bd38              POP      {r3-r5,pc}
;;;841    
                          ENDP


                          AREA ||i._ZN6TModel18get_start_meas_cmdEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel18get_start_meas_cmdEv PROC ; TModel::get_start_meas_cmd()
;;;815    //----- интерфейс к команде запуска измерений ---------------
;;;816    TModel::TMeas TModel::get_start_meas_cmd()
000000  b538              PUSH     {r3-r5,lr}
;;;817    {
000002  4604              MOV      r4,r0
;;;818      TCommunicate Dest = get_communicate_byte();
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN6TModel20get_communicate_byteEv ; TModel::get_communicate_byte()
00000a  9000              STR      r0,[sp,#0]
;;;819      
;;;820      return Dest.StartMeasCmd;
00000c  f89d0000          LDRB     r0,[sp,#0]
000010  f3c00040          UBFX     r0,r0,#1,#1
;;;821    }
000014  bd38              POP      {r3-r5,pc}
;;;822    
                          ENDP


                          AREA ||i._ZN6TModel18set_boot_mode_flagEN9TSettings13TBootModeFlagE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel18set_boot_mode_flagEN9TSettings13TBootModeFlagE PROC ; TModel::set_boot_mode_flag(TSettings::TBootModeFlag)
;;;841    
;;;842    void TModel::set_boot_mode_flag( TBootModeFlag Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;843    {
000002  4604              MOV      r4,r0
;;;844      access_prot(  Main.FlashData.BootModeFlag, Src ); //записать в главный буфер в ОЗУ
000004  f1040582          ADD      r5,r4,#0x82
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  f8bd0004          LDRH     r0,[sp,#4]
00001c  8028              STRH     r0,[r5,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;845      set_flash_data();                                 //записать во Flash
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
;;;846    }
000036  bd7c              POP      {r2-r6,pc}
;;;847    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE PROC ; TModel::set_start_meas_cmd(TSettings::TMeas)
;;;822    
;;;823    void TModel::set_start_meas_cmd( TMeas Src )
000000  b538              PUSH     {r3-r5,lr}
;;;824    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;825      TCommunicate Byte = get_communicate_byte();
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _ZN6TModel20get_communicate_byteEv ; TModel::get_communicate_byte()
00000c  9000              STR      r0,[sp,#0]
;;;826      Byte.StartMeasCmd = Src;
00000e  f89d0000          LDRB     r0,[sp,#0]
000012  f3650041          BFI      r0,r5,#1,#1
000016  9000              STR      r0,[sp,#0]
;;;827      
;;;828      access_prot(  Main.DevData.Communicate, Byte );
000018  466a              MOV      r2,sp
00001a  f104017d          ADD      r1,r4,#0x7d
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TCommunicate, TSettings::TCommunicate>(T1&, const T2&)
;;;829    }
000024  bd38              POP      {r3-r5,pc}
;;;830    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel19get_calib_parameterEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel19get_calib_parameterEv PROC ; TModel::get_calib_parameter()
;;;729    //----- интерфейс к параметру калибровки --------------------
;;;730    float TModel::get_calib_parameter()
000000  b538              PUSH     {r3-r5,lr}
;;;731    {
000002  4604              MOV      r4,r0
;;;732      float Dest;  
;;;733      access_prot( Dest, Main.DevData.CalibParameter );
000004  f1040273          ADD      r2,r4,#0x73
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_
;;;734      
;;;735      return Dest;
000010  ed9d0a00          VLDR     s0,[sp,#0]
;;;736    }
000014  bd38              POP      {r3-r5,pc}
;;;737    
                          ENDP


                          AREA ||i._ZN6TModel19get_flash_prog_signEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel19get_flash_prog_signEv PROC ; TModel::get_flash_prog_sign()
;;;849    //----- интерфейс к признаку программирования Flash ---------
;;;850    TModel::TIsFlashProg TModel::get_flash_prog_sign()
000000  b538              PUSH     {r3-r5,lr}
;;;851    {
000002  4604              MOV      r4,r0
;;;852      TIsFlashProg Dest;
;;;853      access_prot( Dest, Main.FlashData.IsFlashProg );
000004  f1040584          ADD      r5,r4,#0x84
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  7828              LDRB     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;854      
;;;855      return Dest;
00002e  f89d0000          LDRB     r0,[sp,#0]
;;;856    }
000032  bd38              POP      {r3-r5,pc}
;;;857    
                          ENDP


                          AREA ||i._ZN6TModel19get_roll_bias_angleEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel19get_roll_bias_angleEv PROC ; TModel::get_roll_bias_angle()
;;;1063   //----- интерфейс к настройке смещения крена ----------------
;;;1064   int8_t TModel::get_roll_bias_angle()
000000  b538              PUSH     {r3-r5,lr}
;;;1065   {
000002  4604              MOV      r4,r0
;;;1066     int8_t Dest;
;;;1067     access_prot( Dest, Main.FlashData.AllSets.DevSets.RollBiasAngle );
000004  f1040294          ADD      r2,r4,#0x94
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
;;;1068   
;;;1069     return Dest;
000010  f99d0000          LDRSB    r0,[sp,#0]
;;;1070   }
000014  bd38              POP      {r3-r5,pc}
;;;1071   
                          ENDP


                          AREA ||i._ZN6TModel19set_calib_parameterEf||, CODE, READONLY, ALIGN=1

                  _ZN6TModel19set_calib_parameterEf PROC ; TModel::set_calib_parameter(float)
;;;737    
;;;738    void TModel::set_calib_parameter( float Src )
000000  b531              PUSH     {r0,r4,r5,lr}
;;;739    {
000002  ed2d0b02          VPUSH    {d0}
000006  4604              MOV      r4,r0
;;;740      access_prot( Main.DevData.CalibParameter, Src );
000008  466a              MOV      r2,sp
00000a  f1040173          ADD      r1,r4,#0x73
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_
;;;741    }
000014  bd3e              POP      {r1-r5,pc}
;;;742    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel19set_flash_prog_signERKN9TSettings12TIsFlashProgE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel19set_flash_prog_signERKN9TSettings12TIsFlashProgE PROC ; TModel::set_flash_prog_sign(const TSettings::TIsFlashProg&)
;;;857    
;;;858    void TModel::set_flash_prog_sign( const TIsFlashProg &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;859    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;860      access_prot(  Main.FlashData.IsFlashProg, Src ); //записать в главный буфер в ОЗУ
000006  f1040684          ADD      r6,r4,#0x84
00000a  f8d410b4          LDR      r1,[r4,#0xb4]
00000e  2300              MOVS     r3,#0
000010  1e5a              SUBS     r2,r3,#1
000012  6808              LDR      r0,[r1,#0]
000014  4619              MOV      r1,r3
000016  f7fffffe          BL       xQueueGenericReceive
00001a  7828              LDRB     r0,[r5,#0]
00001c  7030              STRB     r0,[r6,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;861      set_flash_data();                                //записать во Flash
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
;;;862    }
000036  bd70              POP      {r4-r6,pc}
;;;863    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel19set_roll_bias_angleEa||, CODE, READONLY, ALIGN=1

                  _ZN6TModel19set_roll_bias_angleEa PROC ; TModel::set_roll_bias_angle(signed char)
;;;1071   
;;;1072   bool TModel::set_roll_bias_angle( int8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1073   {
000002  4604              MOV      r4,r0
;;;1074     if ( chk_roll_bias_angle( Src ) )
000004  f99d1004          LDRSB    r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings19chk_roll_bias_angleEs ; TSettings::chk_roll_bias_angle(short) const
00000e  b188              CBZ      r0,|L81.52|
;;;1075     {
;;;1076       if ( get_roll_bias_angle() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel19get_roll_bias_angleEv ; TModel::get_roll_bias_angle()
000016  f99d1004          LDRSB    r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L81.48|
;;;1077       {
;;;1078         access_prot( Main.FlashData.AllSets.DevSets.RollBiasAngle, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f1040194          ADD      r1,r4,#0x94
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
;;;1079         set_flash_data();                                                 //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L81.48|
;;;1080       }
;;;1081       else
;;;1082       {
;;;1083         //нет необходимости в перезаписи если новое значение не отличается от старого
;;;1084       }
;;;1085       
;;;1086       return true;
000030  2001              MOVS     r0,#1
                  |L81.50|
;;;1087     }
;;;1088     else
;;;1089     {
;;;1090       return false; //параметр не записан ни в ОЗУ ни во Flash
;;;1091     }
;;;1092   }
000032  bd1c              POP      {r2-r4,pc}
                  |L81.52|
000034  2000              MOVS     r0,#0                 ;1090
000036  e7fc              B        |L81.50|
;;;1093   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel20get_accel_calib_dataERN9TSettings11TAccCalDataE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20get_accel_calib_dataERN9TSettings11TAccCalDataE PROC ; TModel::get_accel_calib_data(TSettings::TAccCalData&)
;;;1330   //----- интерфейс к калибровочным данным акселерометра ------
;;;1331   void TModel::get_accel_calib_data( TAccCalData &Dest )
000000  b570              PUSH     {r4-r6,lr}
;;;1332   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1333     access_prot( Dest, Main.FlashData.AccCalData );
000006  f104029c          ADD      r2,r4,#0x9c
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TAccCalData, TSettings::TAccCalData>(T1&, const T2&)
;;;1334   }
000012  bd70              POP      {r4-r6,pc}
;;;1335   
                          ENDP


                          AREA ||i._ZN6TModel20get_accel_calib_signEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20get_accel_calib_signEv PROC ; TModel::get_accel_calib_sign()
;;;865    //----- интерфейс к признаку калибровки акселерометра -------
;;;866    TModel::TIsAccCalib TModel::get_accel_calib_sign()
000000  b538              PUSH     {r3-r5,lr}
;;;867    {
000002  4604              MOV      r4,r0
;;;868      TIsAccCalib Dest;
;;;869      access_prot( Dest, Main.FlashData.IsAccCalib );
000004  f1040585          ADD      r5,r4,#0x85
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  7828              LDRB     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;870      
;;;871      return Dest;
00002e  f89d0000          LDRB     r0,[sp,#0]
;;;872    }
000032  bd38              POP      {r3-r5,pc}
;;;873    
                          ENDP


                          AREA ||i._ZN6TModel20get_communicate_byteEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20get_communicate_byteEv PROC ; TModel::get_communicate_byte()
;;;783    //----- интерфейс к командному байту связи устройств --------
;;;784    TModel::TCommunicate TModel::get_communicate_byte()
000000  b538              PUSH     {r3-r5,lr}
;;;785    {
000002  4604              MOV      r4,r0
;;;786      TCommunicate Dest;
;;;787      access_prot( Dest, Main.DevData.Communicate );
000004  f104027d          ADD      r2,r4,#0x7d
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TCommunicate, TSettings::TCommunicate>(T1&, const T2&)
;;;788      
;;;789      return Dest;
000010  f89d1000          LDRB     r1,[sp,#0]
000014  4608              MOV      r0,r1
;;;790    }
000016  bd38              POP      {r3-r5,pc}
;;;791    
                          ENDP


                          AREA ||i._ZN6TModel20get_pitch_bias_angleEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20get_pitch_bias_angleEv PROC ; TModel::get_pitch_bias_angle()
;;;1095   //----- интерфейс к настройке смещения тангажа --------------
;;;1096   int8_t TModel::get_pitch_bias_angle()
000000  b538              PUSH     {r3-r5,lr}
;;;1097   {
000002  4604              MOV      r4,r0
;;;1098     int8_t Dest;
;;;1099         
;;;1100     access_prot( Dest, Main.FlashData.AllSets.DevSets.PitchBiasAngle );
000004  f1040295          ADD      r2,r4,#0x95
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
;;;1101   
;;;1102     return Dest;
000010  f99d0000          LDRSB    r0,[sp,#0]
;;;1103   }
000014  bd38              POP      {r3-r5,pc}
;;;1104   
                          ENDP


                          AREA ||i._ZN6TModel20get_sens_axis_rotateEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20get_sens_axis_rotateEv PROC ; TModel::get_sens_axis_rotate()
;;;427    //----- интерфейс к повороту оси платы датчика --------------
;;;428    uint8_t TModel::get_sens_axis_rotate()
000000  b538              PUSH     {r3-r5,lr}
;;;429    {
000002  4604              MOV      r4,r0
;;;430      uint8_t Dest;
;;;431      
;;;432      access_prot( Dest, Main.FlashData.AllSets.DevSets.SensAxisRotate );
000004  f1040293          ADD      r2,r4,#0x93
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;433      
;;;434      return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;435    }
000014  bd38              POP      {r3-r5,pc}
;;;436    
                          ENDP


                          AREA ||i._ZN6TModel20set_accel_calib_dataERKN9TSettings11TAccCalDataE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20set_accel_calib_dataERKN9TSettings11TAccCalDataE PROC ; TModel::set_accel_calib_data(const TSettings::TAccCalData&)
;;;1335   
;;;1336   void TModel::set_accel_calib_data( const TAccCalData &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;1337   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1338     access_prot(  Main.FlashData.AccCalData, Src ); //записать в главный буфер в ОЗУ
000006  462a              MOV      r2,r5
000008  f104019c          ADD      r1,r4,#0x9c
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TAccCalData, TSettings::TAccCalData>(T1&, const T2&)
;;;1339     set_flash_data();                               //записать во Flash
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
;;;1340   }
000018  bd70              POP      {r4-r6,pc}
;;;1341   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel20set_accel_calib_signERKN9TSettings11TIsAccCalibE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20set_accel_calib_signERKN9TSettings11TIsAccCalibE PROC ; TModel::set_accel_calib_sign(const TSettings::TIsAccCalib&)
;;;873    
;;;874    void TModel::set_accel_calib_sign( const TIsAccCalib &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;875    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;876      access_prot(  Main.FlashData.IsAccCalib, Src ); //записать в главный буфер в ОЗУ
000006  f1040685          ADD      r6,r4,#0x85
00000a  f8d410b4          LDR      r1,[r4,#0xb4]
00000e  2300              MOVS     r3,#0
000010  1e5a              SUBS     r2,r3,#1
000012  6808              LDR      r0,[r1,#0]
000014  4619              MOV      r1,r3
000016  f7fffffe          BL       xQueueGenericReceive
00001a  7828              LDRB     r0,[r5,#0]
00001c  7030              STRB     r0,[r6,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;877      set_flash_data();                               //записать во Flash
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
;;;878    }
000036  bd70              POP      {r4-r6,pc}
;;;879    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel20set_communicate_byteEN9TSettings12TCommunicateE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20set_communicate_byteEN9TSettings12TCommunicateE PROC ; TModel::set_communicate_byte(TSettings::TCommunicate)
;;;791    
;;;792    void TModel::set_communicate_byte( TCommunicate Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;793    {
000002  4604              MOV      r4,r0
;;;794      access_prot(  Main.DevData.Communicate, Src );
000004  aa01              ADD      r2,sp,#4
000006  f104017d          ADD      r1,r4,#0x7d
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TCommunicate, TSettings::TCommunicate>(T1&, const T2&)
;;;795    }
000010  bd1c              POP      {r2-r4,pc}
;;;796    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel20set_pitch_bias_angleEa||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20set_pitch_bias_angleEa PROC ; TModel::set_pitch_bias_angle(signed char)
;;;1104   
;;;1105   bool TModel::set_pitch_bias_angle( int8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1106   {
000002  4604              MOV      r4,r0
;;;1107     if ( chk_pitch_bias_angle( Src ) )
000004  f99d1004          LDRSB    r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings20chk_pitch_bias_angleEs ; TSettings::chk_pitch_bias_angle(short) const
00000e  b188              CBZ      r0,|L90.52|
;;;1108     {
;;;1109       if ( get_pitch_bias_angle() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel20get_pitch_bias_angleEv ; TModel::get_pitch_bias_angle()
000016  f99d1004          LDRSB    r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L90.48|
;;;1110       {
;;;1111         access_prot( Main.FlashData.AllSets.DevSets.PitchBiasAngle, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f1040195          ADD      r1,r4,#0x95
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
;;;1112         set_flash_data();                                                  //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L90.48|
;;;1113       }
;;;1114       else
;;;1115       {
;;;1116         //нет необходимости в перезаписи если новое значение не отличается от старого
;;;1117       }
;;;1118       
;;;1119       return true;
000030  2001              MOVS     r0,#1
                  |L90.50|
;;;1120     }
;;;1121     else
;;;1122     {
;;;1123       return false; //параметр не записан ни в ОЗУ ни во Flash
;;;1124     }
;;;1125   }
000032  bd1c              POP      {r2-r4,pc}
                  |L90.52|
000034  2000              MOVS     r0,#0                 ;1123
000036  e7fc              B        |L90.50|
;;;1126   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel20set_sens_axis_rotateEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel20set_sens_axis_rotateEh PROC ; TModel::set_sens_axis_rotate(unsigned char)
;;;436    
;;;437    bool TModel::set_sens_axis_rotate( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;438    {
000002  4604              MOV      r4,r0
;;;439      if ( chk_axis_rotate( Src ) )
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings15chk_axis_rotateEs ; TSettings::chk_axis_rotate(short) const
00000e  b188              CBZ      r0,|L91.52|
;;;440      {
;;;441        if ( get_sens_axis_rotate() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel20get_sens_axis_rotateEv ; TModel::get_sens_axis_rotate()
000016  f89d1004          LDRB     r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L91.48|
;;;442        {
;;;443          access_prot( Main.FlashData.AllSets.DevSets.SensAxisRotate, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f1040193          ADD      r1,r4,#0x93
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;444          set_flash_data();                                                  //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L91.48|
;;;445        }
;;;446        else
;;;447        {
;;;448          //нет необходимости в перезаписи если новое значение не отличается от старого
;;;449        }
;;;450        
;;;451        return true;
000030  2001              MOVS     r0,#1
                  |L91.50|
;;;452      }
;;;453      else
;;;454      {
;;;455        return false; //параметр не записан ни в ОЗУ ни во Flash
;;;456      }
;;;457    }
000032  bd1c              POP      {r2-r4,pc}
                  |L91.52|
000034  2000              MOVS     r0,#0                 ;455
000036  e7fc              B        |L91.50|
;;;458    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel21get_sample_valid_signEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel21get_sample_valid_signEv PROC ; TModel::get_sample_valid_sign()
;;;798    //----- интерфейс к признаку валидности текущей выборки -----
;;;799    TModel::TValidSign TModel::get_sample_valid_sign()
000000  b538              PUSH     {r3-r5,lr}
;;;800    {
000002  4604              MOV      r4,r0
;;;801      TCommunicate Dest = get_communicate_byte();
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN6TModel20get_communicate_byteEv ; TModel::get_communicate_byte()
00000a  9000              STR      r0,[sp,#0]
;;;802      
;;;803      return Dest.SampleValidSign;
00000c  f89d0000          LDRB     r0,[sp,#0]
000010  f0000001          AND      r0,r0,#1
;;;804    }
000014  bd38              POP      {r3-r5,pc}
;;;805    
                          ENDP


                          AREA ||i._ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE PROC ; TModel::set_sample_valid_sign(TSettings::TValidSign)
;;;805    
;;;806    void TModel::set_sample_valid_sign( TValidSign Src )
000000  b538              PUSH     {r3-r5,lr}
;;;807    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;808      TCommunicate Byte = get_communicate_byte();
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       _ZN6TModel20get_communicate_byteEv ; TModel::get_communicate_byte()
00000c  9000              STR      r0,[sp,#0]
;;;809      Byte.SampleValidSign = Src;
00000e  f89d0000          LDRB     r0,[sp,#0]
000012  f3650000          BFI      r0,r5,#0,#1
000016  9000              STR      r0,[sp,#0]
;;;810      
;;;811      access_prot(  Main.DevData.Communicate, Byte );
000018  466a              MOV      r2,sp
00001a  f104017d          ADD      r1,r4,#0x7d
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       _ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_ ; void TModel::access_prot<TSettings::TCommunicate, TSettings::TCommunicate>(T1&, const T2&)
;;;812    }
000024  bd38              POP      {r3-r5,pc}
;;;813    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel22clr_calib_position_ctrENS_11TMemsOrientE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel22clr_calib_position_ctrENS_11TMemsOrientE PROC ; TModel::clr_calib_position_ctr(TModel::TMemsOrient)
;;;703    
;;;704    void TModel::clr_calib_position_ctr( TMemsOrient Src )
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;705    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;706      uint8_t Ctr = static_cast<uint8_t>(Src); 
000008  462e              MOV      r6,r5
;;;707      uint32_t Res = get_calib_position_ctr();
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel22get_calib_position_ctrEv ; TModel::get_calib_position_ctr()
000010  9000              STR      r0,[sp,#0]
;;;708      uint32_t Tmp = Res;
000012  9f00              LDR      r7,[sp,#0]
;;;709      
;;;710      uint32_t Mask = 1U;
000014  f04f0801          MOV      r8,#1
;;;711      for ( ; Ctr > 0U ; --Ctr)
000018  e008              B        |L94.44|
                  |L94.26|
;;;712      {
;;;713        Tmp  /= 10U;
00001a  200a              MOVS     r0,#0xa
00001c  fbb7f7f0          UDIV     r7,r7,r0
;;;714        Mask *= 10U;
000020  eb080088          ADD      r0,r8,r8,LSL #2
000024  ea4f0840          LSL      r8,r0,#1
000028  1e70              SUBS     r0,r6,#1              ;711
00002a  b2c6              UXTB     r6,r0                 ;711
                  |L94.44|
00002c  2e00              CMP      r6,#0                 ;711
00002e  d1f4              BNE      |L94.26|
;;;715      }
;;;716      
;;;717      if ( Tmp % 2U == true ) //если нечетное
000030  f0070001          AND      r0,r7,#1
000034  b940              CBNZ     r0,|L94.72|
;;;718      {
;;;719        //сбрасывать не надо
;;;720      }
;;;721      else
;;;722      {
;;;723        Res += Mask;
000036  9800              LDR      r0,[sp,#0]
000038  4440              ADD      r0,r0,r8
00003a  9000              STR      r0,[sp,#0]
;;;724        access_prot( Main.DevData.CalibPositionCtr, Res );
00003c  466a              MOV      r2,sp
00003e  f104016f          ADD      r1,r4,#0x6f
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       _ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_
                  |L94.72|
;;;725      } 
;;;726    }
000048  e8bd83f8          POP      {r3-r9,pc}
;;;727    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel22get_authorize_item_ptrEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel22get_authorize_item_ptrEv PROC ; TModel::get_authorize_item_ptr()
;;;771    //----- интерфейс к типу авторизации, запрашиваемому пользователем
;;;772    const TModel::TAuthorize *TModel::get_authorize_item_ptr()
000000  4601              MOV      r1,r0
;;;773    {
;;;774      return static_cast<const TAuthorize *>( Main.DevData.AuthorizeItemPtr );
000002  f8d10079          LDR      r0,[r1,#0x79]
;;;775    }
000006  4770              BX       lr
;;;776                        
                          ENDP


                          AREA ||i._ZN6TModel22get_calib_position_ctrEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel22get_calib_position_ctrEv PROC ; TModel::get_calib_position_ctr()
;;;673    //----- интерфейс к счетчику калибровочных положений --------
;;;674    uint32_t TModel::get_calib_position_ctr()
000000  b570              PUSH     {r4-r6,lr}
;;;675    {
000002  4604              MOV      r4,r0
;;;676      uint32_t Dest;  
;;;677      access_prot( Dest, Main.DevData.CalibPositionCtr );
000004  f104056f          ADD      r5,r4,#0x6f
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  682e              LDR      r6,[r5,#0]
00001a  f8d410b4          LDR      r1,[r4,#0xb4]
00001e  2300              MOVS     r3,#0
000020  461a              MOV      r2,r3
000022  6808              LDR      r0,[r1,#0]
000024  4619              MOV      r1,r3
000026  f7fffffe          BL       xQueueGenericSend
00002a  bf00              NOP      
;;;678      
;;;679      return Dest;
00002c  4630              MOV      r0,r6
;;;680    }
00002e  bd70              POP      {r4-r6,pc}
;;;681    
                          ENDP


                          AREA ||i._ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE PROC ; TModel::set_authorize_item_ptr(const TModel::TAuthorize*)
;;;776                        
;;;777    void TModel::set_authorize_item_ptr( const TAuthorize *Src )
000000  f8c01079          STR      r1,[r0,#0x79]
;;;778    {
;;;779      Main.DevData.AuthorizeItemPtr = static_cast<const void *>( Src );
;;;780    }      
000004  4770              BX       lr
;;;781    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel22set_calib_position_ctrENS_11TMemsOrientE||, CODE, READONLY, ALIGN=2

                  _ZN6TModel22set_calib_position_ctrENS_11TMemsOrientE PROC ; TModel::set_calib_position_ctr(TModel::TMemsOrient)
;;;681    
;;;682    void TModel::set_calib_position_ctr( TMemsOrient Src )
000000  b5f8              PUSH     {r3-r7,lr}
;;;683    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;684      //поразрядное преобразование
;;;685      if ( Src == TMemsOrient::_RESET )
000006  2d37              CMP      r5,#0x37
000008  d108              BNE      |L98.28|
;;;686      {
;;;687        access_prot( Main.DevData.CalibPositionCtr, 111111U );
00000a  4812              LDR      r0,|L98.84|
00000c  466a              MOV      r2,sp
00000e  f104016f          ADD      r1,r4,#0x6f
000012  9000              STR      r0,[sp,#0]
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_
;;;688      }
00001a  e019              B        |L98.80|
                  |L98.28|
;;;689      else
;;;690      {
;;;691        uint32_t Res = 1U; 
00001c  2001              MOVS     r0,#1
00001e  9000              STR      r0,[sp,#0]
;;;692        uint8_t Ctr = static_cast<uint8_t>(Src);   
000020  462e              MOV      r6,r5
;;;693        
;;;694        for ( ; Ctr > 0U ; --Ctr)
000022  e006              B        |L98.50|
                  |L98.36|
;;;695        {
;;;696          Res *= 10U;
000024  9800              LDR      r0,[sp,#0]
000026  eb000080          ADD      r0,r0,r0,LSL #2
00002a  0040              LSLS     r0,r0,#1
00002c  9000              STR      r0,[sp,#0]
00002e  1e70              SUBS     r0,r6,#1              ;694
000030  b2c6              UXTB     r6,r0                 ;694
                  |L98.50|
000032  2e00              CMP      r6,#0                 ;694
000034  d1f6              BNE      |L98.36|
;;;697        }
;;;698        Res = get_calib_position_ctr() - Res;
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       _ZN6TModel22get_calib_position_ctrEv ; TModel::get_calib_position_ctr()
00003c  9900              LDR      r1,[sp,#0]
00003e  1a40              SUBS     r0,r0,r1
000040  9000              STR      r0,[sp,#0]
;;;699        
;;;700        access_prot( Main.DevData.CalibPositionCtr, Res );
000042  466a              MOV      r2,sp
000044  f104016f          ADD      r1,r4,#0x6f
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       _ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_
;;;701      }  
00004e  bf00              NOP      
                  |L98.80|
;;;702    }
000050  bdf8              POP      {r3-r7,pc}
;;;703    
                          ENDP

000052  0000              DCW      0x0000
                  |L98.84|
                          DCD      0x0001b207

                          AREA ||i._ZN6TModel24get_sens_buf_axis_rotateEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel24get_sens_buf_axis_rotateEv PROC ; TModel::get_sens_buf_axis_rotate()
;;;460    //----- интерфейс к буферному значению поворота оси платы датчика
;;;461    uint8_t TModel::get_sens_buf_axis_rotate()
000000  b538              PUSH     {r3-r5,lr}
;;;462    {
000002  4604              MOV      r4,r0
;;;463      uint8_t Dest;
;;;464      
;;;465      access_prot( Dest, Main.DevData.Sens.BufAxisRotate );
000004  f104025e          ADD      r2,r4,#0x5e
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;466      
;;;467      return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;468    }
000014  bd38              POP      {r3-r5,pc}
;;;469    
                          ENDP


                          AREA ||i._ZN6TModel24get_sens_roll_bias_angleEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel24get_sens_roll_bias_angleEv PROC ; TModel::get_sens_roll_bias_angle()
;;;485    //----- интерфейс к настройке смещения крена платы датчика --
;;;486    int8_t TModel::get_sens_roll_bias_angle()
000000  b538              PUSH     {r3-r5,lr}
;;;487    {
000002  4604              MOV      r4,r0
;;;488      int8_t Dest;
;;;489      
;;;490      access_prot( Dest, Main.DevData.Sens.RollBiasAngle );
000004  f104025f          ADD      r2,r4,#0x5f
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
;;;491      
;;;492      return Dest;
000010  f99d0000          LDRSB    r0,[sp,#0]
;;;493    }
000014  bd38              POP      {r3-r5,pc}
;;;494    
                          ENDP


                          AREA ||i._ZN6TModel24set_sens_buf_axis_rotateEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel24set_sens_buf_axis_rotateEh PROC ; TModel::set_sens_buf_axis_rotate(unsigned char)
;;;469    
;;;470    bool TModel::set_sens_buf_axis_rotate( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;471    {  
000002  4604              MOV      r4,r0
;;;472      if ( chk_axis_rotate( Src ) )
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings15chk_axis_rotateEs ; TSettings::chk_axis_rotate(short) const
00000e  b138              CBZ      r0,|L101.32|
;;;473      {
;;;474        access_prot(  Main.DevData.Sens.BufAxisRotate, Src );
000010  aa01              ADD      r2,sp,#4
000012  f104015e          ADD      r1,r4,#0x5e
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;475        
;;;476        return true;
00001c  2001              MOVS     r0,#1
                  |L101.30|
;;;477      }
;;;478      else
;;;479      {
;;;480        return false;
;;;481      }
;;;482    }
00001e  bd1c              POP      {r2-r4,pc}
                  |L101.32|
000020  2000              MOVS     r0,#0                 ;480
000022  e7fc              B        |L101.30|
;;;483    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel24set_sens_roll_bias_angleEa||, CODE, READONLY, ALIGN=1

                  _ZN6TModel24set_sens_roll_bias_angleEa PROC ; TModel::set_sens_roll_bias_angle(signed char)
;;;494    
;;;495    void TModel::set_sens_roll_bias_angle( int8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;496    {
000002  4604              MOV      r4,r0
;;;497      access_prot(  Main.DevData.Sens.RollBiasAngle, Src );
000004  aa01              ADD      r2,sp,#4
000006  f104015f          ADD      r1,r4,#0x5f
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
;;;498    }
000010  bd1c              POP      {r2-r4,pc}
;;;499    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel25get_sens_pitch_bias_angleEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel25get_sens_pitch_bias_angleEv PROC ; TModel::get_sens_pitch_bias_angle()
;;;501    //----- интерфейс к настройке смещения тангажа платы датчика
;;;502    int8_t TModel::get_sens_pitch_bias_angle()
000000  b538              PUSH     {r3-r5,lr}
;;;503    {
000002  4604              MOV      r4,r0
;;;504      int8_t Dest;
;;;505      
;;;506      access_prot( Dest, Main.DevData.Sens.PitchBiasAngle );
000004  f1040260          ADD      r2,r4,#0x60
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
;;;507      
;;;508      return Dest;
000010  f99d0000          LDRSB    r0,[sp,#0]
;;;509    }
000014  bd38              POP      {r3-r5,pc}
;;;510    
                          ENDP


                          AREA ||i._ZN6TModel25set_sens_pitch_bias_angleEa||, CODE, READONLY, ALIGN=1

                  _ZN6TModel25set_sens_pitch_bias_angleEa PROC ; TModel::set_sens_pitch_bias_angle(signed char)
;;;510    
;;;511    void TModel::set_sens_pitch_bias_angle( int8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;512    {
000002  4604              MOV      r4,r0
;;;513      access_prot(  Main.DevData.Sens.PitchBiasAngle, Src );
000004  aa01              ADD      r2,sp,#4
000006  f1040160          ADD      r1,r4,#0x60
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
;;;514    }
000010  bd1c              POP      {r2-r4,pc}
;;;515    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel26get_sens_sample_valid_signEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel26get_sens_sample_valid_signEv PROC ; TModel::get_sens_sample_valid_sign()
;;;411    //----- интерфейс к валидности текущего окна выборок датчика
;;;412    TModel::TValidSign TModel::get_sens_sample_valid_sign()
000000  b538              PUSH     {r3-r5,lr}
;;;413    {
000002  4604              MOV      r4,r0
;;;414      TValidSign Dest;
;;;415      
;;;416      access_prot( Dest, Main.DevData.Sens.SampleValidSign );
000004  f104055d          ADD      r5,r4,#0x5d
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  7828              LDRB     r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
00002c  bf00              NOP      
;;;417      
;;;418      return Dest;
00002e  f89d0000          LDRB     r0,[sp,#0]
;;;419    }
000032  bd38              POP      {r3-r5,pc}
;;;420    
                          ENDP


                          AREA ||i._ZN6TModel26get_u_baud_rate_bit_to_secEv||, CODE, READONLY, ALIGN=2

                  _ZN6TModel26get_u_baud_rate_bit_to_secEv PROC ; TModel::get_u_baud_rate_bit_to_sec()
;;;1226   
;;;1227   uint32_t TModel::get_u_baud_rate_bit_to_sec()
000000  b510              PUSH     {r4,lr}
;;;1228   {
000002  b08c              SUB      sp,sp,#0x30
000004  4604              MOV      r4,r0
;;;1229     uint8_t Dest;
;;;1230     access_prot( Dest, Main.FlashData.AllSets.If.USpeed );
000006  f104029a          ADD      r2,r4,#0x9a
00000a  a90b              ADD      r1,sp,#0x2c
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;1231     
;;;1232     uint32_t BitToSec[] = 
000012  2228              MOVS     r2,#0x28
000014  4905              LDR      r1,|L106.44|
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       __aeabi_memcpy4
;;;1233     {
;;;1234         1200U, //0
;;;1235         2400U, //1
;;;1236         4800U, //2
;;;1237         9600U, //3
;;;1238        14400U, //4
;;;1239        19200U, //5
;;;1240        38400U, //6
;;;1241        56000U, //7
;;;1242        57600U, //8
;;;1243       115200U, //9
;;;1244     };
;;;1245     
;;;1246     return BitToSec[ Dest ];
00001c  a801              ADD      r0,sp,#4
00001e  f89d102c          LDRB     r1,[sp,#0x2c]
000022  f8500021          LDR      r0,[r0,r1,LSL #2]
;;;1247   };
000026  b00c              ADD      sp,sp,#0x30
000028  bd10              POP      {r4,pc}
;;;1248   
                          ENDP

00002a  0000              DCW      0x0000
                  |L106.44|
                          DCD      ||.constdata||+0x74

                          AREA ||i._ZN6TModel26set_sens_sample_valid_signEN9TSettings10TValidSignE||, CODE, READONLY, ALIGN=1

                  _ZN6TModel26set_sens_sample_valid_signEN9TSettings10TValidSignE PROC ; TModel::set_sens_sample_valid_sign(TSettings::TValidSign)
;;;420    
;;;421    void TModel::set_sens_sample_valid_sign( TValidSign Src )
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;422    {
000002  4604              MOV      r4,r0
;;;423      access_prot(  Main.DevData.Sens.SampleValidSign, Src );
000004  f104055d          ADD      r5,r4,#0x5d
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
000018  f89d0004          LDRB     r0,[sp,#4]
00001c  7028              STRB     r0,[r5,#0]
00001e  f8d410b4          LDR      r1,[r4,#0xb4]
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  6808              LDR      r0,[r1,#0]
000028  4619              MOV      r1,r3
00002a  f7fffffe          BL       xQueueGenericSend
00002e  bf00              NOP      
;;;424    }
000030  bd7c              POP      {r2-r6,pc}
;;;425    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel7get_thrEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel7get_thrEv PROC ; TModel::get_thr()
;;;935    //----- интерфейс к настройке порога срабатывания по углу ---
;;;936    uint8_t TModel::get_thr()
000000  b538              PUSH     {r3-r5,lr}
;;;937    {
000002  4604              MOV      r4,r0
;;;938      uint8_t Dest;
;;;939      access_prot( Dest, Main.FlashData.AllSets.DevSets.Thr );
000004  f104028f          ADD      r2,r4,#0x8f
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;940    
;;;941      return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;942    }
000014  bd38              POP      {r3-r5,pc}
;;;943    
                          ENDP


                          AREA ||i._ZN6TModel7set_thrEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel7set_thrEh PROC ; TModel::set_thr(unsigned char)
;;;943    
;;;944    bool TModel::set_thr( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;945    {
000002  4604              MOV      r4,r0
;;;946      if ( chk_thr( Src ) )
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings7chk_thrEs ; TSettings::chk_thr(short) const
00000e  b188              CBZ      r0,|L109.52|
;;;947      {
;;;948        if ( get_thr() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel7get_thrEv ; TModel::get_thr()
000016  f89d1004          LDRB     r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L109.48|
;;;949        {
;;;950          access_prot( Main.FlashData.AllSets.DevSets.Thr, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f104018f          ADD      r1,r4,#0x8f
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;951          set_flash_data();                                       //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L109.48|
;;;952        }
;;;953        else
;;;954        {
;;;955          //нет необходимости в перезаписи если новое значение не отличается от старого
;;;956        }
;;;957           
;;;958        return true;
000030  2001              MOVS     r0,#1
                  |L109.50|
;;;959      }
;;;960      else
;;;961      {
;;;962        return false; //параметр не записан ни в ОЗУ ни во Flash
;;;963      }
;;;964    }
000032  bd1c              POP      {r2-r4,pc}
                  |L109.52|
000034  2000              MOVS     r0,#0                 ;962
000036  e7fc              B        |L109.50|
;;;965    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel8get_biasEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel8get_biasEv PROC ; TModel::get_bias()
;;;999    //----- интерфейс к настройке смещения ----------------------
;;;1000   int8_t TModel::get_bias()
000000  b538              PUSH     {r3-r5,lr}
;;;1001   {
000002  4604              MOV      r4,r0
;;;1002     int8_t Dest;
;;;1003     access_prot( Dest, Main.FlashData.AllSets.DevSets.Bias );
000004  f1040291          ADD      r2,r4,#0x91
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_
;;;1004   
;;;1005     return Dest;
000010  f99d0000          LDRSB    r0,[sp,#0]
;;;1006   }
000014  bd38              POP      {r3-r5,pc}
;;;1007   
                          ENDP


                          AREA ||i._ZN6TModel8get_hystEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel8get_hystEv PROC ; TModel::get_hyst()
;;;967    //----- интерфейс к настройке гистерезиса срабатывания ------
;;;968    uint8_t TModel::get_hyst()
000000  b538              PUSH     {r3-r5,lr}
;;;969    {
000002  4604              MOV      r4,r0
;;;970      uint8_t Dest;
;;;971      access_prot( Dest, Main.FlashData.AllSets.DevSets.Hyst );
000004  f1040290          ADD      r2,r4,#0x90
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;972    
;;;973      return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;974    }
000014  bd38              POP      {r3-r5,pc}
;;;975    
                          ENDP


                          AREA ||i._ZN6TModel8get_setsER10MySettings||, CODE, READONLY, ALIGN=1

                  _ZN6TModel8get_setsER10MySettings PROC ; TModel::get_sets(MySettings&)
;;;1304   //----- интерфейс к настройкам ------------------------------
;;;1305   void TModel::get_sets( MySettings &Dest )
000000  b570              PUSH     {r4-r6,lr}
;;;1306   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1307     access_prot( Dest, Main.FlashData.AllSets );
000006  f1040286          ADD      r2,r4,#0x86
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_ ; void TModel::access_prot<MySettings, MySettings>(T1&, const T2&)
;;;1308   }
000012  bd70              POP      {r4-r6,pc}
;;;1309   
                          ENDP


                          AREA ||i._ZN6TModel8set_biasEa||, CODE, READONLY, ALIGN=1

                  _ZN6TModel8set_biasEa PROC ; TModel::set_bias(signed char)
;;;1007   
;;;1008   bool TModel::set_bias( int8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1009   {
000002  4604              MOV      r4,r0
;;;1010     if ( chk_bias( Src ) )
000004  f99d1004          LDRSB    r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings8chk_biasEs ; TSettings::chk_bias(short) const
00000e  b188              CBZ      r0,|L113.52|
;;;1011     {
;;;1012       if ( get_bias() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel8get_biasEv ; TModel::get_bias()
000016  f99d1004          LDRSB    r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L113.48|
;;;1013       {
;;;1014         access_prot( Main.FlashData.AllSets.DevSets.Bias, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f1040191          ADD      r1,r4,#0x91
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_
;;;1015         set_flash_data();                                        //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L113.48|
;;;1016       }
;;;1017       else
;;;1018       {
;;;1019         //нет необходимости в перезаписи если новое значение не отличается от старого
;;;1020       }
;;;1021       
;;;1022       return true;
000030  2001              MOVS     r0,#1
                  |L113.50|
;;;1023     }
;;;1024     else
;;;1025     {
;;;1026       return false; //параметр не записан ни в ОЗУ ни во Flash
;;;1027     }
;;;1028   }
000032  bd1c              POP      {r2-r4,pc}
                  |L113.52|
000034  2000              MOVS     r0,#0                 ;1026
000036  e7fc              B        |L113.50|
;;;1029   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel8set_hystEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel8set_hystEh PROC ; TModel::set_hyst(unsigned char)
;;;975    
;;;976    bool TModel::set_hyst( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;977    {
000002  4604              MOV      r4,r0
;;;978      if ( chk_hyst( Src ) )
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings8chk_hystEs ; TSettings::chk_hyst(short) const
00000e  b188              CBZ      r0,|L114.52|
;;;979      {
;;;980        if ( get_hyst() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel8get_hystEv ; TModel::get_hyst()
000016  f89d1004          LDRB     r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L114.48|
;;;981        {
;;;982          access_prot( Main.FlashData.AllSets.DevSets.Hyst, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f1040190          ADD      r1,r4,#0x90
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;983          set_flash_data();                                        //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L114.48|
;;;984        }
;;;985        else
;;;986        {
;;;987          //нет необходимости в перезаписи если новое значение не отличается от старого
;;;988        }
;;;989            
;;;990        return true;
000030  2001              MOVS     r0,#1
                  |L114.50|
;;;991      }
;;;992      else
;;;993      {
;;;994        return false; //параметр не записан ни в ОЗУ ни во Flash
;;;995      }
;;;996    }
000032  bd1c              POP      {r2-r4,pc}
                  |L114.52|
000034  2000              MOVS     r0,#0                 ;994
000036  e7fc              B        |L114.50|
;;;997    //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel8set_setsERK10MySettings||, CODE, READONLY, ALIGN=1

                  _ZN6TModel8set_setsERK10MySettings PROC ; TModel::set_sets(const MySettings&)
;;;1309   
;;;1310   void TModel::set_sets( const MySettings &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;1311   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1312     access_prot(  Main.FlashData.AllSets, Src ); //записать в главный буфер в ОЗУ
000006  462a              MOV      r2,r5
000008  f1040186          ADD      r1,r4,#0x86
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_ ; void TModel::access_prot<MySettings, MySettings>(T1&, const T2&)
;;;1313     set_flash_data();                            //записать во Flash
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
;;;1314   }
000018  bd70              POP      {r4-r6,pc}
;;;1315   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModel9get_u_parEv||, CODE, READONLY, ALIGN=1

                  _ZN6TModel9get_u_parEv PROC ; TModel::get_u_par()
;;;1272   //----- интерфейс к четности и стоп-битам в USART -----------
;;;1273   uint8_t TModel::get_u_par()
000000  b538              PUSH     {r3-r5,lr}
;;;1274   {
000002  4604              MOV      r4,r0
;;;1275     uint8_t Dest;
;;;1276     access_prot( Dest, Main.FlashData.AllSets.If.UPar );
000004  f104029b          ADD      r2,r4,#0x9b
000008  4669              MOV      r1,sp
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_
;;;1277   
;;;1278     return Dest;
000010  f89d0000          LDRB     r0,[sp,#0]
;;;1279   }
000014  bd38              POP      {r3-r5,pc}
;;;1280   
                          ENDP


                          AREA ||i._ZN6TModel9set_u_parEh||, CODE, READONLY, ALIGN=1

                  _ZN6TModel9set_u_parEh PROC ; TModel::set_u_par(unsigned char)
;;;1280   
;;;1281   bool TModel::set_u_par( uint8_t Src )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;1282   {
000002  4604              MOV      r4,r0
;;;1283     if ( chk_u_par( Src ) )
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZNK9TSettings9chk_u_parEs ; TSettings::chk_u_par(short) const
00000e  b188              CBZ      r0,|L117.52|
;;;1284     {
;;;1285       if ( get_u_par() != Src )
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       _ZN6TModel9get_u_parEv ; TModel::get_u_par()
000016  f89d1004          LDRB     r1,[sp,#4]
00001a  4288              CMP      r0,r1
00001c  d008              BEQ      |L117.48|
;;;1286       {
;;;1287         access_prot( Main.FlashData.AllSets.If.UPar, Src ); //записать в главный буфер в ОЗУ
00001e  aa01              ADD      r2,sp,#4
000020  f104019b          ADD      r1,r4,#0x9b
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_
;;;1288         set_flash_data();                                   //записать во Flash
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZN6TModel14set_flash_dataEv ; TModel::set_flash_data()
                  |L117.48|
;;;1289       }
;;;1290       else
;;;1291       {
;;;1292         //нет необходимости в перезаписи если новое значение не отличается от старого
;;;1293       }
;;;1294       
;;;1295       return true;
000030  2001              MOVS     r0,#1
                  |L117.50|
;;;1296     }
;;;1297     else
;;;1298     {
;;;1299       return false; //параметр не записан ни в ОЗУ ни во Flash
;;;1300     }
;;;1301   }
000032  bd1c              POP      {r2-r4,pc}
                  |L117.52|
000034  2000              MOVS     r0,#0                 ;1299
000036  e7fc              B        |L117.50|
;;;1302   //-----------------------------------------------------------
                          ENDP


                          AREA ||i._ZN6TModelC1ERPv||, CODE, READONLY, ALIGN=2

                  _ZN6TModelC2ERPv                  ; Alternate entry point ; TModel::TModel__sub_object(void*&)
                  _ZN6TModelC1ERPv PROC ; TModel::TModel(void*&)
;;;36     
;;;37     TModel::TModel( SemaphoreHandle_t &MainMut )
;;;38     :
;;;39     Mut( MainMut )
;;;40     {
;;;41       TFlashData FlashData;
;;;42       
;;;43       uint16_t FLASH_DATA_SIZE = sizeof (TFlashData);
;;;44       
;;;45       Flash.get_sets(
;;;46                      reinterpret_cast<uint8_t *>(&FlashData),
;;;47                      FLASH_DATA_SIZE
;;;48                     );
;;;49       //проверка признака программирования Flash
;;;50       if ( FlashData.IsFlashProg == TIsFlashProg::_PROGRAMMED ) //если Flash ранее программировалась
;;;51       {
;;;52         Main.FlashData = FlashData; //записать данные, хранящиеся во Flash в главный буфер программы
;;;53       }
;;;54       else
;;;55       {
;;;56         FlashData.IsFlashProg  = TIsFlashProg::_PROGRAMMED;
;;;57         FlashData.IsAccCalib   = TIsAccCalib::_ACC_UNCALIBRATED;
;;;58         FlashData.BootModeFlag = TBootModeFlag::__WORK_MODE;
;;;59         FlashData.AllSets      = DefDSt;                         //настройки по умолчанию
;;;60         
;;;61         TModel::TAccCalData Tmp =
;;;62         {
;;;63           { 0.0f, 0.0f, 0.0f },
;;;64           { 1.0f, 1.0f, 1.0f }
;;;65         };
;;;66         
;;;67         FlashData.AccCalData.Offset = Tmp.Offset;
;;;68         FlashData.AccCalData.Gain   = Tmp.Gain;
;;;69         
;;;70         Flash.write_sets(
;;;71                          reinterpret_cast<uint8_t *>(&FlashData),
;;;72                          FLASH_DATA_SIZE
;;;73                         );
;;;74                         
;;;75     //    Main.FlashData = FlashData;
;;;76         
;;;77         Flash.get_sets(
;;;78                        reinterpret_cast<uint8_t *>(&Main.FlashData),
;;;79                        sizeof (TFlashData)
;;;80                       );
;;;81       }
;;;82       
;;;83       Main.DevData.CalibProcess     = TCalibProcess::__NEVER_PERFORMED;
;;;84       Main.DevData.AuthorizeItemPtr = nullptr;
;;;85     }
;;;86     
000000  b570              PUSH     {r4-r6,lr}
000002  b094              SUB      sp,sp,#0x50
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN9TSettingsC1Ev ; TSettings::TSettings()
00000e  4604              MOV      r4,r0
000010  2224              MOVS     r2,#0x24
000012  4929              LDR      r1,|L118.184|
000014  f1040030          ADD      r0,r4,#0x30
000018  f7fffffe          BL       __aeabi_memcpy4
00001c  f8c450b4          STR      r5,[r4,#0xb4]
000020  2632              MOVS     r6,#0x32
000022  4632              MOV      r2,r6
000024  a907              ADD      r1,sp,#0x1c
000026  4825              LDR      r0,|L118.188|
000028  f7fffffe          BL       _ZN6TFlash8get_setsEPht ; TFlash::get_sets(unsigned char*, unsigned short)
00002c  f89d001e          LDRB     r0,[sp,#0x1e]
000030  b930              CBNZ     r0,|L118.64|
000032  2232              MOVS     r2,#0x32
000034  a907              ADD      r1,sp,#0x1c
000036  f1040082          ADD      r0,r4,#0x82
00003a  f7fffffe          BL       __aeabi_memcpy
00003e  e031              B        |L118.164|
                  |L118.64|
000040  2000              MOVS     r0,#0
000042  f88d001e          STRB     r0,[sp,#0x1e]
000046  20ff              MOVS     r0,#0xff
000048  f88d001f          STRB     r0,[sp,#0x1f]
00004c  f64f70ff          MOV      r0,#0xffff
000050  f8ad001c          STRH     r0,[sp,#0x1c]
000054  2216              MOVS     r2,#0x16
000056  491a              LDR      r1,|L118.192|
000058  a808              ADD      r0,sp,#0x20
00005a  f7fffffe          BL       __aeabi_memcpy4
00005e  2218              MOVS     r2,#0x18
000060  4918              LDR      r1,|L118.196|
000062  a801              ADD      r0,sp,#4
000064  f7fffffe          BL       __aeabi_memcpy4
000068  9801              LDR      r0,[sp,#4]
00006a  f8cd0036          STR      r0,[sp,#0x36]
00006e  9802              LDR      r0,[sp,#8]
000070  f8cd003a          STR      r0,[sp,#0x3a]
000074  9803              LDR      r0,[sp,#0xc]
000076  f8cd003e          STR      r0,[sp,#0x3e]
00007a  9904              LDR      r1,[sp,#0x10]
00007c  f8cd1042          STR      r1,[sp,#0x42]
000080  9905              LDR      r1,[sp,#0x14]
000082  f8cd1046          STR      r1,[sp,#0x46]
000086  9906              LDR      r1,[sp,#0x18]
000088  f8cd104a          STR      r1,[sp,#0x4a]
00008c  4632              MOV      r2,r6
00008e  a907              ADD      r1,sp,#0x1c
000090  480a              LDR      r0,|L118.188|
000092  f7fffffe          BL       _ZN6TFlash10write_setsEPKht ; TFlash::write_sets(const unsigned char*, unsigned short)
000096  2232              MOVS     r2,#0x32
000098  f1040182          ADD      r1,r4,#0x82
00009c  4807              LDR      r0,|L118.188|
00009e  f7fffffe          BL       _ZN6TFlash8get_setsEPht ; TFlash::get_sets(unsigned char*, unsigned short)
0000a2  bf00              NOP      
                  |L118.164|
0000a4  2163              MOVS     r1,#0x63
0000a6  f884106e          STRB     r1,[r4,#0x6e]
0000aa  2100              MOVS     r1,#0
0000ac  f8c41079          STR      r1,[r4,#0x79]
0000b0  4620              MOV      r0,r4
0000b2  b014              ADD      sp,sp,#0x50
0000b4  bd70              POP      {r4-r6,pc}
                          ENDP

0000b6  0000              DCW      0x0000
                  |L118.184|
                          DCD      ||<Data1>||
                  |L118.188|
                          DCD      Flash
                  |L118.192|
                          DCD      DefDSt
                  |L118.196|
                          DCD      ||.constdata||+0x3c

                          AREA ||i._ZN6TModelD1Ev||, CODE, READONLY, ALIGN=1

                  _ZN6TModelD2Ev                  ; Alternate entry point ; TModel::~TModel__sub_object()
                  _ZN6TModelD1Ev PROC ; TModel::~TModel()
;;;86     
;;;87     TModel::~TModel()
;;;88     {
;;;89     
;;;90     }
;;;91       
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZN9TSettingsD1Ev ; TSettings::~TSettings()
00000a  4604              MOV      r4,r0
00000c  4620              MOV      r0,r4
00000e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.__sti___9_model_cpp_Model||, CODE, READONLY, ALIGN=2

                  __sti___9_model_cpp_Model PROC
000000  b510              PUSH     {r4,lr}
000002  4905              LDR      r1,|L120.24|
000004  4805              LDR      r0,|L120.28|
000006  f7fffffe          BL       _ZN6TModelC1ERPv ; TModel::TModel(void*&)
00000a  4604              MOV      r4,r0
00000c  4a04              LDR      r2,|L120.32|
00000e  4905              LDR      r1,|L120.36|
000010  f7fffffe          BL       __aeabi_atexit
000014  bd10              POP      {r4,pc}
                          ENDP

000016  0000              DCW      0x0000
                  |L120.24|
                          DCD      MainMut
                  |L120.28|
                          DCD      Model
                  |L120.32|
                          DCD      __dso_handle
                  |L120.36|
                          DCD      _ZN6TModelD1Ev ; TModel::~TModel()

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN6TModelC1ERPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModelC1ERPv||
                          DCD      0x00000001

                          AREA ||area_number.122||, LINKORDER=||i._ZN6TModelD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.122||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModelD1Ev||
                          DCD      0x00000001

                          AREA ||area_number.123||, LINKORDER=||i._ZN6TModel12get_dev_typeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.123||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12get_dev_typeEv||
                          DCD      0x00000001

                          AREA ||area_number.124||, LINKORDER=||i._ZN6TModel12get_btn_modeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.124||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12get_btn_modeEv||
                          DCD      0x00000001

                          AREA ||area_number.125||, LINKORDER=||i._ZN6TModel12set_btn_modeEN9TSettings6TPressE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.125||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12set_btn_modeEN9TSettings6TPressE||
                          DCD      0x00000001

                          AREA ||area_number.126||, LINKORDER=||i._ZN6TModel12get_led_modeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.126||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12get_led_modeEv||
                          DCD      0x00000001

                          AREA ||area_number.127||, LINKORDER=||i._ZN6TModel12set_led_modeEN9TSettings8TLedModeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.127||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12set_led_modeEN9TSettings8TLedModeE||
                          DCD      0x00000001

                          AREA ||area_number.128||, LINKORDER=||i._ZN6TModel11get_code_swEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.128||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11get_code_swEv||
                          DCD      0x00000001

                          AREA ||area_number.129||, LINKORDER=||i._ZN6TModel11set_code_swEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.129||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11set_code_swEh||
                          DCD      0x00000001

                          AREA ||area_number.130||, LINKORDER=||i._ZN6TModel14get_hc_code_swEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.130||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14get_hc_code_swEv||
                          DCD      0x00000001

                          AREA ||area_number.131||, LINKORDER=||i._ZN6TModel14set_hc_code_swEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.131||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14set_hc_code_swEh||
                          DCD      0x00000001

                          AREA ||area_number.132||, LINKORDER=||i._ZN6TModel15get_hc_prog_nbrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.132||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15get_hc_prog_nbrEv||
                          DCD      0x00000001

                          AREA ||area_number.133||, LINKORDER=||i._ZN6TModel15set_hc_prog_nbrEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.133||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15set_hc_prog_nbrEt||
                          DCD      0x00000001

                          AREA ||area_number.134||, LINKORDER=||i._ZN6TModel14get_open_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.134||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14get_open_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.135||, LINKORDER=||i._ZN6TModel14set_open_angleEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.135||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14set_open_angleEf||
                          DCD      0x00000001

                          AREA ||area_number.136||, LINKORDER=||i._ZN6TModel12get_hc_stateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.136||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12get_hc_stateEv||
                          DCD      0x00000001

                          AREA ||area_number.137||, LINKORDER=||i._ZN6TModel12set_hc_stateEN9TSettings3THCE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.137||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12set_hc_stateEN9TSettings3THCE||
                          DCD      0x00000001

                          AREA ||area_number.138||, LINKORDER=||i._ZN6TModel14get_hc_pos_errEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.138||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14get_hc_pos_errEv||
                          DCD      0x00000001

                          AREA ||area_number.139||, LINKORDER=||i._ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.139||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14set_hc_pos_errEN9TSettings7TPosErrE||
                          DCD      0x00000001

                          AREA ||area_number.140||, LINKORDER=||i._ZN6TModel16get_base_pos_errEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.140||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel16get_base_pos_errEv||
                          DCD      0x00000001

                          AREA ||area_number.141||, LINKORDER=||i._ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.141||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel16set_base_pos_errEN9TSettings7TPosErrE||
                          DCD      0x00000001

                          AREA ||area_number.142||, LINKORDER=||i._ZN6TModel11get_connectEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.142||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11get_connectEv||
                          DCD      0x00000001

                          AREA ||area_number.143||, LINKORDER=||i._ZN6TModel11set_connectEN9TSettings8TConnectE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.143||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11set_connectEN9TSettings8TConnectE||
                          DCD      0x00000001

                          AREA ||area_number.144||, LINKORDER=||i._ZN6TModel16get_hc_acc_calibEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.144||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel16get_hc_acc_calibEv||
                          DCD      0x00000001

                          AREA ||area_number.145||, LINKORDER=||i._ZN6TModel16set_hc_acc_calibEN9TSettings6TCalibE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.145||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel16set_hc_acc_calibEN9TSettings6TCalibE||
                          DCD      0x00000001

                          AREA ||area_number.146||, LINKORDER=||i._ZN6TModel13set_acc_calibEN9TSettings6TCalibE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.146||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_acc_calibEN9TSettings6TCalibE||
                          DCD      0x00000001

                          AREA ||area_number.147||, LINKORDER=||i._ZN6TModel20get_accel_calib_signEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.147||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20get_accel_calib_signEv||
                          DCD      0x00000001

                          AREA ||area_number.148||, LINKORDER=||i._ZN6TModel13get_acc_calibEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.148||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_acc_calibEv||
                          DCD      0x00000001

                          AREA ||area_number.149||, LINKORDER=||i._ZN6TModel11get_hc_memsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.149||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11get_hc_memsEv||
                          DCD      0x00000001

                          AREA ||area_number.150||, LINKORDER=||i._ZN6TModel11set_hc_memsEN9TSettings10TMainStateE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.150||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11set_hc_memsEN9TSettings10TMainStateE||
                          DCD      0x00000001

                          AREA ||area_number.151||, LINKORDER=||i._ZN6TModel13get_base_memsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.151||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_base_memsEv||
                          DCD      0x00000001

                          AREA ||area_number.152||, LINKORDER=||i._ZN6TModel13set_base_memsEN9TSettings10TMainStateE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.152||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_base_memsEN9TSettings10TMainStateE||
                          DCD      0x00000001

                          AREA ||area_number.153||, LINKORDER=||i._ZN6TModel13get_dev_stateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.153||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_dev_stateEv||
                          DCD      0x00000001

                          AREA ||area_number.154||, LINKORDER=||i._ZN6TModel12get_my_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.154||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12get_my_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.155||, LINKORDER=||i._ZN6TModel12set_my_angleEs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.155||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12set_my_angleEs||
                          DCD      0x00000001

                          AREA ||area_number.156||, LINKORDER=||i._ZN6TModel14get_sens_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.156||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14get_sens_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.157||, LINKORDER=||i._ZN6TModel14set_sens_angleEs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.157||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14set_sens_angleEs||
                          DCD      0x00000001

                          AREA ||area_number.158||, LINKORDER=||i._ZN6TModel26get_sens_sample_valid_signEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.158||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel26get_sens_sample_valid_signEv||
                          DCD      0x00000001

                          AREA ||area_number.159||, LINKORDER=||i._ZN6TModel26set_sens_sample_valid_signEN9TSettings10TValidSignE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.159||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel26set_sens_sample_valid_signEN9TSettings10TValidSignE||
                          DCD      0x00000001

                          AREA ||area_number.160||, LINKORDER=||i._ZN6TModel20get_sens_axis_rotateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.160||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20get_sens_axis_rotateEv||
                          DCD      0x00000001

                          AREA ||area_number.161||, LINKORDER=||i._ZN6TModel14set_flash_dataEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.161||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14set_flash_dataEv||
                          DCD      0x00000001

                          AREA ||area_number.162||, LINKORDER=||i._ZN6TModel20set_sens_axis_rotateEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.162||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20set_sens_axis_rotateEh||
                          DCD      0x00000001

                          AREA ||area_number.163||, LINKORDER=||i._ZN6TModel24get_sens_buf_axis_rotateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.163||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel24get_sens_buf_axis_rotateEv||
                          DCD      0x00000001

                          AREA ||area_number.164||, LINKORDER=||i._ZN6TModel24set_sens_buf_axis_rotateEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.164||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel24set_sens_buf_axis_rotateEh||
                          DCD      0x00000001

                          AREA ||area_number.165||, LINKORDER=||i._ZN6TModel24get_sens_roll_bias_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.165||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel24get_sens_roll_bias_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.166||, LINKORDER=||i._ZN6TModel24set_sens_roll_bias_angleEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.166||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel24set_sens_roll_bias_angleEa||
                          DCD      0x00000001

                          AREA ||area_number.167||, LINKORDER=||i._ZN6TModel25get_sens_pitch_bias_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.167||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel25get_sens_pitch_bias_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.168||, LINKORDER=||i._ZN6TModel25set_sens_pitch_bias_angleEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.168||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel25set_sens_pitch_bias_angleEa||
                          DCD      0x00000001

                          AREA ||area_number.169||, LINKORDER=||i._ZN6TModel13get_raw_pitchEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.169||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_raw_pitchEv||
                          DCD      0x00000001

                          AREA ||area_number.170||, LINKORDER=||i._ZN6TModel13set_raw_pitchEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.170||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_raw_pitchEa||
                          DCD      0x00000001

                          AREA ||area_number.171||, LINKORDER=||i._ZN6TModel12get_raw_rollEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.171||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12get_raw_rollEv||
                          DCD      0x00000001

                          AREA ||area_number.172||, LINKORDER=||i._ZN6TModel12set_raw_rollEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.172||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12set_raw_rollEa||
                          DCD      0x00000001

                          AREA ||area_number.173||, LINKORDER=||i._ZN6TModel11get_accel_zEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.173||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11get_accel_zEv||
                          DCD      0x00000001

                          AREA ||area_number.174||, LINKORDER=||i._ZN6TModel11set_accel_zEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.174||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11set_accel_zEf||
                          DCD      0x00000001

                          AREA ||area_number.175||, LINKORDER=||i._ZN6TModel17get_calib_processEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.175||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel17get_calib_processEv||
                          DCD      0x00000001

                          AREA ||area_number.176||, LINKORDER=||i._ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.176||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel17set_calib_processEN9TSettings13TCalibProcessE||
                          DCD      0x00000001

                          AREA ||area_number.177||, LINKORDER=||i._ZN6TModel13set_calib_cmdEt||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.177||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_calib_cmdEt||
                          DCD      0x00000001

                          AREA ||area_number.178||, LINKORDER=||i._ZN6TModel13handler_calibEsPb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.178||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13handler_calibEsPb||
                          DCD      0x00000001

                          AREA ||area_number.179||, LINKORDER=||i._ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.179||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel22set_authorize_item_ptrEPKNS_10TAuthorizeE||
                          DCD      0x00000001

                          AREA ||area_number.180||, LINKORDER=||i._ZN6TModel10set_accessEN9TSettings7TAccessE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.180||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel10set_accessEN9TSettings7TAccessE||
                          DCD      0x00000001

                          AREA ||area_number.181||, LINKORDER=||i._ZN6TModel14handler_accessEsPb||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.181||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14handler_accessEsPb||
                          DCD      0x00000001

                          AREA ||area_number.182||, LINKORDER=||i._ZN6TModel22get_calib_position_ctrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.182||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel22get_calib_position_ctrEv||
                          DCD      0x00000001

                          AREA ||area_number.183||, LINKORDER=||i._ZN6TModel22set_calib_position_ctrENS_11TMemsOrientE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.183||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel22set_calib_position_ctrENS_11TMemsOrientE||
                          DCD      0x00000001

                          AREA ||area_number.184||, LINKORDER=||i._ZN6TModel22clr_calib_position_ctrENS_11TMemsOrientE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.184||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel22clr_calib_position_ctrENS_11TMemsOrientE||
                          DCD      0x00000001

                          AREA ||area_number.185||, LINKORDER=||i._ZN6TModel19get_calib_parameterEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.185||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel19get_calib_parameterEv||
                          DCD      0x00000001

                          AREA ||area_number.186||, LINKORDER=||i._ZN6TModel19set_calib_parameterEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.186||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel19set_calib_parameterEf||
                          DCD      0x00000001

                          AREA ||area_number.187||, LINKORDER=||i._ZN6TModel17get_transact_signERh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.187||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel17get_transact_signERh||
                          DCD      0x00000001

                          AREA ||area_number.188||, LINKORDER=||i._ZN6TModel17set_transact_signERKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.188||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel17set_transact_signERKh||
                          DCD      0x00000001

                          AREA ||area_number.189||, LINKORDER=||i._ZN6TModel10get_accessEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.189||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel10get_accessEv||
                          DCD      0x00000001

                          AREA ||area_number.190||, LINKORDER=||i._ZN6TModel22get_authorize_item_ptrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.190||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel22get_authorize_item_ptrEv||
                          DCD      0x00000001

                          AREA ||area_number.191||, LINKORDER=||i._ZN6TModel20get_communicate_byteEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.191||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20get_communicate_byteEv||
                          DCD      0x00000001

                          AREA ||area_number.192||, LINKORDER=||i._ZN6TModel20set_communicate_byteEN9TSettings12TCommunicateE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.192||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20set_communicate_byteEN9TSettings12TCommunicateE||
                          DCD      0x00000001

                          AREA ||area_number.193||, LINKORDER=||i._ZN6TModel21get_sample_valid_signEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.193||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel21get_sample_valid_signEv||
                          DCD      0x00000001

                          AREA ||area_number.194||, LINKORDER=||i._ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.194||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel21set_sample_valid_signEN9TSettings10TValidSignE||
                          DCD      0x00000001

                          AREA ||area_number.195||, LINKORDER=||i._ZN6TModel18get_start_meas_cmdEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.195||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel18get_start_meas_cmdEv||
                          DCD      0x00000001

                          AREA ||area_number.196||, LINKORDER=||i._ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.196||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel18set_start_meas_cmdEN9TSettings5TMeasE||
                          DCD      0x00000001

                          AREA ||area_number.197||, LINKORDER=||i._ZN6TModel18get_boot_mode_flagEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.197||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel18get_boot_mode_flagEv||
                          DCD      0x00000001

                          AREA ||area_number.198||, LINKORDER=||i._ZN6TModel18set_boot_mode_flagEN9TSettings13TBootModeFlagE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.198||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel18set_boot_mode_flagEN9TSettings13TBootModeFlagE||
                          DCD      0x00000001

                          AREA ||area_number.199||, LINKORDER=||i._ZN6TModel19get_flash_prog_signEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.199||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel19get_flash_prog_signEv||
                          DCD      0x00000001

                          AREA ||area_number.200||, LINKORDER=||i._ZN6TModel19set_flash_prog_signERKN9TSettings12TIsFlashProgE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.200||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel19set_flash_prog_signERKN9TSettings12TIsFlashProgE||
                          DCD      0x00000001

                          AREA ||area_number.201||, LINKORDER=||i._ZN6TModel20set_accel_calib_signERKN9TSettings11TIsAccCalibE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.201||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20set_accel_calib_signERKN9TSettings11TIsAccCalibE||
                          DCD      0x00000001

                          AREA ||area_number.202||, LINKORDER=||i._ZN6TModel13get_sens_addrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.202||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_sens_addrEv||
                          DCD      0x00000001

                          AREA ||area_number.203||, LINKORDER=||i._ZN6TModel13set_sens_addrERKh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.203||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_sens_addrERKh||
                          DCD      0x00000001

                          AREA ||area_number.204||, LINKORDER=||i._ZN6TModel13get_psw_adminEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.204||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_psw_adminEv||
                          DCD      0x00000001

                          AREA ||area_number.205||, LINKORDER=||i._ZN6TModel13set_psw_adminEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.205||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_psw_adminEf||
                          DCD      0x00000001

                          AREA ||area_number.206||, LINKORDER=||i._ZN6TModel13get_psw_superEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.206||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_psw_superEv||
                          DCD      0x00000001

                          AREA ||area_number.207||, LINKORDER=||i._ZN6TModel13set_psw_superEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.207||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_psw_superEf||
                          DCD      0x00000001

                          AREA ||area_number.208||, LINKORDER=||i._ZN6TModel7get_thrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.208||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel7get_thrEv||
                          DCD      0x00000001

                          AREA ||area_number.209||, LINKORDER=||i._ZN6TModel7set_thrEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.209||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel7set_thrEh||
                          DCD      0x00000001

                          AREA ||area_number.210||, LINKORDER=||i._ZN6TModel8get_hystEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.210||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel8get_hystEv||
                          DCD      0x00000001

                          AREA ||area_number.211||, LINKORDER=||i._ZN6TModel8set_hystEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.211||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel8set_hystEh||
                          DCD      0x00000001

                          AREA ||area_number.212||, LINKORDER=||i._ZN6TModel8get_biasEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.212||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel8get_biasEv||
                          DCD      0x00000001

                          AREA ||area_number.213||, LINKORDER=||i._ZN6TModel8set_biasEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.213||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel8set_biasEa||
                          DCD      0x00000001

                          AREA ||area_number.214||, LINKORDER=||i._ZN6TModel15get_axis_rotateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.214||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15get_axis_rotateEv||
                          DCD      0x00000001

                          AREA ||area_number.215||, LINKORDER=||i._ZN6TModel15set_axis_rotateEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.215||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15set_axis_rotateEh||
                          DCD      0x00000001

                          AREA ||area_number.216||, LINKORDER=||i._ZN6TModel19get_roll_bias_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.216||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel19get_roll_bias_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.217||, LINKORDER=||i._ZN6TModel19set_roll_bias_angleEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.217||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel19set_roll_bias_angleEa||
                          DCD      0x00000001

                          AREA ||area_number.218||, LINKORDER=||i._ZN6TModel20get_pitch_bias_angleEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.218||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20get_pitch_bias_angleEv||
                          DCD      0x00000001

                          AREA ||area_number.219||, LINKORDER=||i._ZN6TModel20set_pitch_bias_angleEa||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.219||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20set_pitch_bias_angleEa||
                          DCD      0x00000001

                          AREA ||area_number.220||, LINKORDER=||i._ZN6TModel12get_d_o_setsEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.220||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12get_d_o_setsEv||
                          DCD      0x00000001

                          AREA ||area_number.221||, LINKORDER=||i._ZN6TModel12set_d_o_setsE8TContact||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.221||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel12set_d_o_setsE8TContact||
                          DCD      0x00000001

                          AREA ||area_number.222||, LINKORDER=||i._ZN6TModel13get_interconnEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.222||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13get_interconnEv||
                          DCD      0x00000001

                          AREA ||area_number.223||, LINKORDER=||i._ZN6TModel13set_interconnE10TInterconn||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.223||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel13set_interconnE10TInterconn||
                          DCD      0x00000001

                          AREA ||area_number.224||, LINKORDER=||i._ZN6TModel11get_mb_addrEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.224||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11get_mb_addrEv||
                          DCD      0x00000001

                          AREA ||area_number.225||, LINKORDER=||i._ZN6TModel11set_mb_addrEs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.225||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11set_mb_addrEs||
                          DCD      0x00000001

                          AREA ||area_number.226||, LINKORDER=||i._ZN6TModel15get_u_baud_rateEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.226||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15get_u_baud_rateEv||
                          DCD      0x00000001

                          AREA ||area_number.227||, LINKORDER=||i._ZN6TModel15set_u_baud_rateEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.227||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15set_u_baud_rateEh||
                          DCD      0x00000001

                          AREA ||area_number.228||, LINKORDER=||i._ZN6TModel26get_u_baud_rate_bit_to_secEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.228||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel26get_u_baud_rate_bit_to_secEv||
                          DCD      0x00000001

                          AREA ||area_number.229||, LINKORDER=||i._ZN6TModel9get_u_parEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.229||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel9get_u_parEv||
                          DCD      0x00000001

                          AREA ||area_number.230||, LINKORDER=||i._ZN6TModel9set_u_parEh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.230||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel9set_u_parEh||
                          DCD      0x00000001

                          AREA ||area_number.231||, LINKORDER=||i._ZN6TModel8get_setsER10MySettings||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.231||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel8get_setsER10MySettings||
                          DCD      0x00000001

                          AREA ||area_number.232||, LINKORDER=||i._ZN6TModel8set_setsERK10MySettings||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.232||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel8set_setsERK10MySettings||
                          DCD      0x00000001

                          AREA ||area_number.233||, LINKORDER=||i._ZN6TModel11get_if_setsER3TIf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.233||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11get_if_setsER3TIf||
                          DCD      0x00000001

                          AREA ||area_number.234||, LINKORDER=||i._ZN6TModel11set_if_setsERK3TIf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.234||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel11set_if_setsERK3TIf||
                          DCD      0x00000001

                          AREA ||area_number.235||, LINKORDER=||i._ZN6TModel20get_accel_calib_dataERN9TSettings11TAccCalDataE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.235||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20get_accel_calib_dataERN9TSettings11TAccCalDataE||
                          DCD      0x00000001

                          AREA ||area_number.236||, LINKORDER=||i._ZN6TModel20set_accel_calib_dataERKN9TSettings11TAccCalDataE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.236||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel20set_accel_calib_dataERKN9TSettings11TAccCalDataE||
                          DCD      0x00000001

                          AREA ||area_number.237||, LINKORDER=||i._ZN6TModel14get_flash_dataERN9TSettings10TFlashDataE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.237||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel14get_flash_dataERN9TSettings10TFlashDataE||
                          DCD      0x00000001

                          AREA ||area_number.238||, LINKORDER=||i._ZN6TModel15get_pd_pressureEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.238||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15get_pd_pressureEv||
                          DCD      0x00000001

                          AREA ||area_number.239||, LINKORDER=||i._ZN6TModel15set_pd_pressureEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.239||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN6TModel15set_pd_pressureEf||
                          DCD      0x00000001

                          AREA ||area_number.240||, LINKORDER=||i.__sti___9_model_cpp_Model||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.240||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___9_model_cpp_Model||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Model
                          %        184

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  DefDSt
000000  01                DCB      0x01
000001  449a4000          DCFSU    0x449a4000 ; 1234
000005  41fb47ae          DCFSU    0x41fb47ae ; 31.409999847412109
000009  190a00            DCB      0x19,0x0a,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  fc000001          DCB      0xfc,0x00,0x00,0x01
000014  05030000          DCB      0x05,0x03,0x00,0x00
                  ||<Data1>||
000018  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
000024  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ZN6TModel13get_psw_adminEv ; TModel::get_psw_admin()
                          DCD      0x00000000
000030  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      _ZN6TModel13get_psw_superEv ; TModel::get_psw_super()
                          DCD      0x00000000
00003c  00000000          DCFS     0x00000000 ; 0
000040  00000000          DCFS     0x00000000 ; 0
000044  00000000          DCFS     0x00000000 ; 0
000048  3f800000          DCFS     0x3f800000 ; 1
00004c  3f800000          DCFS     0x3f800000 ; 1
000050  3f800000          DCFS     0x3f800000 ; 1
                          DCD      _ZNK9TSettings9chk_calibEs ; TSettings::chk_calib(short) const
                          DCD      0x00000000
                          DCD      _ZN6TModel13handler_calibEsPb ; TModel::handler_calib(short, bool*)
                          DCD      0x00000000
                          DCD      _ZNK9TSettings10chk_accessEs ; TSettings::chk_access(short) const
                          DCD      0x00000000
                          DCD      _ZN6TModel14handler_accessEsPb ; TModel::handler_access(short, bool*)
                          DCD      0x00000000
                          DCD      0x000004b0
                          DCD      0x00000960
                          DCD      0x000012c0
                          DCD      0x00002580
                          DCD      0x00003840
                          DCD      0x00004b00
                          DCD      0x00009600
                          DCD      0x0000dac0
                          DCD      0x0000e100
                          DCD      0x0001c200

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___9_model_cpp_Model

                          AREA ||t._ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  7830              LDRB     r0,[r6,#0]
00001a  7028              STRB     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.730||, COMGROUP=_ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.730||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIhU8__packedhEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  7830              LDRB     r0,[r6,#0]
00001a  7028              STRB     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.737||, COMGROUP=_ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.737||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIU8__packedhhEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  6830              LDR      r0,[r6,#0]
00001a  6028              STR      r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.744||, COMGROUP=_ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.744||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIfU8__packedfEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIU8__packedffEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIU8__packedffEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  6830              LDR      r0,[r6,#0]
00001a  6028              STR      r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.751||, COMGROUP=_ZN6TModel11access_protIU8__packedffEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIU8__packedffEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.751||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIU8__packedffEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_ PROC ; void TModel::access_prot<TSettings::TState, TSettings::TState>(T1&, const T2&)
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  7830              LDRB     r0,[r6,#0]
00001a  7028              STRB     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.758||, COMGROUP=_ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.758||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIN9TSettings6TStateES2_EEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  8830              LDRH     r0,[r6,#0]
00001a  8028              STRH     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.765||, COMGROUP=_ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.765||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIsU8__packedsEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIU8__packedssEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIU8__packedssEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIU8__packedssEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  8830              LDRH     r0,[r6,#0]
00001a  8028              STRH     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.772||, COMGROUP=_ZN6TModel11access_protIU8__packedssEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIU8__packedssEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.772||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIU8__packedssEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_ PROC ; void TModel::access_prot<TSettings::TFlashData, TSettings::TFlashData>(T1&, const T2&)
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  2232              MOVS     r2,#0x32
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       __aeabi_memcpy
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
000022  f8d410b4          LDR      r1,[r4,#0xb4]
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
00002a  6808              LDR      r0,[r1,#0]
00002c  4619              MOV      r1,r3
00002e  f7fffffe          BL       xQueueGenericSend
;;;412      }
000032  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.779||, COMGROUP=_ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.779||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIN9TSettings10TFlashDataES2_EEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  7830              LDRB     r0,[r6,#0]
00001a  7028              STRB     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.786||, COMGROUP=_ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.786||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIaU8__packedaEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  7830              LDRB     r0,[r6,#0]
00001a  7028              STRB     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.793||, COMGROUP=_ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.793||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIU8__packedaaEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_ PROC
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  6830              LDR      r0,[r6,#0]
00001a  6028              STR      r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.800||, COMGROUP=_ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.800||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIU8__packedjjEEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_ PROC ; void TModel::access_prot<TSettings::TCommunicate, TSettings::TCommunicate>(T1&, const T2&)
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  7830              LDRB     r0,[r6,#0]
00001a  7028              STRB     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.807||, COMGROUP=_ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.807||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIN9TSettings12TCommunicateES2_EEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_ PROC ; void TModel::access_prot<TBits, TBits>(T1&, const T2&)
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  7830              LDRB     r0,[r6,#0]
00001a  7028              STRB     r0,[r5,#0]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
00001c  f8d410b4          LDR      r1,[r4,#0xb4]
000020  2300              MOVS     r3,#0
000022  461a              MOV      r2,r3
000024  6808              LDR      r0,[r1,#0]
000026  4619              MOV      r1,r3
000028  f7fffffe          BL       xQueueGenericSend
;;;412      }
00002c  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.814||, COMGROUP=_ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.814||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protI5TBitsS1_EEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_ PROC ; void TModel::access_prot<MySettings, MySettings>(T1&, const T2&)
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  2216              MOVS     r2,#0x16
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       __aeabi_memcpy
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
000022  f8d410b4          LDR      r1,[r4,#0xb4]
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
00002a  6808              LDR      r0,[r1,#0]
00002c  4619              MOV      r1,r3
00002e  f7fffffe          BL       xQueueGenericSend
;;;412      }
000032  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.821||, COMGROUP=_ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.821||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protI10MySettingsS1_EEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_ PROC ; void TModel::access_prot<TIf, TIf>(T1&, const T2&)
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  8830              LDRH     r0,[r6,#0]
00001a  8028              STRH     r0,[r5,#0]
00001c  78b0              LDRB     r0,[r6,#2]
00001e  70a8              STRB     r0,[r5,#2]
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
000020  f8d410b4          LDR      r1,[r4,#0xb4]
000024  2300              MOVS     r3,#0
000026  461a              MOV      r2,r3
000028  6808              LDR      r0,[r1,#0]
00002a  4619              MOV      r1,r3
00002c  f7fffffe          BL       xQueueGenericSend
;;;412      }
000030  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.828||, COMGROUP=_ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.828||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protI3TIfS1_EEvRT_RKT0_||
                          DCD      0x00000001

                          AREA ||t._ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_||, COMGROUP=_ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_, CODE, READONLY, ALIGN=1

                  _ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_ PROC ; void TModel::access_prot<TSettings::TAccCalData, TSettings::TAccCalData>(T1&, const T2&)
;;;406      template< typename TDest, typename TSrc >
;;;407      void access_prot(TDest &Dest, const TSrc &Src )
000000  b570              PUSH     {r4-r6,lr}
;;;408      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;409        xSemaphoreTake(Mut, portMAX_DELAY); //захватить мьютекс для атомарной работы с основными данными устройства
000008  f8d410b4          LDR      r1,[r4,#0xb4]
00000c  2300              MOVS     r3,#0
00000e  1e5a              SUBS     r2,r3,#1
000010  6808              LDR      r0,[r1,#0]
000012  4619              MOV      r1,r3
000014  f7fffffe          BL       xQueueGenericReceive
;;;410          Dest = Src;
000018  2218              MOVS     r2,#0x18
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       __aeabi_memcpy
;;;411        xSemaphoreGive(Mut);                //освободить мьютекс для атомарной работы с основными данными устройства
000022  f8d410b4          LDR      r1,[r4,#0xb4]
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
00002a  6808              LDR      r0,[r1,#0]
00002c  4619              MOV      r1,r3
00002e  f7fffffe          BL       xQueueGenericSend
;;;412      }
000032  bd70              POP      {r4-r6,pc}
;;;413    };
                          ENDP


                          AREA ||area_number.835||, COMGROUP=_ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_, LINKORDER=||t._ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.835||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN6TModel11access_protIN9TSettings11TAccCalDataES2_EEvRT_RKT0_||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "Source\\Main\\src\\model.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_model_cpp_Model___ZN27_INTERNAL_9_model_cpp_Model7__REV16Ej|
#line 388 ".\\Source\\Core\\inc\\cmsis_armcc.h"
|__asm___9_model_cpp_Model___ZN27_INTERNAL_9_model_cpp_Model7__REV16Ej| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_model_cpp_Model___ZN27_INTERNAL_9_model_cpp_Model7__REVSHEi|
#line 402
|__asm___9_model_cpp_Model___ZN27_INTERNAL_9_model_cpp_Model7__REVSHEi| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_model_cpp_Model___ZN27_INTERNAL_9_model_cpp_Model5__RRXEj|
#line 587
|__asm___9_model_cpp_Model___ZN27_INTERNAL_9_model_cpp_Model5__RRXEj| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
