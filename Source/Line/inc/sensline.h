// Информация о файле: $HeadURL: http://s005.sensor:18080/svn/Sens/trunk/SensLine/sensline.h $
// $Revision: 26 $  $Date: 2016-11-21 16:25:33 +0300 (Пн, 21 ноя 2016) $  $Author: alb $

/////////////////////////////////////////////////////////////////////////////
// Реализация транспортного уровня линии СЕНС - заголовочный файл пользователя
// Версия 0.0

#ifndef SENSLINE_H
#define SENSLINE_H

#ifdef __cplusplus
extern "C" {
#endif

#include "sensline_cfg.h"

// Для всех функций действует формат пакета:
// 1 байт - длина пакета LEN БЕЗ ДАННОГО БАЙТА
// 2 байт - адрес
// 3 байт - команда
// 4..n байты - содержимое пакета длиной LEN-2

// Конфигурация аппаратной части линии
// Подключение портов к шине осуществить в основной программе
// Биты байта конфигурации:
// 7 - равен единице если устройство генерирует синхроимпульсы
void ConfigSENS(uint8_t);
// Перевод аппаратной части в режим простоя
void StopSENS(void);
// Возвращает 1 и сбрасывает флаг, если с последущего обращения прошла синхропауза
uint8_t GetNC(void);
// Получить очередной пакет с линии
// Возвращает 0 если пакетов нет или длину пакета - если есть
// Копирует в указанный буфер пакет (до 64 байт)
// Если snum, spause не равны нулю - устанавливает их в значения номера синхроимпульса и промежутка времени до приема пакета
uint8_t SensGetPkg(uint8_t * buf);
// Поставить пакет в очередь отправки
// buf - указатель на область памяти, содержащую пакет
// iadr - эквивалентный адрес передачи. =0 если передавать немедленно, =255 если передавать от своего адреса
void SensSendPkg(uint8_t * buf,uint8_t iadr);
//////////////////////// РАБОТА С ПАКЕТАМИ СОСТОЯНИЙ
uint8_t CheckBSTr(void); // Возвращает 1 если сейчас передается пакет состояний и менять его нельзя, 0 - если всё можно
void BlockST(void);   // Блокирует передачу байтов состояния и разрешает изменение
void UnblockST(void); // Разблокирует передачу байтов состояния
void SetBSBuf(void * bsbufpnt);  // Устанавливает указатель на буфер состояний
// Формат буфера состояний (если =0 состояния не передаются):
// Один или несколько блоков следующего вида:
// 0..1 байты - преамбула PkgHeader
// 2..n+3 байты - данные пакета, при этом n=значению второго байта
// Последний блок имеет длину =0, что делает syncnum=0
// 
// Перед работой с блоком нужно запретить выдачу состояний командой BlockST
// Изменить данные блока (или установить новый адрес блока)
// И разрешить выдачу состояний командой UnblockST - при этом произойдёт автоматический
// пересчет полей syncnum и pause в зависимости от адреса в блоке данных
uint8_t GetBSBuf(void * bsbufpnt); // Считывает первый передаваемый пакет из буфера состояний. Возвращает длину пакета или ноль если пакета нет

// Преамбула пакета
typedef struct {
  uint8_t syncnum;
  uint8_t pause;
} PkgHeader;

// Стандартный пакет состояний
typedef struct {
  uint8_t syncnum;// Заполняется автоматически
  uint8_t pause;  // Заполнятеся автоматически
  uint8_t num;    // Всегда равно 3
  uint8_t adr;    // 
  uint8_t comm;   // 0xA0
  uint8_t dat;    // Состояние
} StdSostPkg;

//////////////////////// Дополнительные функции
// Функции работы со временем
#define SECSSEC 1000    // Количество тиков в секунде

uint32_t zgetssec(void);      // Время в миллисекундах, без нулевого значения
uint32_t getssec(void);      // Время в миллисекундах
uint32_t tdlt(uint32_t); // Разница веремн

#ifdef __cplusplus
}
#endif

#endif
